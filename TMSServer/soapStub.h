/* soapStub.h
   Generated by gSOAP 2.8.19 from d:\Structure\TMSServTemp\TmsServer.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns1	"http://xerofox.com/TMSService/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20819
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique type id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfInt
#define SOAP_TYPE_ns1__ArrayOfInt (12)
/* ns1:ArrayOfInt */
class SOAP_CMAC ns1__ArrayOfInt
{
public:
	int __sizeint_;	/* sequence of elements <int> */
	int *int_;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_ns1__ArrayOfInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfInt() { ns1__ArrayOfInt::soap_default(NULL); }
	virtual ~ns1__ArrayOfInt() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfUnsignedInt
#define SOAP_TYPE_ns1__ArrayOfUnsignedInt (13)
/* ns1:ArrayOfUnsignedInt */
class SOAP_CMAC ns1__ArrayOfUnsignedInt
{
public:
	int __sizeunsignedInt;	/* sequence of elements <unsignedInt> */
	unsigned int *unsignedInt;	/* optional element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_ns1__ArrayOfUnsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfUnsignedInt() { ns1__ArrayOfUnsignedInt::soap_default(NULL); }
	virtual ~ns1__ArrayOfUnsignedInt() { }
};
#endif

#ifndef SOAP_TYPE__ns1__loginUser
#define SOAP_TYPE__ns1__loginUser (14)
/* ns1:loginUser */
class SOAP_CMAC _ns1__loginUser
{
public:
	char *userName;	/* optional element of type xsd:string */
	char *password;	/* optional element of type xsd:string */
	char *fingerprint;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE__ns1__loginUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__loginUser() { _ns1__loginUser::soap_default(NULL); }
	virtual ~_ns1__loginUser() { }
};
#endif

#ifndef SOAP_TYPE__ns1__loginUserResponse
#define SOAP_TYPE__ns1__loginUserResponse (15)
/* ns1:loginUserResponse */
class SOAP_CMAC _ns1__loginUserResponse
{
public:
	int loginUserResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE__ns1__loginUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__loginUserResponse() { _ns1__loginUserResponse::soap_default(NULL); }
	virtual ~_ns1__loginUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__loginUserByByteArr
#define SOAP_TYPE__ns1__loginUserByByteArr (16)
/* ns1:loginUserByByteArr */
class SOAP_CMAC _ns1__loginUserByByteArr
{
public:
	xsd__base64Binary *userInfo;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE__ns1__loginUserByByteArr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__loginUserByByteArr() { _ns1__loginUserByByteArr::soap_default(NULL); }
	virtual ~_ns1__loginUserByByteArr() { }
};
#endif

#ifndef SOAP_TYPE__ns1__loginUserByByteArrResponse
#define SOAP_TYPE__ns1__loginUserByByteArrResponse (17)
/* ns1:loginUserByByteArrResponse */
class SOAP_CMAC _ns1__loginUserByByteArrResponse
{
public:
	int loginUserByByteArrResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE__ns1__loginUserByByteArrResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__loginUserByByteArrResponse() { _ns1__loginUserByByteArrResponse::soap_default(NULL); }
	virtual ~_ns1__loginUserByByteArrResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__logoutUser
#define SOAP_TYPE__ns1__logoutUser (18)
/* ns1:logoutUser */
class SOAP_CMAC _ns1__logoutUser
{
public:
	int sessionId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique type id SOAP_TYPE__ns1__logoutUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__logoutUser() { _ns1__logoutUser::soap_default(NULL); }
	virtual ~_ns1__logoutUser() { }
};
#endif

#ifndef SOAP_TYPE__ns1__logoutUserResponse
#define SOAP_TYPE__ns1__logoutUserResponse (19)
/* ns1:logoutUserResponse */
class SOAP_CMAC _ns1__logoutUserResponse
{
public:
	int logoutUserResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique type id SOAP_TYPE__ns1__logoutUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__logoutUserResponse() { _ns1__logoutUserResponse::soap_default(NULL); }
	virtual ~_ns1__logoutUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryObjects
#define SOAP_TYPE__ns1__QueryObjects (20)
/* ns1:QueryObjects */
class SOAP_CMAC _ns1__QueryObjects
{
public:
	int sessionId;	/* required element of type xsd:int */
	char *clsName;	/* optional element of type xsd:string */
	char *xmlScope;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique type id SOAP_TYPE__ns1__QueryObjects */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryObjects() { _ns1__QueryObjects::soap_default(NULL); }
	virtual ~_ns1__QueryObjects() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryObjectsResponse
#define SOAP_TYPE__ns1__QueryObjectsResponse (21)
/* ns1:QueryObjectsResponse */
class SOAP_CMAC _ns1__QueryObjectsResponse
{
public:
	xsd__base64Binary *QueryObjectsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique type id SOAP_TYPE__ns1__QueryObjectsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryObjectsResponse() { _ns1__QueryObjectsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryObjectsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DownloadObjects
#define SOAP_TYPE__ns1__DownloadObjects (22)
/* ns1:DownloadObjects */
class SOAP_CMAC _ns1__DownloadObjects
{
public:
	int sessionId;	/* required element of type xsd:int */
	char *clsName;	/* optional element of type xsd:string */
	ns1__ArrayOfInt *idarr;	/* optional element of type ns1:ArrayOfInt */
	unsigned int serialize;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique type id SOAP_TYPE__ns1__DownloadObjects */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DownloadObjects() { _ns1__DownloadObjects::soap_default(NULL); }
	virtual ~_ns1__DownloadObjects() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DownloadObjectsResponse
#define SOAP_TYPE__ns1__DownloadObjectsResponse (23)
/* ns1:DownloadObjectsResponse */
class SOAP_CMAC _ns1__DownloadObjectsResponse
{
public:
	xsd__base64Binary *DownloadObjectsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique type id SOAP_TYPE__ns1__DownloadObjectsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DownloadObjectsResponse() { _ns1__DownloadObjectsResponse::soap_default(NULL); }
	virtual ~_ns1__DownloadObjectsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetObjectsVersion
#define SOAP_TYPE__ns1__GetObjectsVersion (24)
/* ns1:GetObjectsVersion */
class SOAP_CMAC _ns1__GetObjectsVersion
{
public:
	int sessionId;	/* required element of type xsd:int */
	char *clsName;	/* optional element of type xsd:string */
	ns1__ArrayOfInt *idarr;	/* optional element of type ns1:ArrayOfInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique type id SOAP_TYPE__ns1__GetObjectsVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetObjectsVersion() { _ns1__GetObjectsVersion::soap_default(NULL); }
	virtual ~_ns1__GetObjectsVersion() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetObjectsVersionResponse
#define SOAP_TYPE__ns1__GetObjectsVersionResponse (25)
/* ns1:GetObjectsVersionResponse */
class SOAP_CMAC _ns1__GetObjectsVersionResponse
{
public:
	ns1__ArrayOfUnsignedInt *GetObjectsVersionResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfUnsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique type id SOAP_TYPE__ns1__GetObjectsVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetObjectsVersionResponse() { _ns1__GetObjectsVersionResponse::soap_default(NULL); }
	virtual ~_ns1__GetObjectsVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial
#define SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial (26)
/* ns1:GetTowerPartsLabelAndVersionSerial */
class SOAP_CMAC _ns1__GetTowerPartsLabelAndVersionSerial
{
public:
	int sessionId;	/* required element of type xsd:int */
	int towerTypeId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique type id SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetTowerPartsLabelAndVersionSerial() { _ns1__GetTowerPartsLabelAndVersionSerial::soap_default(NULL); }
	virtual ~_ns1__GetTowerPartsLabelAndVersionSerial() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse
#define SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse (27)
/* ns1:GetTowerPartsLabelAndVersionSerialResponse */
class SOAP_CMAC _ns1__GetTowerPartsLabelAndVersionSerialResponse
{
public:
	xsd__base64Binary *GetTowerPartsLabelAndVersionSerialResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique type id SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetTowerPartsLabelAndVersionSerialResponse() { _ns1__GetTowerPartsLabelAndVersionSerialResponse::soap_default(NULL); }
	virtual ~_ns1__GetTowerPartsLabelAndVersionSerialResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MatchTowerParts
#define SOAP_TYPE__ns1__MatchTowerParts (28)
/* ns1:MatchTowerParts */
class SOAP_CMAC _ns1__MatchTowerParts
{
public:
	int sessionId;	/* required element of type xsd:int */
	char *xmlformat;	/* optional element of type xsd:string */
	xsd__base64Binary *byteArr;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique type id SOAP_TYPE__ns1__MatchTowerParts */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MatchTowerParts() { _ns1__MatchTowerParts::soap_default(NULL); }
	virtual ~_ns1__MatchTowerParts() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MatchTowerPartsResponse
#define SOAP_TYPE__ns1__MatchTowerPartsResponse (29)
/* ns1:MatchTowerPartsResponse */
class SOAP_CMAC _ns1__MatchTowerPartsResponse
{
public:
	char *MatchTowerPartsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique type id SOAP_TYPE__ns1__MatchTowerPartsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MatchTowerPartsResponse() { _ns1__MatchTowerPartsResponse::soap_default(NULL); }
	virtual ~_ns1__MatchTowerPartsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SaveOrUpdateObjects
#define SOAP_TYPE__ns1__SaveOrUpdateObjects (30)
/* ns1:SaveOrUpdateObjects */
class SOAP_CMAC _ns1__SaveOrUpdateObjects
{
public:
	int sessionId;	/* required element of type xsd:int */
	char *clsName;	/* optional element of type xsd:string */
	char *xmlformat;	/* optional element of type xsd:string */
	xsd__base64Binary *byteArr;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique type id SOAP_TYPE__ns1__SaveOrUpdateObjects */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SaveOrUpdateObjects() { _ns1__SaveOrUpdateObjects::soap_default(NULL); }
	virtual ~_ns1__SaveOrUpdateObjects() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse
#define SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse (31)
/* ns1:SaveOrUpdateObjectsResponse */
class SOAP_CMAC _ns1__SaveOrUpdateObjectsResponse
{
public:
	char *SaveOrUpdateObjectsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique type id SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SaveOrUpdateObjectsResponse() { _ns1__SaveOrUpdateObjectsResponse::soap_default(NULL); }
	virtual ~_ns1__SaveOrUpdateObjectsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteObject
#define SOAP_TYPE__ns1__DeleteObject (32)
/* ns1:DeleteObject */
class SOAP_CMAC _ns1__DeleteObject
{
public:
	int sessionId;	/* required element of type xsd:int */
	char *clsName;	/* optional element of type xsd:string */
	int objId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique type id SOAP_TYPE__ns1__DeleteObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteObject() { _ns1__DeleteObject::soap_default(NULL); }
	virtual ~_ns1__DeleteObject() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteObjectResponse
#define SOAP_TYPE__ns1__DeleteObjectResponse (33)
/* ns1:DeleteObjectResponse */
class SOAP_CMAC _ns1__DeleteObjectResponse
{
public:
	bool DeleteObjectResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique type id SOAP_TYPE__ns1__DeleteObjectResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteObjectResponse() { _ns1__DeleteObjectResponse::soap_default(NULL); }
	virtual ~_ns1__DeleteObjectResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DownloadFileById
#define SOAP_TYPE__ns1__DownloadFileById (34)
/* ns1:DownloadFileById */
class SOAP_CMAC _ns1__DownloadFileById
{
public:
	int sessionId;	/* required element of type xsd:int */
	char *clsName;	/* optional element of type xsd:string */
	int fileId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique type id SOAP_TYPE__ns1__DownloadFileById */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DownloadFileById() { _ns1__DownloadFileById::soap_default(NULL); }
	virtual ~_ns1__DownloadFileById() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DownloadFileByIdResponse
#define SOAP_TYPE__ns1__DownloadFileByIdResponse (35)
/* ns1:DownloadFileByIdResponse */
class SOAP_CMAC _ns1__DownloadFileByIdResponse
{
public:
	xsd__base64Binary *DownloadFileByIdResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique type id SOAP_TYPE__ns1__DownloadFileByIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DownloadFileByIdResponse() { _ns1__DownloadFileByIdResponse::soap_default(NULL); }
	virtual ~_ns1__DownloadFileByIdResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UploadFileObject
#define SOAP_TYPE__ns1__UploadFileObject (36)
/* ns1:UploadFileObject */
class SOAP_CMAC _ns1__UploadFileObject
{
public:
	int sessionId;	/* required element of type xsd:int */
	int idFileObj;	/* required element of type xsd:int */
	int startposition;	/* required element of type xsd:int */
	xsd__base64Binary *byteArr;	/* optional element of type xsd:base64Binary */
	bool compressed;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique type id SOAP_TYPE__ns1__UploadFileObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UploadFileObject() { _ns1__UploadFileObject::soap_default(NULL); }
	virtual ~_ns1__UploadFileObject() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UploadFileObjectResponse
#define SOAP_TYPE__ns1__UploadFileObjectResponse (37)
/* ns1:UploadFileObjectResponse */
class SOAP_CMAC _ns1__UploadFileObjectResponse
{
public:
	bool UploadFileObjectResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique type id SOAP_TYPE__ns1__UploadFileObjectResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UploadFileObjectResponse() { _ns1__UploadFileObjectResponse::soap_default(NULL); }
	virtual ~_ns1__UploadFileObjectResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FinalizeFileObjectData
#define SOAP_TYPE__ns1__FinalizeFileObjectData (38)
/* ns1:FinalizeFileObjectData */
class SOAP_CMAC _ns1__FinalizeFileObjectData
{
public:
	int sessionId;	/* required element of type xsd:int */
	int idFileObj;	/* required element of type xsd:int */
	int file_USCORElength;	/* required element of type xsd:int */
	bool isOverriteFile;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique type id SOAP_TYPE__ns1__FinalizeFileObjectData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FinalizeFileObjectData() { _ns1__FinalizeFileObjectData::soap_default(NULL); }
	virtual ~_ns1__FinalizeFileObjectData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FinalizeFileObjectDataResponse
#define SOAP_TYPE__ns1__FinalizeFileObjectDataResponse (39)
/* ns1:FinalizeFileObjectDataResponse */
class SOAP_CMAC _ns1__FinalizeFileObjectDataResponse
{
public:
	char *FinalizeFileObjectDataResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique type id SOAP_TYPE__ns1__FinalizeFileObjectDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FinalizeFileObjectDataResponse() { _ns1__FinalizeFileObjectDataResponse::soap_default(NULL); }
	virtual ~_ns1__FinalizeFileObjectDataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__OpenFileObjectDataProvider
#define SOAP_TYPE__ns1__OpenFileObjectDataProvider (40)
/* ns1:OpenFileObjectDataProvider */
class SOAP_CMAC _ns1__OpenFileObjectDataProvider
{
public:
	int sessionId;	/* required element of type xsd:int */
	int idFileObj;	/* required element of type xsd:int */
	bool compressed;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique type id SOAP_TYPE__ns1__OpenFileObjectDataProvider */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__OpenFileObjectDataProvider() { _ns1__OpenFileObjectDataProvider::soap_default(NULL); }
	virtual ~_ns1__OpenFileObjectDataProvider() { }
};
#endif

#ifndef SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse
#define SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse (41)
/* ns1:OpenFileObjectDataProviderResponse */
class SOAP_CMAC _ns1__OpenFileObjectDataProviderResponse
{
public:
	unsigned int OpenFileObjectDataProviderResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique type id SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__OpenFileObjectDataProviderResponse() { _ns1__OpenFileObjectDataProviderResponse::soap_default(NULL); }
	virtual ~_ns1__OpenFileObjectDataProviderResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__OpenTapModelDataProvider
#define SOAP_TYPE__ns1__OpenTapModelDataProvider (42)
/* ns1:OpenTapModelDataProvider */
class SOAP_CMAC _ns1__OpenTapModelDataProvider
{
public:
	int sessionId;	/* required element of type xsd:int */
	int idTowerType;	/* required element of type xsd:int */
	bool compressed;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique type id SOAP_TYPE__ns1__OpenTapModelDataProvider */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__OpenTapModelDataProvider() { _ns1__OpenTapModelDataProvider::soap_default(NULL); }
	virtual ~_ns1__OpenTapModelDataProvider() { }
};
#endif

#ifndef SOAP_TYPE__ns1__OpenTapModelDataProviderResponse
#define SOAP_TYPE__ns1__OpenTapModelDataProviderResponse (43)
/* ns1:OpenTapModelDataProviderResponse */
class SOAP_CMAC _ns1__OpenTapModelDataProviderResponse
{
public:
	char *OpenTapModelDataProviderResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique type id SOAP_TYPE__ns1__OpenTapModelDataProviderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__OpenTapModelDataProviderResponse() { _ns1__OpenTapModelDataProviderResponse::soap_default(NULL); }
	virtual ~_ns1__OpenTapModelDataProviderResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__OpenServerObjectDataProvider
#define SOAP_TYPE__ns1__OpenServerObjectDataProvider (44)
/* ns1:OpenServerObjectDataProvider */
class SOAP_CMAC _ns1__OpenServerObjectDataProvider
{
public:
	int sessionId;	/* required element of type xsd:int */
	int idObject;	/* required element of type xsd:int */
	char *cls_USCOREname;	/* optional element of type xsd:string */
	bool compressed;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique type id SOAP_TYPE__ns1__OpenServerObjectDataProvider */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__OpenServerObjectDataProvider() { _ns1__OpenServerObjectDataProvider::soap_default(NULL); }
	virtual ~_ns1__OpenServerObjectDataProvider() { }
};
#endif

#ifndef SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse
#define SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse (45)
/* ns1:OpenServerObjectDataProviderResponse */
class SOAP_CMAC _ns1__OpenServerObjectDataProviderResponse
{
public:
	char *OpenServerObjectDataProviderResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique type id SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__OpenServerObjectDataProviderResponse() { _ns1__OpenServerObjectDataProviderResponse::soap_default(NULL); }
	virtual ~_ns1__OpenServerObjectDataProviderResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DownloadFileObject
#define SOAP_TYPE__ns1__DownloadFileObject (46)
/* ns1:DownloadFileObject */
class SOAP_CMAC _ns1__DownloadFileObject
{
public:
	int sessionId;	/* required element of type xsd:int */
	int idFileObj;	/* required element of type xsd:int */
	int startposition;	/* required element of type xsd:int */
	int download_USCOREsize;	/* required element of type xsd:int */
	bool compressed;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique type id SOAP_TYPE__ns1__DownloadFileObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DownloadFileObject() { _ns1__DownloadFileObject::soap_default(NULL); }
	virtual ~_ns1__DownloadFileObject() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DownloadFileObjectResponse
#define SOAP_TYPE__ns1__DownloadFileObjectResponse (47)
/* ns1:DownloadFileObjectResponse */
class SOAP_CMAC _ns1__DownloadFileObjectResponse
{
public:
	xsd__base64Binary *DownloadFileObjectResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique type id SOAP_TYPE__ns1__DownloadFileObjectResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DownloadFileObjectResponse() { _ns1__DownloadFileObjectResponse::soap_default(NULL); }
	virtual ~_ns1__DownloadFileObjectResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CloseFileObjectDataProvider
#define SOAP_TYPE__ns1__CloseFileObjectDataProvider (48)
/* ns1:CloseFileObjectDataProvider */
class SOAP_CMAC _ns1__CloseFileObjectDataProvider
{
public:
	int sessionId;	/* required element of type xsd:int */
	int idFileObj;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique type id SOAP_TYPE__ns1__CloseFileObjectDataProvider */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CloseFileObjectDataProvider() { _ns1__CloseFileObjectDataProvider::soap_default(NULL); }
	virtual ~_ns1__CloseFileObjectDataProvider() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse
#define SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse (49)
/* ns1:CloseFileObjectDataProviderResponse */
class SOAP_CMAC _ns1__CloseFileObjectDataProviderResponse
{
public:
	bool CloseFileObjectDataProviderResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique type id SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CloseFileObjectDataProviderResponse() { _ns1__CloseFileObjectDataProviderResponse::soap_default(NULL); }
	virtual ~_ns1__CloseFileObjectDataProviderResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__loginUser
#define SOAP_TYPE___ns1__loginUser (59)
/* Operation wrapper: */
struct __ns1__loginUser
{
public:
	_ns1__loginUser *ns1__loginUser;	/* optional element of type ns1:loginUser */
public:
	int soap_type() const { return 59; } /* = unique type id SOAP_TYPE___ns1__loginUser */
};
#endif

#ifndef SOAP_TYPE___ns1__loginUserByByteArr
#define SOAP_TYPE___ns1__loginUserByByteArr (63)
/* Operation wrapper: */
struct __ns1__loginUserByByteArr
{
public:
	_ns1__loginUserByByteArr *ns1__loginUserByByteArr;	/* optional element of type ns1:loginUserByByteArr */
public:
	int soap_type() const { return 63; } /* = unique type id SOAP_TYPE___ns1__loginUserByByteArr */
};
#endif

#ifndef SOAP_TYPE___ns1__logoutUser
#define SOAP_TYPE___ns1__logoutUser (67)
/* Operation wrapper: */
struct __ns1__logoutUser
{
public:
	_ns1__logoutUser *ns1__logoutUser;	/* optional element of type ns1:logoutUser */
public:
	int soap_type() const { return 67; } /* = unique type id SOAP_TYPE___ns1__logoutUser */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryObjects
#define SOAP_TYPE___ns1__QueryObjects (71)
/* Operation wrapper: */
struct __ns1__QueryObjects
{
public:
	_ns1__QueryObjects *ns1__QueryObjects;	/* optional element of type ns1:QueryObjects */
public:
	int soap_type() const { return 71; } /* = unique type id SOAP_TYPE___ns1__QueryObjects */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadObjects
#define SOAP_TYPE___ns1__DownloadObjects (75)
/* Operation wrapper: */
struct __ns1__DownloadObjects
{
public:
	_ns1__DownloadObjects *ns1__DownloadObjects;	/* optional element of type ns1:DownloadObjects */
public:
	int soap_type() const { return 75; } /* = unique type id SOAP_TYPE___ns1__DownloadObjects */
};
#endif

#ifndef SOAP_TYPE___ns1__GetObjectsVersion
#define SOAP_TYPE___ns1__GetObjectsVersion (79)
/* Operation wrapper: */
struct __ns1__GetObjectsVersion
{
public:
	_ns1__GetObjectsVersion *ns1__GetObjectsVersion;	/* optional element of type ns1:GetObjectsVersion */
public:
	int soap_type() const { return 79; } /* = unique type id SOAP_TYPE___ns1__GetObjectsVersion */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial
#define SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial (83)
/* Operation wrapper: */
struct __ns1__GetTowerPartsLabelAndVersionSerial
{
public:
	_ns1__GetTowerPartsLabelAndVersionSerial *ns1__GetTowerPartsLabelAndVersionSerial;	/* optional element of type ns1:GetTowerPartsLabelAndVersionSerial */
public:
	int soap_type() const { return 83; } /* = unique type id SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial */
};
#endif

#ifndef SOAP_TYPE___ns1__MatchTowerParts
#define SOAP_TYPE___ns1__MatchTowerParts (87)
/* Operation wrapper: */
struct __ns1__MatchTowerParts
{
public:
	_ns1__MatchTowerParts *ns1__MatchTowerParts;	/* optional element of type ns1:MatchTowerParts */
public:
	int soap_type() const { return 87; } /* = unique type id SOAP_TYPE___ns1__MatchTowerParts */
};
#endif

#ifndef SOAP_TYPE___ns1__SaveOrUpdateObjects
#define SOAP_TYPE___ns1__SaveOrUpdateObjects (91)
/* Operation wrapper: */
struct __ns1__SaveOrUpdateObjects
{
public:
	_ns1__SaveOrUpdateObjects *ns1__SaveOrUpdateObjects;	/* optional element of type ns1:SaveOrUpdateObjects */
public:
	int soap_type() const { return 91; } /* = unique type id SOAP_TYPE___ns1__SaveOrUpdateObjects */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteObject
#define SOAP_TYPE___ns1__DeleteObject (95)
/* Operation wrapper: */
struct __ns1__DeleteObject
{
public:
	_ns1__DeleteObject *ns1__DeleteObject;	/* optional element of type ns1:DeleteObject */
public:
	int soap_type() const { return 95; } /* = unique type id SOAP_TYPE___ns1__DeleteObject */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileById
#define SOAP_TYPE___ns1__DownloadFileById (99)
/* Operation wrapper: */
struct __ns1__DownloadFileById
{
public:
	_ns1__DownloadFileById *ns1__DownloadFileById;	/* optional element of type ns1:DownloadFileById */
public:
	int soap_type() const { return 99; } /* = unique type id SOAP_TYPE___ns1__DownloadFileById */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadFileObject
#define SOAP_TYPE___ns1__UploadFileObject (103)
/* Operation wrapper: */
struct __ns1__UploadFileObject
{
public:
	_ns1__UploadFileObject *ns1__UploadFileObject;	/* optional element of type ns1:UploadFileObject */
public:
	int soap_type() const { return 103; } /* = unique type id SOAP_TYPE___ns1__UploadFileObject */
};
#endif

#ifndef SOAP_TYPE___ns1__FinalizeFileObjectData
#define SOAP_TYPE___ns1__FinalizeFileObjectData (107)
/* Operation wrapper: */
struct __ns1__FinalizeFileObjectData
{
public:
	_ns1__FinalizeFileObjectData *ns1__FinalizeFileObjectData;	/* optional element of type ns1:FinalizeFileObjectData */
public:
	int soap_type() const { return 107; } /* = unique type id SOAP_TYPE___ns1__FinalizeFileObjectData */
};
#endif

#ifndef SOAP_TYPE___ns1__OpenFileObjectDataProvider
#define SOAP_TYPE___ns1__OpenFileObjectDataProvider (111)
/* Operation wrapper: */
struct __ns1__OpenFileObjectDataProvider
{
public:
	_ns1__OpenFileObjectDataProvider *ns1__OpenFileObjectDataProvider;	/* optional element of type ns1:OpenFileObjectDataProvider */
public:
	int soap_type() const { return 111; } /* = unique type id SOAP_TYPE___ns1__OpenFileObjectDataProvider */
};
#endif

#ifndef SOAP_TYPE___ns1__OpenTapModelDataProvider
#define SOAP_TYPE___ns1__OpenTapModelDataProvider (115)
/* Operation wrapper: */
struct __ns1__OpenTapModelDataProvider
{
public:
	_ns1__OpenTapModelDataProvider *ns1__OpenTapModelDataProvider;	/* optional element of type ns1:OpenTapModelDataProvider */
public:
	int soap_type() const { return 115; } /* = unique type id SOAP_TYPE___ns1__OpenTapModelDataProvider */
};
#endif

#ifndef SOAP_TYPE___ns1__OpenServerObjectDataProvider
#define SOAP_TYPE___ns1__OpenServerObjectDataProvider (119)
/* Operation wrapper: */
struct __ns1__OpenServerObjectDataProvider
{
public:
	_ns1__OpenServerObjectDataProvider *ns1__OpenServerObjectDataProvider;	/* optional element of type ns1:OpenServerObjectDataProvider */
public:
	int soap_type() const { return 119; } /* = unique type id SOAP_TYPE___ns1__OpenServerObjectDataProvider */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileObject
#define SOAP_TYPE___ns1__DownloadFileObject (123)
/* Operation wrapper: */
struct __ns1__DownloadFileObject
{
public:
	_ns1__DownloadFileObject *ns1__DownloadFileObject;	/* optional element of type ns1:DownloadFileObject */
public:
	int soap_type() const { return 123; } /* = unique type id SOAP_TYPE___ns1__DownloadFileObject */
};
#endif

#ifndef SOAP_TYPE___ns1__CloseFileObjectDataProvider
#define SOAP_TYPE___ns1__CloseFileObjectDataProvider (127)
/* Operation wrapper: */
struct __ns1__CloseFileObjectDataProvider
{
public:
	_ns1__CloseFileObjectDataProvider *ns1__CloseFileObjectDataProvider;	/* optional element of type ns1:CloseFileObjectDataProvider */
public:
	int soap_type() const { return 127; } /* = unique type id SOAP_TYPE___ns1__CloseFileObjectDataProvider */
};
#endif

#ifndef SOAP_TYPE___ns1__loginUser_
#define SOAP_TYPE___ns1__loginUser_ (129)
/* Operation wrapper: */
struct __ns1__loginUser_
{
public:
	_ns1__loginUser *ns1__loginUser;	/* optional element of type ns1:loginUser */
public:
	int soap_type() const { return 129; } /* = unique type id SOAP_TYPE___ns1__loginUser_ */
};
#endif

#ifndef SOAP_TYPE___ns1__loginUserByByteArr_
#define SOAP_TYPE___ns1__loginUserByByteArr_ (131)
/* Operation wrapper: */
struct __ns1__loginUserByByteArr_
{
public:
	_ns1__loginUserByByteArr *ns1__loginUserByByteArr;	/* optional element of type ns1:loginUserByByteArr */
public:
	int soap_type() const { return 131; } /* = unique type id SOAP_TYPE___ns1__loginUserByByteArr_ */
};
#endif

#ifndef SOAP_TYPE___ns1__logoutUser_
#define SOAP_TYPE___ns1__logoutUser_ (133)
/* Operation wrapper: */
struct __ns1__logoutUser_
{
public:
	_ns1__logoutUser *ns1__logoutUser;	/* optional element of type ns1:logoutUser */
public:
	int soap_type() const { return 133; } /* = unique type id SOAP_TYPE___ns1__logoutUser_ */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryObjects_
#define SOAP_TYPE___ns1__QueryObjects_ (135)
/* Operation wrapper: */
struct __ns1__QueryObjects_
{
public:
	_ns1__QueryObjects *ns1__QueryObjects;	/* optional element of type ns1:QueryObjects */
public:
	int soap_type() const { return 135; } /* = unique type id SOAP_TYPE___ns1__QueryObjects_ */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadObjects_
#define SOAP_TYPE___ns1__DownloadObjects_ (137)
/* Operation wrapper: */
struct __ns1__DownloadObjects_
{
public:
	_ns1__DownloadObjects *ns1__DownloadObjects;	/* optional element of type ns1:DownloadObjects */
public:
	int soap_type() const { return 137; } /* = unique type id SOAP_TYPE___ns1__DownloadObjects_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetObjectsVersion_
#define SOAP_TYPE___ns1__GetObjectsVersion_ (139)
/* Operation wrapper: */
struct __ns1__GetObjectsVersion_
{
public:
	_ns1__GetObjectsVersion *ns1__GetObjectsVersion;	/* optional element of type ns1:GetObjectsVersion */
public:
	int soap_type() const { return 139; } /* = unique type id SOAP_TYPE___ns1__GetObjectsVersion_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial_
#define SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial_ (141)
/* Operation wrapper: */
struct __ns1__GetTowerPartsLabelAndVersionSerial_
{
public:
	_ns1__GetTowerPartsLabelAndVersionSerial *ns1__GetTowerPartsLabelAndVersionSerial;	/* optional element of type ns1:GetTowerPartsLabelAndVersionSerial */
public:
	int soap_type() const { return 141; } /* = unique type id SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial_ */
};
#endif

#ifndef SOAP_TYPE___ns1__MatchTowerParts_
#define SOAP_TYPE___ns1__MatchTowerParts_ (143)
/* Operation wrapper: */
struct __ns1__MatchTowerParts_
{
public:
	_ns1__MatchTowerParts *ns1__MatchTowerParts;	/* optional element of type ns1:MatchTowerParts */
public:
	int soap_type() const { return 143; } /* = unique type id SOAP_TYPE___ns1__MatchTowerParts_ */
};
#endif

#ifndef SOAP_TYPE___ns1__SaveOrUpdateObjects_
#define SOAP_TYPE___ns1__SaveOrUpdateObjects_ (145)
/* Operation wrapper: */
struct __ns1__SaveOrUpdateObjects_
{
public:
	_ns1__SaveOrUpdateObjects *ns1__SaveOrUpdateObjects;	/* optional element of type ns1:SaveOrUpdateObjects */
public:
	int soap_type() const { return 145; } /* = unique type id SOAP_TYPE___ns1__SaveOrUpdateObjects_ */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteObject_
#define SOAP_TYPE___ns1__DeleteObject_ (147)
/* Operation wrapper: */
struct __ns1__DeleteObject_
{
public:
	_ns1__DeleteObject *ns1__DeleteObject;	/* optional element of type ns1:DeleteObject */
public:
	int soap_type() const { return 147; } /* = unique type id SOAP_TYPE___ns1__DeleteObject_ */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileById_
#define SOAP_TYPE___ns1__DownloadFileById_ (149)
/* Operation wrapper: */
struct __ns1__DownloadFileById_
{
public:
	_ns1__DownloadFileById *ns1__DownloadFileById;	/* optional element of type ns1:DownloadFileById */
public:
	int soap_type() const { return 149; } /* = unique type id SOAP_TYPE___ns1__DownloadFileById_ */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadFileObject_
#define SOAP_TYPE___ns1__UploadFileObject_ (151)
/* Operation wrapper: */
struct __ns1__UploadFileObject_
{
public:
	_ns1__UploadFileObject *ns1__UploadFileObject;	/* optional element of type ns1:UploadFileObject */
public:
	int soap_type() const { return 151; } /* = unique type id SOAP_TYPE___ns1__UploadFileObject_ */
};
#endif

#ifndef SOAP_TYPE___ns1__FinalizeFileObjectData_
#define SOAP_TYPE___ns1__FinalizeFileObjectData_ (153)
/* Operation wrapper: */
struct __ns1__FinalizeFileObjectData_
{
public:
	_ns1__FinalizeFileObjectData *ns1__FinalizeFileObjectData;	/* optional element of type ns1:FinalizeFileObjectData */
public:
	int soap_type() const { return 153; } /* = unique type id SOAP_TYPE___ns1__FinalizeFileObjectData_ */
};
#endif

#ifndef SOAP_TYPE___ns1__OpenFileObjectDataProvider_
#define SOAP_TYPE___ns1__OpenFileObjectDataProvider_ (155)
/* Operation wrapper: */
struct __ns1__OpenFileObjectDataProvider_
{
public:
	_ns1__OpenFileObjectDataProvider *ns1__OpenFileObjectDataProvider;	/* optional element of type ns1:OpenFileObjectDataProvider */
public:
	int soap_type() const { return 155; } /* = unique type id SOAP_TYPE___ns1__OpenFileObjectDataProvider_ */
};
#endif

#ifndef SOAP_TYPE___ns1__OpenTapModelDataProvider_
#define SOAP_TYPE___ns1__OpenTapModelDataProvider_ (157)
/* Operation wrapper: */
struct __ns1__OpenTapModelDataProvider_
{
public:
	_ns1__OpenTapModelDataProvider *ns1__OpenTapModelDataProvider;	/* optional element of type ns1:OpenTapModelDataProvider */
public:
	int soap_type() const { return 157; } /* = unique type id SOAP_TYPE___ns1__OpenTapModelDataProvider_ */
};
#endif

#ifndef SOAP_TYPE___ns1__OpenServerObjectDataProvider_
#define SOAP_TYPE___ns1__OpenServerObjectDataProvider_ (159)
/* Operation wrapper: */
struct __ns1__OpenServerObjectDataProvider_
{
public:
	_ns1__OpenServerObjectDataProvider *ns1__OpenServerObjectDataProvider;	/* optional element of type ns1:OpenServerObjectDataProvider */
public:
	int soap_type() const { return 159; } /* = unique type id SOAP_TYPE___ns1__OpenServerObjectDataProvider_ */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileObject_
#define SOAP_TYPE___ns1__DownloadFileObject_ (161)
/* Operation wrapper: */
struct __ns1__DownloadFileObject_
{
public:
	_ns1__DownloadFileObject *ns1__DownloadFileObject;	/* optional element of type ns1:DownloadFileObject */
public:
	int soap_type() const { return 161; } /* = unique type id SOAP_TYPE___ns1__DownloadFileObject_ */
};
#endif

#ifndef SOAP_TYPE___ns1__CloseFileObjectDataProvider_
#define SOAP_TYPE___ns1__CloseFileObjectDataProvider_ (163)
/* Operation wrapper: */
struct __ns1__CloseFileObjectDataProvider_
{
public:
	_ns1__CloseFileObjectDataProvider *ns1__CloseFileObjectDataProvider;	/* optional element of type ns1:CloseFileObjectDataProvider */
public:
	int soap_type() const { return 163; } /* = unique type id SOAP_TYPE___ns1__CloseFileObjectDataProvider_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (164)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 164; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (165)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 165; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (167)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 167; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (170)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 170; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (171)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 171; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
