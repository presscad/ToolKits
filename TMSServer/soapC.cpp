/* soapC.cpp
   Generated by gSOAP 2.8.19 from d:\Structure\TMSServTemp\TmsServer.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.19 2018-02-03 03:47:21 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__ArrayOfUnsignedInt:
		return soap_in_ns1__ArrayOfUnsignedInt(soap, NULL, NULL, "ns1:ArrayOfUnsignedInt");
	case SOAP_TYPE_ns1__ArrayOfInt:
		return soap_in_ns1__ArrayOfInt(soap, NULL, NULL, "ns1:ArrayOfInt");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__CloseFileObjectDataProvider:
		return soap_in_PointerTo_ns1__CloseFileObjectDataProvider(soap, NULL, NULL, "ns1:CloseFileObjectDataProvider");
	case SOAP_TYPE_PointerTo_ns1__DownloadFileObject:
		return soap_in_PointerTo_ns1__DownloadFileObject(soap, NULL, NULL, "ns1:DownloadFileObject");
	case SOAP_TYPE_PointerTo_ns1__OpenServerObjectDataProvider:
		return soap_in_PointerTo_ns1__OpenServerObjectDataProvider(soap, NULL, NULL, "ns1:OpenServerObjectDataProvider");
	case SOAP_TYPE_PointerTo_ns1__OpenTapModelDataProvider:
		return soap_in_PointerTo_ns1__OpenTapModelDataProvider(soap, NULL, NULL, "ns1:OpenTapModelDataProvider");
	case SOAP_TYPE_PointerTo_ns1__OpenFileObjectDataProvider:
		return soap_in_PointerTo_ns1__OpenFileObjectDataProvider(soap, NULL, NULL, "ns1:OpenFileObjectDataProvider");
	case SOAP_TYPE_PointerTo_ns1__FinalizeFileObjectData:
		return soap_in_PointerTo_ns1__FinalizeFileObjectData(soap, NULL, NULL, "ns1:FinalizeFileObjectData");
	case SOAP_TYPE_PointerTo_ns1__UploadFileObject:
		return soap_in_PointerTo_ns1__UploadFileObject(soap, NULL, NULL, "ns1:UploadFileObject");
	case SOAP_TYPE_PointerTo_ns1__DownloadFileById:
		return soap_in_PointerTo_ns1__DownloadFileById(soap, NULL, NULL, "ns1:DownloadFileById");
	case SOAP_TYPE_PointerTo_ns1__DeleteObject:
		return soap_in_PointerTo_ns1__DeleteObject(soap, NULL, NULL, "ns1:DeleteObject");
	case SOAP_TYPE_PointerTo_ns1__SaveOrUpdateObjects:
		return soap_in_PointerTo_ns1__SaveOrUpdateObjects(soap, NULL, NULL, "ns1:SaveOrUpdateObjects");
	case SOAP_TYPE_PointerTo_ns1__MatchTowerParts:
		return soap_in_PointerTo_ns1__MatchTowerParts(soap, NULL, NULL, "ns1:MatchTowerParts");
	case SOAP_TYPE_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial:
		return soap_in_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, NULL, NULL, "ns1:GetTowerPartsLabelAndVersionSerial");
	case SOAP_TYPE_PointerTo_ns1__GetObjectsVersion:
		return soap_in_PointerTo_ns1__GetObjectsVersion(soap, NULL, NULL, "ns1:GetObjectsVersion");
	case SOAP_TYPE_PointerTo_ns1__DownloadObjects:
		return soap_in_PointerTo_ns1__DownloadObjects(soap, NULL, NULL, "ns1:DownloadObjects");
	case SOAP_TYPE_PointerTo_ns1__QueryObjects:
		return soap_in_PointerTo_ns1__QueryObjects(soap, NULL, NULL, "ns1:QueryObjects");
	case SOAP_TYPE_PointerTo_ns1__logoutUser:
		return soap_in_PointerTo_ns1__logoutUser(soap, NULL, NULL, "ns1:logoutUser");
	case SOAP_TYPE_PointerTo_ns1__loginUserByByteArr:
		return soap_in_PointerTo_ns1__loginUserByByteArr(soap, NULL, NULL, "ns1:loginUserByByteArr");
	case SOAP_TYPE_PointerTo_ns1__loginUser:
		return soap_in_PointerTo_ns1__loginUser(soap, NULL, NULL, "ns1:loginUser");
	case SOAP_TYPE_PointerTons1__ArrayOfUnsignedInt:
		return soap_in_PointerTons1__ArrayOfUnsignedInt(soap, NULL, NULL, "ns1:ArrayOfUnsignedInt");
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		return soap_in_PointerTons1__ArrayOfInt(soap, NULL, NULL, "ns1:ArrayOfInt");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_in_PointerTounsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ArrayOfUnsignedInt"))
		{	*type = SOAP_TYPE_ns1__ArrayOfUnsignedInt;
			return soap_in_ns1__ArrayOfUnsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfInt"))
		{	*type = SOAP_TYPE_ns1__ArrayOfInt;
			return soap_in_ns1__ArrayOfInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:CloseFileObjectDataProviderResponse"))
		{	*type = SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse;
			return soap_in__ns1__CloseFileObjectDataProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseFileObjectDataProvider"))
		{	*type = SOAP_TYPE__ns1__CloseFileObjectDataProvider;
			return soap_in__ns1__CloseFileObjectDataProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadFileObjectResponse"))
		{	*type = SOAP_TYPE__ns1__DownloadFileObjectResponse;
			return soap_in__ns1__DownloadFileObjectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadFileObject"))
		{	*type = SOAP_TYPE__ns1__DownloadFileObject;
			return soap_in__ns1__DownloadFileObject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenServerObjectDataProviderResponse"))
		{	*type = SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse;
			return soap_in__ns1__OpenServerObjectDataProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenServerObjectDataProvider"))
		{	*type = SOAP_TYPE__ns1__OpenServerObjectDataProvider;
			return soap_in__ns1__OpenServerObjectDataProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenTapModelDataProviderResponse"))
		{	*type = SOAP_TYPE__ns1__OpenTapModelDataProviderResponse;
			return soap_in__ns1__OpenTapModelDataProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenTapModelDataProvider"))
		{	*type = SOAP_TYPE__ns1__OpenTapModelDataProvider;
			return soap_in__ns1__OpenTapModelDataProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenFileObjectDataProviderResponse"))
		{	*type = SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse;
			return soap_in__ns1__OpenFileObjectDataProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenFileObjectDataProvider"))
		{	*type = SOAP_TYPE__ns1__OpenFileObjectDataProvider;
			return soap_in__ns1__OpenFileObjectDataProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:FinalizeFileObjectDataResponse"))
		{	*type = SOAP_TYPE__ns1__FinalizeFileObjectDataResponse;
			return soap_in__ns1__FinalizeFileObjectDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:FinalizeFileObjectData"))
		{	*type = SOAP_TYPE__ns1__FinalizeFileObjectData;
			return soap_in__ns1__FinalizeFileObjectData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadFileObjectResponse"))
		{	*type = SOAP_TYPE__ns1__UploadFileObjectResponse;
			return soap_in__ns1__UploadFileObjectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadFileObject"))
		{	*type = SOAP_TYPE__ns1__UploadFileObject;
			return soap_in__ns1__UploadFileObject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadFileByIdResponse"))
		{	*type = SOAP_TYPE__ns1__DownloadFileByIdResponse;
			return soap_in__ns1__DownloadFileByIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadFileById"))
		{	*type = SOAP_TYPE__ns1__DownloadFileById;
			return soap_in__ns1__DownloadFileById(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeleteObjectResponse"))
		{	*type = SOAP_TYPE__ns1__DeleteObjectResponse;
			return soap_in__ns1__DeleteObjectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeleteObject"))
		{	*type = SOAP_TYPE__ns1__DeleteObject;
			return soap_in__ns1__DeleteObject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SaveOrUpdateObjectsResponse"))
		{	*type = SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse;
			return soap_in__ns1__SaveOrUpdateObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SaveOrUpdateObjects"))
		{	*type = SOAP_TYPE__ns1__SaveOrUpdateObjects;
			return soap_in__ns1__SaveOrUpdateObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MatchTowerPartsResponse"))
		{	*type = SOAP_TYPE__ns1__MatchTowerPartsResponse;
			return soap_in__ns1__MatchTowerPartsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MatchTowerParts"))
		{	*type = SOAP_TYPE__ns1__MatchTowerParts;
			return soap_in__ns1__MatchTowerParts(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTowerPartsLabelAndVersionSerialResponse"))
		{	*type = SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse;
			return soap_in__ns1__GetTowerPartsLabelAndVersionSerialResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTowerPartsLabelAndVersionSerial"))
		{	*type = SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial;
			return soap_in__ns1__GetTowerPartsLabelAndVersionSerial(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetObjectsVersionResponse"))
		{	*type = SOAP_TYPE__ns1__GetObjectsVersionResponse;
			return soap_in__ns1__GetObjectsVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetObjectsVersion"))
		{	*type = SOAP_TYPE__ns1__GetObjectsVersion;
			return soap_in__ns1__GetObjectsVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadObjectsResponse"))
		{	*type = SOAP_TYPE__ns1__DownloadObjectsResponse;
			return soap_in__ns1__DownloadObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadObjects"))
		{	*type = SOAP_TYPE__ns1__DownloadObjects;
			return soap_in__ns1__DownloadObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:QueryObjectsResponse"))
		{	*type = SOAP_TYPE__ns1__QueryObjectsResponse;
			return soap_in__ns1__QueryObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:QueryObjects"))
		{	*type = SOAP_TYPE__ns1__QueryObjects;
			return soap_in__ns1__QueryObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:logoutUserResponse"))
		{	*type = SOAP_TYPE__ns1__logoutUserResponse;
			return soap_in__ns1__logoutUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:logoutUser"))
		{	*type = SOAP_TYPE__ns1__logoutUser;
			return soap_in__ns1__logoutUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:loginUserByByteArrResponse"))
		{	*type = SOAP_TYPE__ns1__loginUserByByteArrResponse;
			return soap_in__ns1__loginUserByByteArrResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:loginUserByByteArr"))
		{	*type = SOAP_TYPE__ns1__loginUserByByteArr;
			return soap_in__ns1__loginUserByByteArr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:loginUserResponse"))
		{	*type = SOAP_TYPE__ns1__loginUserResponse;
			return soap_in__ns1__loginUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:loginUser"))
		{	*type = SOAP_TYPE__ns1__loginUser;
			return soap_in__ns1__loginUser(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse:
		return ((_ns1__CloseFileObjectDataProviderResponse *)ptr)->soap_out(soap, "ns1:CloseFileObjectDataProviderResponse", id, NULL);
	case SOAP_TYPE__ns1__CloseFileObjectDataProvider:
		return ((_ns1__CloseFileObjectDataProvider *)ptr)->soap_out(soap, "ns1:CloseFileObjectDataProvider", id, NULL);
	case SOAP_TYPE__ns1__DownloadFileObjectResponse:
		return ((_ns1__DownloadFileObjectResponse *)ptr)->soap_out(soap, "ns1:DownloadFileObjectResponse", id, NULL);
	case SOAP_TYPE__ns1__DownloadFileObject:
		return ((_ns1__DownloadFileObject *)ptr)->soap_out(soap, "ns1:DownloadFileObject", id, NULL);
	case SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse:
		return ((_ns1__OpenServerObjectDataProviderResponse *)ptr)->soap_out(soap, "ns1:OpenServerObjectDataProviderResponse", id, NULL);
	case SOAP_TYPE__ns1__OpenServerObjectDataProvider:
		return ((_ns1__OpenServerObjectDataProvider *)ptr)->soap_out(soap, "ns1:OpenServerObjectDataProvider", id, NULL);
	case SOAP_TYPE__ns1__OpenTapModelDataProviderResponse:
		return ((_ns1__OpenTapModelDataProviderResponse *)ptr)->soap_out(soap, "ns1:OpenTapModelDataProviderResponse", id, NULL);
	case SOAP_TYPE__ns1__OpenTapModelDataProvider:
		return ((_ns1__OpenTapModelDataProvider *)ptr)->soap_out(soap, "ns1:OpenTapModelDataProvider", id, NULL);
	case SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse:
		return ((_ns1__OpenFileObjectDataProviderResponse *)ptr)->soap_out(soap, "ns1:OpenFileObjectDataProviderResponse", id, NULL);
	case SOAP_TYPE__ns1__OpenFileObjectDataProvider:
		return ((_ns1__OpenFileObjectDataProvider *)ptr)->soap_out(soap, "ns1:OpenFileObjectDataProvider", id, NULL);
	case SOAP_TYPE__ns1__FinalizeFileObjectDataResponse:
		return ((_ns1__FinalizeFileObjectDataResponse *)ptr)->soap_out(soap, "ns1:FinalizeFileObjectDataResponse", id, NULL);
	case SOAP_TYPE__ns1__FinalizeFileObjectData:
		return ((_ns1__FinalizeFileObjectData *)ptr)->soap_out(soap, "ns1:FinalizeFileObjectData", id, NULL);
	case SOAP_TYPE__ns1__UploadFileObjectResponse:
		return ((_ns1__UploadFileObjectResponse *)ptr)->soap_out(soap, "ns1:UploadFileObjectResponse", id, NULL);
	case SOAP_TYPE__ns1__UploadFileObject:
		return ((_ns1__UploadFileObject *)ptr)->soap_out(soap, "ns1:UploadFileObject", id, NULL);
	case SOAP_TYPE__ns1__DownloadFileByIdResponse:
		return ((_ns1__DownloadFileByIdResponse *)ptr)->soap_out(soap, "ns1:DownloadFileByIdResponse", id, NULL);
	case SOAP_TYPE__ns1__DownloadFileById:
		return ((_ns1__DownloadFileById *)ptr)->soap_out(soap, "ns1:DownloadFileById", id, NULL);
	case SOAP_TYPE__ns1__DeleteObjectResponse:
		return ((_ns1__DeleteObjectResponse *)ptr)->soap_out(soap, "ns1:DeleteObjectResponse", id, NULL);
	case SOAP_TYPE__ns1__DeleteObject:
		return ((_ns1__DeleteObject *)ptr)->soap_out(soap, "ns1:DeleteObject", id, NULL);
	case SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse:
		return ((_ns1__SaveOrUpdateObjectsResponse *)ptr)->soap_out(soap, "ns1:SaveOrUpdateObjectsResponse", id, NULL);
	case SOAP_TYPE__ns1__SaveOrUpdateObjects:
		return ((_ns1__SaveOrUpdateObjects *)ptr)->soap_out(soap, "ns1:SaveOrUpdateObjects", id, NULL);
	case SOAP_TYPE__ns1__MatchTowerPartsResponse:
		return ((_ns1__MatchTowerPartsResponse *)ptr)->soap_out(soap, "ns1:MatchTowerPartsResponse", id, NULL);
	case SOAP_TYPE__ns1__MatchTowerParts:
		return ((_ns1__MatchTowerParts *)ptr)->soap_out(soap, "ns1:MatchTowerParts", id, NULL);
	case SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse:
		return ((_ns1__GetTowerPartsLabelAndVersionSerialResponse *)ptr)->soap_out(soap, "ns1:GetTowerPartsLabelAndVersionSerialResponse", id, NULL);
	case SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial:
		return ((_ns1__GetTowerPartsLabelAndVersionSerial *)ptr)->soap_out(soap, "ns1:GetTowerPartsLabelAndVersionSerial", id, NULL);
	case SOAP_TYPE__ns1__GetObjectsVersionResponse:
		return ((_ns1__GetObjectsVersionResponse *)ptr)->soap_out(soap, "ns1:GetObjectsVersionResponse", id, NULL);
	case SOAP_TYPE__ns1__GetObjectsVersion:
		return ((_ns1__GetObjectsVersion *)ptr)->soap_out(soap, "ns1:GetObjectsVersion", id, NULL);
	case SOAP_TYPE__ns1__DownloadObjectsResponse:
		return ((_ns1__DownloadObjectsResponse *)ptr)->soap_out(soap, "ns1:DownloadObjectsResponse", id, NULL);
	case SOAP_TYPE__ns1__DownloadObjects:
		return ((_ns1__DownloadObjects *)ptr)->soap_out(soap, "ns1:DownloadObjects", id, NULL);
	case SOAP_TYPE__ns1__QueryObjectsResponse:
		return ((_ns1__QueryObjectsResponse *)ptr)->soap_out(soap, "ns1:QueryObjectsResponse", id, NULL);
	case SOAP_TYPE__ns1__QueryObjects:
		return ((_ns1__QueryObjects *)ptr)->soap_out(soap, "ns1:QueryObjects", id, NULL);
	case SOAP_TYPE__ns1__logoutUserResponse:
		return ((_ns1__logoutUserResponse *)ptr)->soap_out(soap, "ns1:logoutUserResponse", id, NULL);
	case SOAP_TYPE__ns1__logoutUser:
		return ((_ns1__logoutUser *)ptr)->soap_out(soap, "ns1:logoutUser", id, NULL);
	case SOAP_TYPE__ns1__loginUserByByteArrResponse:
		return ((_ns1__loginUserByByteArrResponse *)ptr)->soap_out(soap, "ns1:loginUserByByteArrResponse", id, NULL);
	case SOAP_TYPE__ns1__loginUserByByteArr:
		return ((_ns1__loginUserByByteArr *)ptr)->soap_out(soap, "ns1:loginUserByByteArr", id, NULL);
	case SOAP_TYPE__ns1__loginUserResponse:
		return ((_ns1__loginUserResponse *)ptr)->soap_out(soap, "ns1:loginUserResponse", id, NULL);
	case SOAP_TYPE__ns1__loginUser:
		return ((_ns1__loginUser *)ptr)->soap_out(soap, "ns1:loginUser", id, NULL);
	case SOAP_TYPE_ns1__ArrayOfUnsignedInt:
		return ((ns1__ArrayOfUnsignedInt *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfUnsignedInt");
	case SOAP_TYPE_ns1__ArrayOfInt:
		return ((ns1__ArrayOfInt *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfInt");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__CloseFileObjectDataProvider:
		return soap_out_PointerTo_ns1__CloseFileObjectDataProvider(soap, tag, id, (_ns1__CloseFileObjectDataProvider *const*)ptr, "ns1:CloseFileObjectDataProvider");
	case SOAP_TYPE_PointerTo_ns1__DownloadFileObject:
		return soap_out_PointerTo_ns1__DownloadFileObject(soap, tag, id, (_ns1__DownloadFileObject *const*)ptr, "ns1:DownloadFileObject");
	case SOAP_TYPE_PointerTo_ns1__OpenServerObjectDataProvider:
		return soap_out_PointerTo_ns1__OpenServerObjectDataProvider(soap, tag, id, (_ns1__OpenServerObjectDataProvider *const*)ptr, "ns1:OpenServerObjectDataProvider");
	case SOAP_TYPE_PointerTo_ns1__OpenTapModelDataProvider:
		return soap_out_PointerTo_ns1__OpenTapModelDataProvider(soap, tag, id, (_ns1__OpenTapModelDataProvider *const*)ptr, "ns1:OpenTapModelDataProvider");
	case SOAP_TYPE_PointerTo_ns1__OpenFileObjectDataProvider:
		return soap_out_PointerTo_ns1__OpenFileObjectDataProvider(soap, tag, id, (_ns1__OpenFileObjectDataProvider *const*)ptr, "ns1:OpenFileObjectDataProvider");
	case SOAP_TYPE_PointerTo_ns1__FinalizeFileObjectData:
		return soap_out_PointerTo_ns1__FinalizeFileObjectData(soap, tag, id, (_ns1__FinalizeFileObjectData *const*)ptr, "ns1:FinalizeFileObjectData");
	case SOAP_TYPE_PointerTo_ns1__UploadFileObject:
		return soap_out_PointerTo_ns1__UploadFileObject(soap, tag, id, (_ns1__UploadFileObject *const*)ptr, "ns1:UploadFileObject");
	case SOAP_TYPE_PointerTo_ns1__DownloadFileById:
		return soap_out_PointerTo_ns1__DownloadFileById(soap, tag, id, (_ns1__DownloadFileById *const*)ptr, "ns1:DownloadFileById");
	case SOAP_TYPE_PointerTo_ns1__DeleteObject:
		return soap_out_PointerTo_ns1__DeleteObject(soap, tag, id, (_ns1__DeleteObject *const*)ptr, "ns1:DeleteObject");
	case SOAP_TYPE_PointerTo_ns1__SaveOrUpdateObjects:
		return soap_out_PointerTo_ns1__SaveOrUpdateObjects(soap, tag, id, (_ns1__SaveOrUpdateObjects *const*)ptr, "ns1:SaveOrUpdateObjects");
	case SOAP_TYPE_PointerTo_ns1__MatchTowerParts:
		return soap_out_PointerTo_ns1__MatchTowerParts(soap, tag, id, (_ns1__MatchTowerParts *const*)ptr, "ns1:MatchTowerParts");
	case SOAP_TYPE_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial:
		return soap_out_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, tag, id, (_ns1__GetTowerPartsLabelAndVersionSerial *const*)ptr, "ns1:GetTowerPartsLabelAndVersionSerial");
	case SOAP_TYPE_PointerTo_ns1__GetObjectsVersion:
		return soap_out_PointerTo_ns1__GetObjectsVersion(soap, tag, id, (_ns1__GetObjectsVersion *const*)ptr, "ns1:GetObjectsVersion");
	case SOAP_TYPE_PointerTo_ns1__DownloadObjects:
		return soap_out_PointerTo_ns1__DownloadObjects(soap, tag, id, (_ns1__DownloadObjects *const*)ptr, "ns1:DownloadObjects");
	case SOAP_TYPE_PointerTo_ns1__QueryObjects:
		return soap_out_PointerTo_ns1__QueryObjects(soap, tag, id, (_ns1__QueryObjects *const*)ptr, "ns1:QueryObjects");
	case SOAP_TYPE_PointerTo_ns1__logoutUser:
		return soap_out_PointerTo_ns1__logoutUser(soap, tag, id, (_ns1__logoutUser *const*)ptr, "ns1:logoutUser");
	case SOAP_TYPE_PointerTo_ns1__loginUserByByteArr:
		return soap_out_PointerTo_ns1__loginUserByByteArr(soap, tag, id, (_ns1__loginUserByByteArr *const*)ptr, "ns1:loginUserByByteArr");
	case SOAP_TYPE_PointerTo_ns1__loginUser:
		return soap_out_PointerTo_ns1__loginUser(soap, tag, id, (_ns1__loginUser *const*)ptr, "ns1:loginUser");
	case SOAP_TYPE_PointerTons1__ArrayOfUnsignedInt:
		return soap_out_PointerTons1__ArrayOfUnsignedInt(soap, tag, id, (ns1__ArrayOfUnsignedInt *const*)ptr, "ns1:ArrayOfUnsignedInt");
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		return soap_out_PointerTons1__ArrayOfInt(soap, tag, id, (ns1__ArrayOfInt *const*)ptr, "ns1:ArrayOfInt");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_out_PointerTounsignedInt(soap, tag, id, (unsigned int *const*)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse:
		((_ns1__CloseFileObjectDataProviderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CloseFileObjectDataProvider:
		((_ns1__CloseFileObjectDataProvider *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadFileObjectResponse:
		((_ns1__DownloadFileObjectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadFileObject:
		((_ns1__DownloadFileObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse:
		((_ns1__OpenServerObjectDataProviderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenServerObjectDataProvider:
		((_ns1__OpenServerObjectDataProvider *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenTapModelDataProviderResponse:
		((_ns1__OpenTapModelDataProviderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenTapModelDataProvider:
		((_ns1__OpenTapModelDataProvider *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse:
		((_ns1__OpenFileObjectDataProviderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenFileObjectDataProvider:
		((_ns1__OpenFileObjectDataProvider *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__FinalizeFileObjectDataResponse:
		((_ns1__FinalizeFileObjectDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__FinalizeFileObjectData:
		((_ns1__FinalizeFileObjectData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__UploadFileObjectResponse:
		((_ns1__UploadFileObjectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__UploadFileObject:
		((_ns1__UploadFileObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadFileByIdResponse:
		((_ns1__DownloadFileByIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadFileById:
		((_ns1__DownloadFileById *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DeleteObjectResponse:
		((_ns1__DeleteObjectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DeleteObject:
		((_ns1__DeleteObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse:
		((_ns1__SaveOrUpdateObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SaveOrUpdateObjects:
		((_ns1__SaveOrUpdateObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MatchTowerPartsResponse:
		((_ns1__MatchTowerPartsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MatchTowerParts:
		((_ns1__MatchTowerParts *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse:
		((_ns1__GetTowerPartsLabelAndVersionSerialResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial:
		((_ns1__GetTowerPartsLabelAndVersionSerial *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetObjectsVersionResponse:
		((_ns1__GetObjectsVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetObjectsVersion:
		((_ns1__GetObjectsVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadObjectsResponse:
		((_ns1__DownloadObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadObjects:
		((_ns1__DownloadObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__QueryObjectsResponse:
		((_ns1__QueryObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__QueryObjects:
		((_ns1__QueryObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__logoutUserResponse:
		((_ns1__logoutUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__logoutUser:
		((_ns1__logoutUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__loginUserByByteArrResponse:
		((_ns1__loginUserByByteArrResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__loginUserByByteArr:
		((_ns1__loginUserByByteArr *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__loginUserResponse:
		((_ns1__loginUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__loginUser:
		((_ns1__loginUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfUnsignedInt:
		((ns1__ArrayOfUnsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfInt:
		((ns1__ArrayOfInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__CloseFileObjectDataProvider_:
		soap_serialize___ns1__CloseFileObjectDataProvider_(soap, (const struct __ns1__CloseFileObjectDataProvider_ *)ptr);
		break;
	case SOAP_TYPE___ns1__DownloadFileObject_:
		soap_serialize___ns1__DownloadFileObject_(soap, (const struct __ns1__DownloadFileObject_ *)ptr);
		break;
	case SOAP_TYPE___ns1__OpenServerObjectDataProvider_:
		soap_serialize___ns1__OpenServerObjectDataProvider_(soap, (const struct __ns1__OpenServerObjectDataProvider_ *)ptr);
		break;
	case SOAP_TYPE___ns1__OpenTapModelDataProvider_:
		soap_serialize___ns1__OpenTapModelDataProvider_(soap, (const struct __ns1__OpenTapModelDataProvider_ *)ptr);
		break;
	case SOAP_TYPE___ns1__OpenFileObjectDataProvider_:
		soap_serialize___ns1__OpenFileObjectDataProvider_(soap, (const struct __ns1__OpenFileObjectDataProvider_ *)ptr);
		break;
	case SOAP_TYPE___ns1__FinalizeFileObjectData_:
		soap_serialize___ns1__FinalizeFileObjectData_(soap, (const struct __ns1__FinalizeFileObjectData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__UploadFileObject_:
		soap_serialize___ns1__UploadFileObject_(soap, (const struct __ns1__UploadFileObject_ *)ptr);
		break;
	case SOAP_TYPE___ns1__DownloadFileById_:
		soap_serialize___ns1__DownloadFileById_(soap, (const struct __ns1__DownloadFileById_ *)ptr);
		break;
	case SOAP_TYPE___ns1__DeleteObject_:
		soap_serialize___ns1__DeleteObject_(soap, (const struct __ns1__DeleteObject_ *)ptr);
		break;
	case SOAP_TYPE___ns1__SaveOrUpdateObjects_:
		soap_serialize___ns1__SaveOrUpdateObjects_(soap, (const struct __ns1__SaveOrUpdateObjects_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MatchTowerParts_:
		soap_serialize___ns1__MatchTowerParts_(soap, (const struct __ns1__MatchTowerParts_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial_:
		soap_serialize___ns1__GetTowerPartsLabelAndVersionSerial_(soap, (const struct __ns1__GetTowerPartsLabelAndVersionSerial_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetObjectsVersion_:
		soap_serialize___ns1__GetObjectsVersion_(soap, (const struct __ns1__GetObjectsVersion_ *)ptr);
		break;
	case SOAP_TYPE___ns1__DownloadObjects_:
		soap_serialize___ns1__DownloadObjects_(soap, (const struct __ns1__DownloadObjects_ *)ptr);
		break;
	case SOAP_TYPE___ns1__QueryObjects_:
		soap_serialize___ns1__QueryObjects_(soap, (const struct __ns1__QueryObjects_ *)ptr);
		break;
	case SOAP_TYPE___ns1__logoutUser_:
		soap_serialize___ns1__logoutUser_(soap, (const struct __ns1__logoutUser_ *)ptr);
		break;
	case SOAP_TYPE___ns1__loginUserByByteArr_:
		soap_serialize___ns1__loginUserByByteArr_(soap, (const struct __ns1__loginUserByByteArr_ *)ptr);
		break;
	case SOAP_TYPE___ns1__loginUser_:
		soap_serialize___ns1__loginUser_(soap, (const struct __ns1__loginUser_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CloseFileObjectDataProvider:
		soap_serialize___ns1__CloseFileObjectDataProvider(soap, (const struct __ns1__CloseFileObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___ns1__DownloadFileObject:
		soap_serialize___ns1__DownloadFileObject(soap, (const struct __ns1__DownloadFileObject *)ptr);
		break;
	case SOAP_TYPE___ns1__OpenServerObjectDataProvider:
		soap_serialize___ns1__OpenServerObjectDataProvider(soap, (const struct __ns1__OpenServerObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___ns1__OpenTapModelDataProvider:
		soap_serialize___ns1__OpenTapModelDataProvider(soap, (const struct __ns1__OpenTapModelDataProvider *)ptr);
		break;
	case SOAP_TYPE___ns1__OpenFileObjectDataProvider:
		soap_serialize___ns1__OpenFileObjectDataProvider(soap, (const struct __ns1__OpenFileObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___ns1__FinalizeFileObjectData:
		soap_serialize___ns1__FinalizeFileObjectData(soap, (const struct __ns1__FinalizeFileObjectData *)ptr);
		break;
	case SOAP_TYPE___ns1__UploadFileObject:
		soap_serialize___ns1__UploadFileObject(soap, (const struct __ns1__UploadFileObject *)ptr);
		break;
	case SOAP_TYPE___ns1__DownloadFileById:
		soap_serialize___ns1__DownloadFileById(soap, (const struct __ns1__DownloadFileById *)ptr);
		break;
	case SOAP_TYPE___ns1__DeleteObject:
		soap_serialize___ns1__DeleteObject(soap, (const struct __ns1__DeleteObject *)ptr);
		break;
	case SOAP_TYPE___ns1__SaveOrUpdateObjects:
		soap_serialize___ns1__SaveOrUpdateObjects(soap, (const struct __ns1__SaveOrUpdateObjects *)ptr);
		break;
	case SOAP_TYPE___ns1__MatchTowerParts:
		soap_serialize___ns1__MatchTowerParts(soap, (const struct __ns1__MatchTowerParts *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial:
		soap_serialize___ns1__GetTowerPartsLabelAndVersionSerial(soap, (const struct __ns1__GetTowerPartsLabelAndVersionSerial *)ptr);
		break;
	case SOAP_TYPE___ns1__GetObjectsVersion:
		soap_serialize___ns1__GetObjectsVersion(soap, (const struct __ns1__GetObjectsVersion *)ptr);
		break;
	case SOAP_TYPE___ns1__DownloadObjects:
		soap_serialize___ns1__DownloadObjects(soap, (const struct __ns1__DownloadObjects *)ptr);
		break;
	case SOAP_TYPE___ns1__QueryObjects:
		soap_serialize___ns1__QueryObjects(soap, (const struct __ns1__QueryObjects *)ptr);
		break;
	case SOAP_TYPE___ns1__logoutUser:
		soap_serialize___ns1__logoutUser(soap, (const struct __ns1__logoutUser *)ptr);
		break;
	case SOAP_TYPE___ns1__loginUserByByteArr:
		soap_serialize___ns1__loginUserByByteArr(soap, (const struct __ns1__loginUserByByteArr *)ptr);
		break;
	case SOAP_TYPE___ns1__loginUser:
		soap_serialize___ns1__loginUser(soap, (const struct __ns1__loginUser *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CloseFileObjectDataProvider:
		soap_serialize_PointerTo_ns1__CloseFileObjectDataProvider(soap, (_ns1__CloseFileObjectDataProvider *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DownloadFileObject:
		soap_serialize_PointerTo_ns1__DownloadFileObject(soap, (_ns1__DownloadFileObject *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OpenServerObjectDataProvider:
		soap_serialize_PointerTo_ns1__OpenServerObjectDataProvider(soap, (_ns1__OpenServerObjectDataProvider *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OpenTapModelDataProvider:
		soap_serialize_PointerTo_ns1__OpenTapModelDataProvider(soap, (_ns1__OpenTapModelDataProvider *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OpenFileObjectDataProvider:
		soap_serialize_PointerTo_ns1__OpenFileObjectDataProvider(soap, (_ns1__OpenFileObjectDataProvider *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__FinalizeFileObjectData:
		soap_serialize_PointerTo_ns1__FinalizeFileObjectData(soap, (_ns1__FinalizeFileObjectData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__UploadFileObject:
		soap_serialize_PointerTo_ns1__UploadFileObject(soap, (_ns1__UploadFileObject *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DownloadFileById:
		soap_serialize_PointerTo_ns1__DownloadFileById(soap, (_ns1__DownloadFileById *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DeleteObject:
		soap_serialize_PointerTo_ns1__DeleteObject(soap, (_ns1__DeleteObject *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SaveOrUpdateObjects:
		soap_serialize_PointerTo_ns1__SaveOrUpdateObjects(soap, (_ns1__SaveOrUpdateObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MatchTowerParts:
		soap_serialize_PointerTo_ns1__MatchTowerParts(soap, (_ns1__MatchTowerParts *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial:
		soap_serialize_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, (_ns1__GetTowerPartsLabelAndVersionSerial *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetObjectsVersion:
		soap_serialize_PointerTo_ns1__GetObjectsVersion(soap, (_ns1__GetObjectsVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DownloadObjects:
		soap_serialize_PointerTo_ns1__DownloadObjects(soap, (_ns1__DownloadObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__QueryObjects:
		soap_serialize_PointerTo_ns1__QueryObjects(soap, (_ns1__QueryObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__logoutUser:
		soap_serialize_PointerTo_ns1__logoutUser(soap, (_ns1__logoutUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__loginUserByByteArr:
		soap_serialize_PointerTo_ns1__loginUserByByteArr(soap, (_ns1__loginUserByByteArr *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__loginUser:
		soap_serialize_PointerTo_ns1__loginUser(soap, (_ns1__loginUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfUnsignedInt:
		soap_serialize_PointerTons1__ArrayOfUnsignedInt(soap, (ns1__ArrayOfUnsignedInt *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		soap_serialize_PointerTons1__ArrayOfInt(soap, (ns1__ArrayOfInt *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedInt:
		soap_serialize_PointerTounsignedInt(soap, (unsigned int *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfInt:
		return (void*)soap_instantiate_ns1__ArrayOfInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfUnsignedInt:
		return (void*)soap_instantiate_ns1__ArrayOfUnsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__loginUser:
		return (void*)soap_instantiate__ns1__loginUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__loginUserResponse:
		return (void*)soap_instantiate__ns1__loginUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__loginUserByByteArr:
		return (void*)soap_instantiate__ns1__loginUserByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__loginUserByByteArrResponse:
		return (void*)soap_instantiate__ns1__loginUserByByteArrResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__logoutUser:
		return (void*)soap_instantiate__ns1__logoutUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__logoutUserResponse:
		return (void*)soap_instantiate__ns1__logoutUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__QueryObjects:
		return (void*)soap_instantiate__ns1__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__QueryObjectsResponse:
		return (void*)soap_instantiate__ns1__QueryObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadObjects:
		return (void*)soap_instantiate__ns1__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadObjectsResponse:
		return (void*)soap_instantiate__ns1__DownloadObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetObjectsVersion:
		return (void*)soap_instantiate__ns1__GetObjectsVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetObjectsVersionResponse:
		return (void*)soap_instantiate__ns1__GetObjectsVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial:
		return (void*)soap_instantiate__ns1__GetTowerPartsLabelAndVersionSerial(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse:
		return (void*)soap_instantiate__ns1__GetTowerPartsLabelAndVersionSerialResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MatchTowerParts:
		return (void*)soap_instantiate__ns1__MatchTowerParts(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MatchTowerPartsResponse:
		return (void*)soap_instantiate__ns1__MatchTowerPartsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SaveOrUpdateObjects:
		return (void*)soap_instantiate__ns1__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse:
		return (void*)soap_instantiate__ns1__SaveOrUpdateObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DeleteObject:
		return (void*)soap_instantiate__ns1__DeleteObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DeleteObjectResponse:
		return (void*)soap_instantiate__ns1__DeleteObjectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadFileById:
		return (void*)soap_instantiate__ns1__DownloadFileById(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadFileByIdResponse:
		return (void*)soap_instantiate__ns1__DownloadFileByIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__UploadFileObject:
		return (void*)soap_instantiate__ns1__UploadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__UploadFileObjectResponse:
		return (void*)soap_instantiate__ns1__UploadFileObjectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__FinalizeFileObjectData:
		return (void*)soap_instantiate__ns1__FinalizeFileObjectData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__FinalizeFileObjectDataResponse:
		return (void*)soap_instantiate__ns1__FinalizeFileObjectDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenFileObjectDataProvider:
		return (void*)soap_instantiate__ns1__OpenFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse:
		return (void*)soap_instantiate__ns1__OpenFileObjectDataProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenTapModelDataProvider:
		return (void*)soap_instantiate__ns1__OpenTapModelDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenTapModelDataProviderResponse:
		return (void*)soap_instantiate__ns1__OpenTapModelDataProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenServerObjectDataProvider:
		return (void*)soap_instantiate__ns1__OpenServerObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse:
		return (void*)soap_instantiate__ns1__OpenServerObjectDataProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadFileObject:
		return (void*)soap_instantiate__ns1__DownloadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadFileObjectResponse:
		return (void*)soap_instantiate__ns1__DownloadFileObjectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CloseFileObjectDataProvider:
		return (void*)soap_instantiate__ns1__CloseFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse:
		return (void*)soap_instantiate__ns1__CloseFileObjectDataProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__loginUser:
		return (void*)soap_instantiate___ns1__loginUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__loginUserByByteArr:
		return (void*)soap_instantiate___ns1__loginUserByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__logoutUser:
		return (void*)soap_instantiate___ns1__logoutUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__QueryObjects:
		return (void*)soap_instantiate___ns1__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DownloadObjects:
		return (void*)soap_instantiate___ns1__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetObjectsVersion:
		return (void*)soap_instantiate___ns1__GetObjectsVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial:
		return (void*)soap_instantiate___ns1__GetTowerPartsLabelAndVersionSerial(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MatchTowerParts:
		return (void*)soap_instantiate___ns1__MatchTowerParts(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SaveOrUpdateObjects:
		return (void*)soap_instantiate___ns1__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DeleteObject:
		return (void*)soap_instantiate___ns1__DeleteObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DownloadFileById:
		return (void*)soap_instantiate___ns1__DownloadFileById(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__UploadFileObject:
		return (void*)soap_instantiate___ns1__UploadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__FinalizeFileObjectData:
		return (void*)soap_instantiate___ns1__FinalizeFileObjectData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OpenFileObjectDataProvider:
		return (void*)soap_instantiate___ns1__OpenFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OpenTapModelDataProvider:
		return (void*)soap_instantiate___ns1__OpenTapModelDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OpenServerObjectDataProvider:
		return (void*)soap_instantiate___ns1__OpenServerObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DownloadFileObject:
		return (void*)soap_instantiate___ns1__DownloadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CloseFileObjectDataProvider:
		return (void*)soap_instantiate___ns1__CloseFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__loginUser_:
		return (void*)soap_instantiate___ns1__loginUser_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__loginUserByByteArr_:
		return (void*)soap_instantiate___ns1__loginUserByByteArr_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__logoutUser_:
		return (void*)soap_instantiate___ns1__logoutUser_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__QueryObjects_:
		return (void*)soap_instantiate___ns1__QueryObjects_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DownloadObjects_:
		return (void*)soap_instantiate___ns1__DownloadObjects_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetObjectsVersion_:
		return (void*)soap_instantiate___ns1__GetObjectsVersion_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial_:
		return (void*)soap_instantiate___ns1__GetTowerPartsLabelAndVersionSerial_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MatchTowerParts_:
		return (void*)soap_instantiate___ns1__MatchTowerParts_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SaveOrUpdateObjects_:
		return (void*)soap_instantiate___ns1__SaveOrUpdateObjects_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DeleteObject_:
		return (void*)soap_instantiate___ns1__DeleteObject_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DownloadFileById_:
		return (void*)soap_instantiate___ns1__DownloadFileById_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__UploadFileObject_:
		return (void*)soap_instantiate___ns1__UploadFileObject_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__FinalizeFileObjectData_:
		return (void*)soap_instantiate___ns1__FinalizeFileObjectData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OpenFileObjectDataProvider_:
		return (void*)soap_instantiate___ns1__OpenFileObjectDataProvider_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OpenTapModelDataProvider_:
		return (void*)soap_instantiate___ns1__OpenTapModelDataProvider_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OpenServerObjectDataProvider_:
		return (void*)soap_instantiate___ns1__OpenServerObjectDataProvider_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DownloadFileObject_:
		return (void*)soap_instantiate___ns1__DownloadFileObject_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CloseFileObjectDataProvider_:
		return (void*)soap_instantiate___ns1__CloseFileObjectDataProvider_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfInt:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfInt*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfUnsignedInt:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfUnsignedInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfUnsignedInt*)p->ptr);
		break;
	case SOAP_TYPE__ns1__loginUser:
		if (p->size < 0)
			SOAP_DELETE((_ns1__loginUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__loginUser*)p->ptr);
		break;
	case SOAP_TYPE__ns1__loginUserResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__loginUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__loginUserResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__loginUserByByteArr:
		if (p->size < 0)
			SOAP_DELETE((_ns1__loginUserByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__loginUserByByteArr*)p->ptr);
		break;
	case SOAP_TYPE__ns1__loginUserByByteArrResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__loginUserByByteArrResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__loginUserByByteArrResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__logoutUser:
		if (p->size < 0)
			SOAP_DELETE((_ns1__logoutUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__logoutUser*)p->ptr);
		break;
	case SOAP_TYPE__ns1__logoutUserResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__logoutUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__logoutUserResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((_ns1__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE__ns1__QueryObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__QueryObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__QueryObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DownloadObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DownloadObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DownloadObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetObjectsVersion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetObjectsVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetObjectsVersion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetObjectsVersionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetObjectsVersionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetObjectsVersionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetTowerPartsLabelAndVersionSerialResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetTowerPartsLabelAndVersionSerialResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MatchTowerParts:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MatchTowerParts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MatchTowerParts*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MatchTowerPartsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MatchTowerPartsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MatchTowerPartsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SaveOrUpdateObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SaveOrUpdateObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DeleteObject:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DeleteObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DeleteObject*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DeleteObjectResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DeleteObjectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DeleteObjectResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DownloadFileById:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DownloadFileById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DownloadFileById*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DownloadFileByIdResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DownloadFileByIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DownloadFileByIdResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__UploadFileObject:
		if (p->size < 0)
			SOAP_DELETE((_ns1__UploadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__UploadFileObject*)p->ptr);
		break;
	case SOAP_TYPE__ns1__UploadFileObjectResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__UploadFileObjectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__UploadFileObjectResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__FinalizeFileObjectData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__FinalizeFileObjectData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__FinalizeFileObjectData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__FinalizeFileObjectDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__FinalizeFileObjectDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__FinalizeFileObjectDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__OpenFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((_ns1__OpenFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__OpenFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__OpenFileObjectDataProviderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__OpenFileObjectDataProviderResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__OpenTapModelDataProvider:
		if (p->size < 0)
			SOAP_DELETE((_ns1__OpenTapModelDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__OpenTapModelDataProvider*)p->ptr);
		break;
	case SOAP_TYPE__ns1__OpenTapModelDataProviderResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__OpenTapModelDataProviderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__OpenTapModelDataProviderResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__OpenServerObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((_ns1__OpenServerObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__OpenServerObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__OpenServerObjectDataProviderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__OpenServerObjectDataProviderResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DownloadFileObject:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DownloadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DownloadFileObject*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DownloadFileObjectResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DownloadFileObjectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DownloadFileObjectResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CloseFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CloseFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CloseFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CloseFileObjectDataProviderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CloseFileObjectDataProviderResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__loginUser:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__loginUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__loginUser*)p->ptr);
		break;
	case SOAP_TYPE___ns1__loginUserByByteArr:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__loginUserByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__loginUserByByteArr*)p->ptr);
		break;
	case SOAP_TYPE___ns1__logoutUser:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__logoutUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__logoutUser*)p->ptr);
		break;
	case SOAP_TYPE___ns1__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetObjectsVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetObjectsVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetObjectsVersion*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MatchTowerParts:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MatchTowerParts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MatchTowerParts*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DeleteObject:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DeleteObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DeleteObject*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DownloadFileById:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DownloadFileById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DownloadFileById*)p->ptr);
		break;
	case SOAP_TYPE___ns1__UploadFileObject:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__UploadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__UploadFileObject*)p->ptr);
		break;
	case SOAP_TYPE___ns1__FinalizeFileObjectData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__FinalizeFileObjectData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__FinalizeFileObjectData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__OpenFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__OpenFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__OpenFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___ns1__OpenTapModelDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__OpenTapModelDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__OpenTapModelDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___ns1__OpenServerObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__OpenServerObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__OpenServerObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DownloadFileObject:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DownloadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DownloadFileObject*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CloseFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CloseFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CloseFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___ns1__loginUser_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__loginUser_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__loginUser_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__loginUserByByteArr_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__loginUserByByteArr_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__loginUserByByteArr_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__logoutUser_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__logoutUser_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__logoutUser_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__QueryObjects_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__QueryObjects_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__QueryObjects_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DownloadObjects_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DownloadObjects_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DownloadObjects_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetObjectsVersion_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetObjectsVersion_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetObjectsVersion_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetTowerPartsLabelAndVersionSerial_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetTowerPartsLabelAndVersionSerial_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MatchTowerParts_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MatchTowerParts_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MatchTowerParts_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SaveOrUpdateObjects_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SaveOrUpdateObjects_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SaveOrUpdateObjects_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DeleteObject_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DeleteObject_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DeleteObject_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DownloadFileById_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DownloadFileById_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DownloadFileById_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__UploadFileObject_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__UploadFileObject_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__UploadFileObject_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__FinalizeFileObjectData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__FinalizeFileObjectData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__FinalizeFileObjectData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__OpenFileObjectDataProvider_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__OpenFileObjectDataProvider_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__OpenFileObjectDataProvider_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__OpenTapModelDataProvider_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__OpenTapModelDataProvider_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__OpenTapModelDataProvider_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__OpenServerObjectDataProvider_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__OpenServerObjectDataProvider_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__OpenServerObjectDataProvider_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DownloadFileObject_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DownloadFileObject_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DownloadFileObject_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CloseFileObjectDataProvider_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CloseFileObjectDataProvider_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CloseFileObjectDataProvider_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__CloseFileObjectDataProviderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__CloseFileObjectDataProviderResponse::CloseFileObjectDataProviderResult);
	/* transient soap skipped */
}

void _ns1__CloseFileObjectDataProviderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__CloseFileObjectDataProviderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CloseFileObjectDataProviderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseFileObjectDataProviderResponse(struct soap *soap, const char *tag, int id, const _ns1__CloseFileObjectDataProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:CloseFileObjectDataProviderResult");
	if (soap_out_bool(soap, "ns1:CloseFileObjectDataProviderResult", -1, &(a->_ns1__CloseFileObjectDataProviderResponse::CloseFileObjectDataProviderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CloseFileObjectDataProviderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CloseFileObjectDataProviderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CloseFileObjectDataProviderResponse * SOAP_FMAC4 soap_in__ns1__CloseFileObjectDataProviderResponse(struct soap *soap, const char *tag, _ns1__CloseFileObjectDataProviderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CloseFileObjectDataProviderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse, sizeof(_ns1__CloseFileObjectDataProviderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CloseFileObjectDataProviderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CloseFileObjectDataProviderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CloseFileObjectDataProviderResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:CloseFileObjectDataProviderResult", &(a->_ns1__CloseFileObjectDataProviderResponse::CloseFileObjectDataProviderResult), "xsd:boolean"))
				{	soap_flag_CloseFileObjectDataProviderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CloseFileObjectDataProviderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CloseFileObjectDataProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse, 0, sizeof(_ns1__CloseFileObjectDataProviderResponse), 0, soap_copy__ns1__CloseFileObjectDataProviderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CloseFileObjectDataProviderResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CloseFileObjectDataProviderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CloseFileObjectDataProviderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CloseFileObjectDataProviderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CloseFileObjectDataProviderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CloseFileObjectDataProviderResponse * SOAP_FMAC4 soap_get__ns1__CloseFileObjectDataProviderResponse(struct soap *soap, _ns1__CloseFileObjectDataProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CloseFileObjectDataProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CloseFileObjectDataProviderResponse * SOAP_FMAC2 soap_instantiate__ns1__CloseFileObjectDataProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CloseFileObjectDataProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CloseFileObjectDataProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CloseFileObjectDataProviderResponse);
		if (size)
			*size = sizeof(_ns1__CloseFileObjectDataProviderResponse);
		((_ns1__CloseFileObjectDataProviderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CloseFileObjectDataProviderResponse, n);
		if (size)
			*size = n * sizeof(_ns1__CloseFileObjectDataProviderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CloseFileObjectDataProviderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CloseFileObjectDataProviderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CloseFileObjectDataProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CloseFileObjectDataProviderResponse %p -> %p\n", q, p));
	*(_ns1__CloseFileObjectDataProviderResponse*)p = *(_ns1__CloseFileObjectDataProviderResponse*)q;
}

void _ns1__CloseFileObjectDataProvider::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__CloseFileObjectDataProvider::sessionId);
	soap_default_int(soap, &this->_ns1__CloseFileObjectDataProvider::idFileObj);
	/* transient soap skipped */
}

void _ns1__CloseFileObjectDataProvider::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__CloseFileObjectDataProvider::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__CloseFileObjectDataProvider::idFileObj, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__CloseFileObjectDataProvider::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CloseFileObjectDataProvider(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseFileObjectDataProvider(struct soap *soap, const char *tag, int id, const _ns1__CloseFileObjectDataProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CloseFileObjectDataProvider), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__CloseFileObjectDataProvider::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:idFileObj", -1, &(a->_ns1__CloseFileObjectDataProvider::idFileObj), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CloseFileObjectDataProvider::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CloseFileObjectDataProvider(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CloseFileObjectDataProvider * SOAP_FMAC4 soap_in__ns1__CloseFileObjectDataProvider(struct soap *soap, const char *tag, _ns1__CloseFileObjectDataProvider *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CloseFileObjectDataProvider *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CloseFileObjectDataProvider, sizeof(_ns1__CloseFileObjectDataProvider), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CloseFileObjectDataProvider)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CloseFileObjectDataProvider *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__CloseFileObjectDataProvider::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:idFileObj", &(a->_ns1__CloseFileObjectDataProvider::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CloseFileObjectDataProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CloseFileObjectDataProvider, 0, sizeof(_ns1__CloseFileObjectDataProvider), 0, soap_copy__ns1__CloseFileObjectDataProvider);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CloseFileObjectDataProvider::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CloseFileObjectDataProvider);
	if (this->soap_out(soap, tag?tag:"ns1:CloseFileObjectDataProvider", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CloseFileObjectDataProvider::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CloseFileObjectDataProvider(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CloseFileObjectDataProvider * SOAP_FMAC4 soap_get__ns1__CloseFileObjectDataProvider(struct soap *soap, _ns1__CloseFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CloseFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CloseFileObjectDataProvider * SOAP_FMAC2 soap_instantiate__ns1__CloseFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CloseFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CloseFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CloseFileObjectDataProvider);
		if (size)
			*size = sizeof(_ns1__CloseFileObjectDataProvider);
		((_ns1__CloseFileObjectDataProvider*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CloseFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(_ns1__CloseFileObjectDataProvider);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CloseFileObjectDataProvider*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CloseFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CloseFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CloseFileObjectDataProvider %p -> %p\n", q, p));
	*(_ns1__CloseFileObjectDataProvider*)p = *(_ns1__CloseFileObjectDataProvider*)q;
}

void _ns1__DownloadFileObjectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DownloadFileObjectResponse::DownloadFileObjectResult = NULL;
	/* transient soap skipped */
}

void _ns1__DownloadFileObjectResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__DownloadFileObjectResponse::DownloadFileObjectResult);
	/* transient soap skipped */
#endif
}

int _ns1__DownloadFileObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadFileObjectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadFileObjectResponse(struct soap *soap, const char *tag, int id, const _ns1__DownloadFileObjectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadFileObjectResponse), type))
		return soap->error;
	if (a->DownloadFileObjectResult)
		soap_element_result(soap, "ns1:DownloadFileObjectResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:DownloadFileObjectResult", -1, &(a->_ns1__DownloadFileObjectResponse::DownloadFileObjectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadFileObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadFileObjectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadFileObjectResponse * SOAP_FMAC4 soap_in__ns1__DownloadFileObjectResponse(struct soap *soap, const char *tag, _ns1__DownloadFileObjectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadFileObjectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadFileObjectResponse, sizeof(_ns1__DownloadFileObjectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadFileObjectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadFileObjectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DownloadFileObjectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadFileObjectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:DownloadFileObjectResult", &(a->_ns1__DownloadFileObjectResponse::DownloadFileObjectResult), "xsd:base64Binary"))
				{	soap_flag_DownloadFileObjectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DownloadFileObjectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadFileObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadFileObjectResponse, 0, sizeof(_ns1__DownloadFileObjectResponse), 0, soap_copy__ns1__DownloadFileObjectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__DownloadFileObjectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadFileObjectResponse);
	if (this->soap_out(soap, tag?tag:"ns1:DownloadFileObjectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DownloadFileObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadFileObjectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadFileObjectResponse * SOAP_FMAC4 soap_get__ns1__DownloadFileObjectResponse(struct soap *soap, _ns1__DownloadFileObjectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadFileObjectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DownloadFileObjectResponse * SOAP_FMAC2 soap_instantiate__ns1__DownloadFileObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadFileObjectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadFileObjectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DownloadFileObjectResponse);
		if (size)
			*size = sizeof(_ns1__DownloadFileObjectResponse);
		((_ns1__DownloadFileObjectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DownloadFileObjectResponse, n);
		if (size)
			*size = n * sizeof(_ns1__DownloadFileObjectResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DownloadFileObjectResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DownloadFileObjectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadFileObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadFileObjectResponse %p -> %p\n", q, p));
	*(_ns1__DownloadFileObjectResponse*)p = *(_ns1__DownloadFileObjectResponse*)q;
}

void _ns1__DownloadFileObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__DownloadFileObject::sessionId);
	soap_default_int(soap, &this->_ns1__DownloadFileObject::idFileObj);
	soap_default_int(soap, &this->_ns1__DownloadFileObject::startposition);
	soap_default_int(soap, &this->_ns1__DownloadFileObject::download_USCOREsize);
	soap_default_bool(soap, &this->_ns1__DownloadFileObject::compressed);
	/* transient soap skipped */
}

void _ns1__DownloadFileObject::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__DownloadFileObject::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__DownloadFileObject::idFileObj, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__DownloadFileObject::startposition, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__DownloadFileObject::download_USCOREsize, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__DownloadFileObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadFileObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadFileObject(struct soap *soap, const char *tag, int id, const _ns1__DownloadFileObject *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadFileObject), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__DownloadFileObject::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:idFileObj", -1, &(a->_ns1__DownloadFileObject::idFileObj), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:startposition", -1, &(a->_ns1__DownloadFileObject::startposition), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:download_size", -1, &(a->_ns1__DownloadFileObject::download_USCOREsize), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:compressed", -1, &(a->_ns1__DownloadFileObject::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadFileObject::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadFileObject(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadFileObject * SOAP_FMAC4 soap_in__ns1__DownloadFileObject(struct soap *soap, const char *tag, _ns1__DownloadFileObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadFileObject *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadFileObject, sizeof(_ns1__DownloadFileObject), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadFileObject)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadFileObject *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	size_t soap_flag_startposition1 = 1;
	size_t soap_flag_download_USCOREsize1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__DownloadFileObject::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:idFileObj", &(a->_ns1__DownloadFileObject::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			if (soap_flag_startposition1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:startposition", &(a->_ns1__DownloadFileObject::startposition), "xsd:int"))
				{	soap_flag_startposition1--;
					continue;
				}
			if (soap_flag_download_USCOREsize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:download_size", &(a->_ns1__DownloadFileObject::download_USCOREsize), "xsd:int"))
				{	soap_flag_download_USCOREsize1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:compressed", &(a->_ns1__DownloadFileObject::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadFileObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadFileObject, 0, sizeof(_ns1__DownloadFileObject), 0, soap_copy__ns1__DownloadFileObject);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0 || soap_flag_startposition1 > 0 || soap_flag_download_USCOREsize1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DownloadFileObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadFileObject);
	if (this->soap_out(soap, tag?tag:"ns1:DownloadFileObject", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DownloadFileObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadFileObject(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadFileObject * SOAP_FMAC4 soap_get__ns1__DownloadFileObject(struct soap *soap, _ns1__DownloadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DownloadFileObject * SOAP_FMAC2 soap_instantiate__ns1__DownloadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DownloadFileObject);
		if (size)
			*size = sizeof(_ns1__DownloadFileObject);
		((_ns1__DownloadFileObject*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DownloadFileObject, n);
		if (size)
			*size = n * sizeof(_ns1__DownloadFileObject);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DownloadFileObject*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DownloadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadFileObject %p -> %p\n", q, p));
	*(_ns1__DownloadFileObject*)p = *(_ns1__DownloadFileObject*)q;
}

void _ns1__OpenServerObjectDataProviderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__OpenServerObjectDataProviderResponse::OpenServerObjectDataProviderResult);
	/* transient soap skipped */
}

void _ns1__OpenServerObjectDataProviderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__OpenServerObjectDataProviderResponse::OpenServerObjectDataProviderResult);
	/* transient soap skipped */
#endif
}

int _ns1__OpenServerObjectDataProviderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenServerObjectDataProviderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenServerObjectDataProviderResponse(struct soap *soap, const char *tag, int id, const _ns1__OpenServerObjectDataProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse), type))
		return soap->error;
	if (a->OpenServerObjectDataProviderResult)
		soap_element_result(soap, "ns1:OpenServerObjectDataProviderResult");
	if (soap_out_string(soap, "ns1:OpenServerObjectDataProviderResult", -1, &(a->_ns1__OpenServerObjectDataProviderResponse::OpenServerObjectDataProviderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenServerObjectDataProviderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenServerObjectDataProviderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenServerObjectDataProviderResponse * SOAP_FMAC4 soap_in__ns1__OpenServerObjectDataProviderResponse(struct soap *soap, const char *tag, _ns1__OpenServerObjectDataProviderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenServerObjectDataProviderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse, sizeof(_ns1__OpenServerObjectDataProviderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenServerObjectDataProviderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_OpenServerObjectDataProviderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OpenServerObjectDataProviderResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:OpenServerObjectDataProviderResult", &(a->_ns1__OpenServerObjectDataProviderResponse::OpenServerObjectDataProviderResult), "xsd:string"))
				{	soap_flag_OpenServerObjectDataProviderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:OpenServerObjectDataProviderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenServerObjectDataProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse, 0, sizeof(_ns1__OpenServerObjectDataProviderResponse), 0, soap_copy__ns1__OpenServerObjectDataProviderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__OpenServerObjectDataProviderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse);
	if (this->soap_out(soap, tag?tag:"ns1:OpenServerObjectDataProviderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OpenServerObjectDataProviderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenServerObjectDataProviderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenServerObjectDataProviderResponse * SOAP_FMAC4 soap_get__ns1__OpenServerObjectDataProviderResponse(struct soap *soap, _ns1__OpenServerObjectDataProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenServerObjectDataProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__OpenServerObjectDataProviderResponse * SOAP_FMAC2 soap_instantiate__ns1__OpenServerObjectDataProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenServerObjectDataProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenServerObjectDataProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__OpenServerObjectDataProviderResponse);
		if (size)
			*size = sizeof(_ns1__OpenServerObjectDataProviderResponse);
		((_ns1__OpenServerObjectDataProviderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__OpenServerObjectDataProviderResponse, n);
		if (size)
			*size = n * sizeof(_ns1__OpenServerObjectDataProviderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__OpenServerObjectDataProviderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__OpenServerObjectDataProviderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenServerObjectDataProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenServerObjectDataProviderResponse %p -> %p\n", q, p));
	*(_ns1__OpenServerObjectDataProviderResponse*)p = *(_ns1__OpenServerObjectDataProviderResponse*)q;
}

void _ns1__OpenServerObjectDataProvider::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__OpenServerObjectDataProvider::sessionId);
	soap_default_int(soap, &this->_ns1__OpenServerObjectDataProvider::idObject);
	soap_default_string(soap, &this->_ns1__OpenServerObjectDataProvider::cls_USCOREname);
	soap_default_bool(soap, &this->_ns1__OpenServerObjectDataProvider::compressed);
	/* transient soap skipped */
}

void _ns1__OpenServerObjectDataProvider::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__OpenServerObjectDataProvider::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__OpenServerObjectDataProvider::idObject, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__OpenServerObjectDataProvider::cls_USCOREname);
	/* transient soap skipped */
#endif
}

int _ns1__OpenServerObjectDataProvider::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenServerObjectDataProvider(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenServerObjectDataProvider(struct soap *soap, const char *tag, int id, const _ns1__OpenServerObjectDataProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenServerObjectDataProvider), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__OpenServerObjectDataProvider::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:idObject", -1, &(a->_ns1__OpenServerObjectDataProvider::idObject), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:cls_name", -1, &(a->_ns1__OpenServerObjectDataProvider::cls_USCOREname), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:compressed", -1, &(a->_ns1__OpenServerObjectDataProvider::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenServerObjectDataProvider::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenServerObjectDataProvider(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenServerObjectDataProvider * SOAP_FMAC4 soap_in__ns1__OpenServerObjectDataProvider(struct soap *soap, const char *tag, _ns1__OpenServerObjectDataProvider *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenServerObjectDataProvider *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenServerObjectDataProvider, sizeof(_ns1__OpenServerObjectDataProvider), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenServerObjectDataProvider)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenServerObjectDataProvider *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idObject1 = 1;
	size_t soap_flag_cls_USCOREname1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__OpenServerObjectDataProvider::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idObject1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:idObject", &(a->_ns1__OpenServerObjectDataProvider::idObject), "xsd:int"))
				{	soap_flag_idObject1--;
					continue;
				}
			if (soap_flag_cls_USCOREname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:cls_name", &(a->_ns1__OpenServerObjectDataProvider::cls_USCOREname), "xsd:string"))
				{	soap_flag_cls_USCOREname1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:compressed", &(a->_ns1__OpenServerObjectDataProvider::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenServerObjectDataProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenServerObjectDataProvider, 0, sizeof(_ns1__OpenServerObjectDataProvider), 0, soap_copy__ns1__OpenServerObjectDataProvider);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idObject1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__OpenServerObjectDataProvider::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenServerObjectDataProvider);
	if (this->soap_out(soap, tag?tag:"ns1:OpenServerObjectDataProvider", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OpenServerObjectDataProvider::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenServerObjectDataProvider(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenServerObjectDataProvider * SOAP_FMAC4 soap_get__ns1__OpenServerObjectDataProvider(struct soap *soap, _ns1__OpenServerObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenServerObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__OpenServerObjectDataProvider * SOAP_FMAC2 soap_instantiate__ns1__OpenServerObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenServerObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenServerObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__OpenServerObjectDataProvider);
		if (size)
			*size = sizeof(_ns1__OpenServerObjectDataProvider);
		((_ns1__OpenServerObjectDataProvider*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__OpenServerObjectDataProvider, n);
		if (size)
			*size = n * sizeof(_ns1__OpenServerObjectDataProvider);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__OpenServerObjectDataProvider*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__OpenServerObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenServerObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenServerObjectDataProvider %p -> %p\n", q, p));
	*(_ns1__OpenServerObjectDataProvider*)p = *(_ns1__OpenServerObjectDataProvider*)q;
}

void _ns1__OpenTapModelDataProviderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__OpenTapModelDataProviderResponse::OpenTapModelDataProviderResult);
	/* transient soap skipped */
}

void _ns1__OpenTapModelDataProviderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__OpenTapModelDataProviderResponse::OpenTapModelDataProviderResult);
	/* transient soap skipped */
#endif
}

int _ns1__OpenTapModelDataProviderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenTapModelDataProviderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenTapModelDataProviderResponse(struct soap *soap, const char *tag, int id, const _ns1__OpenTapModelDataProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenTapModelDataProviderResponse), type))
		return soap->error;
	if (a->OpenTapModelDataProviderResult)
		soap_element_result(soap, "ns1:OpenTapModelDataProviderResult");
	if (soap_out_string(soap, "ns1:OpenTapModelDataProviderResult", -1, &(a->_ns1__OpenTapModelDataProviderResponse::OpenTapModelDataProviderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenTapModelDataProviderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenTapModelDataProviderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenTapModelDataProviderResponse * SOAP_FMAC4 soap_in__ns1__OpenTapModelDataProviderResponse(struct soap *soap, const char *tag, _ns1__OpenTapModelDataProviderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenTapModelDataProviderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenTapModelDataProviderResponse, sizeof(_ns1__OpenTapModelDataProviderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenTapModelDataProviderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenTapModelDataProviderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_OpenTapModelDataProviderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OpenTapModelDataProviderResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:OpenTapModelDataProviderResult", &(a->_ns1__OpenTapModelDataProviderResponse::OpenTapModelDataProviderResult), "xsd:string"))
				{	soap_flag_OpenTapModelDataProviderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:OpenTapModelDataProviderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenTapModelDataProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenTapModelDataProviderResponse, 0, sizeof(_ns1__OpenTapModelDataProviderResponse), 0, soap_copy__ns1__OpenTapModelDataProviderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__OpenTapModelDataProviderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenTapModelDataProviderResponse);
	if (this->soap_out(soap, tag?tag:"ns1:OpenTapModelDataProviderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OpenTapModelDataProviderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenTapModelDataProviderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenTapModelDataProviderResponse * SOAP_FMAC4 soap_get__ns1__OpenTapModelDataProviderResponse(struct soap *soap, _ns1__OpenTapModelDataProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenTapModelDataProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__OpenTapModelDataProviderResponse * SOAP_FMAC2 soap_instantiate__ns1__OpenTapModelDataProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenTapModelDataProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenTapModelDataProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__OpenTapModelDataProviderResponse);
		if (size)
			*size = sizeof(_ns1__OpenTapModelDataProviderResponse);
		((_ns1__OpenTapModelDataProviderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__OpenTapModelDataProviderResponse, n);
		if (size)
			*size = n * sizeof(_ns1__OpenTapModelDataProviderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__OpenTapModelDataProviderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__OpenTapModelDataProviderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenTapModelDataProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenTapModelDataProviderResponse %p -> %p\n", q, p));
	*(_ns1__OpenTapModelDataProviderResponse*)p = *(_ns1__OpenTapModelDataProviderResponse*)q;
}

void _ns1__OpenTapModelDataProvider::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__OpenTapModelDataProvider::sessionId);
	soap_default_int(soap, &this->_ns1__OpenTapModelDataProvider::idTowerType);
	soap_default_bool(soap, &this->_ns1__OpenTapModelDataProvider::compressed);
	/* transient soap skipped */
}

void _ns1__OpenTapModelDataProvider::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__OpenTapModelDataProvider::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__OpenTapModelDataProvider::idTowerType, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__OpenTapModelDataProvider::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenTapModelDataProvider(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenTapModelDataProvider(struct soap *soap, const char *tag, int id, const _ns1__OpenTapModelDataProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenTapModelDataProvider), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__OpenTapModelDataProvider::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:idTowerType", -1, &(a->_ns1__OpenTapModelDataProvider::idTowerType), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:compressed", -1, &(a->_ns1__OpenTapModelDataProvider::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenTapModelDataProvider::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenTapModelDataProvider(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenTapModelDataProvider * SOAP_FMAC4 soap_in__ns1__OpenTapModelDataProvider(struct soap *soap, const char *tag, _ns1__OpenTapModelDataProvider *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenTapModelDataProvider *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenTapModelDataProvider, sizeof(_ns1__OpenTapModelDataProvider), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenTapModelDataProvider)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenTapModelDataProvider *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idTowerType1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__OpenTapModelDataProvider::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idTowerType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:idTowerType", &(a->_ns1__OpenTapModelDataProvider::idTowerType), "xsd:int"))
				{	soap_flag_idTowerType1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:compressed", &(a->_ns1__OpenTapModelDataProvider::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenTapModelDataProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenTapModelDataProvider, 0, sizeof(_ns1__OpenTapModelDataProvider), 0, soap_copy__ns1__OpenTapModelDataProvider);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idTowerType1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__OpenTapModelDataProvider::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenTapModelDataProvider);
	if (this->soap_out(soap, tag?tag:"ns1:OpenTapModelDataProvider", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OpenTapModelDataProvider::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenTapModelDataProvider(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenTapModelDataProvider * SOAP_FMAC4 soap_get__ns1__OpenTapModelDataProvider(struct soap *soap, _ns1__OpenTapModelDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenTapModelDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__OpenTapModelDataProvider * SOAP_FMAC2 soap_instantiate__ns1__OpenTapModelDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenTapModelDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenTapModelDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__OpenTapModelDataProvider);
		if (size)
			*size = sizeof(_ns1__OpenTapModelDataProvider);
		((_ns1__OpenTapModelDataProvider*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__OpenTapModelDataProvider, n);
		if (size)
			*size = n * sizeof(_ns1__OpenTapModelDataProvider);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__OpenTapModelDataProvider*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__OpenTapModelDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenTapModelDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenTapModelDataProvider %p -> %p\n", q, p));
	*(_ns1__OpenTapModelDataProvider*)p = *(_ns1__OpenTapModelDataProvider*)q;
}

void _ns1__OpenFileObjectDataProviderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_ns1__OpenFileObjectDataProviderResponse::OpenFileObjectDataProviderResult);
	/* transient soap skipped */
}

void _ns1__OpenFileObjectDataProviderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__OpenFileObjectDataProviderResponse::OpenFileObjectDataProviderResult, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _ns1__OpenFileObjectDataProviderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenFileObjectDataProviderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenFileObjectDataProviderResponse(struct soap *soap, const char *tag, int id, const _ns1__OpenFileObjectDataProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:OpenFileObjectDataProviderResult");
	if (soap_out_unsignedInt(soap, "ns1:OpenFileObjectDataProviderResult", -1, &(a->_ns1__OpenFileObjectDataProviderResponse::OpenFileObjectDataProviderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenFileObjectDataProviderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenFileObjectDataProviderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenFileObjectDataProviderResponse * SOAP_FMAC4 soap_in__ns1__OpenFileObjectDataProviderResponse(struct soap *soap, const char *tag, _ns1__OpenFileObjectDataProviderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenFileObjectDataProviderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse, sizeof(_ns1__OpenFileObjectDataProviderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenFileObjectDataProviderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_OpenFileObjectDataProviderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OpenFileObjectDataProviderResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:OpenFileObjectDataProviderResult", &(a->_ns1__OpenFileObjectDataProviderResponse::OpenFileObjectDataProviderResult), "xsd:unsignedInt"))
				{	soap_flag_OpenFileObjectDataProviderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:OpenFileObjectDataProviderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenFileObjectDataProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse, 0, sizeof(_ns1__OpenFileObjectDataProviderResponse), 0, soap_copy__ns1__OpenFileObjectDataProviderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OpenFileObjectDataProviderResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__OpenFileObjectDataProviderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse);
	if (this->soap_out(soap, tag?tag:"ns1:OpenFileObjectDataProviderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OpenFileObjectDataProviderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenFileObjectDataProviderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenFileObjectDataProviderResponse * SOAP_FMAC4 soap_get__ns1__OpenFileObjectDataProviderResponse(struct soap *soap, _ns1__OpenFileObjectDataProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenFileObjectDataProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__OpenFileObjectDataProviderResponse * SOAP_FMAC2 soap_instantiate__ns1__OpenFileObjectDataProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenFileObjectDataProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenFileObjectDataProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__OpenFileObjectDataProviderResponse);
		if (size)
			*size = sizeof(_ns1__OpenFileObjectDataProviderResponse);
		((_ns1__OpenFileObjectDataProviderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__OpenFileObjectDataProviderResponse, n);
		if (size)
			*size = n * sizeof(_ns1__OpenFileObjectDataProviderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__OpenFileObjectDataProviderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__OpenFileObjectDataProviderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenFileObjectDataProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenFileObjectDataProviderResponse %p -> %p\n", q, p));
	*(_ns1__OpenFileObjectDataProviderResponse*)p = *(_ns1__OpenFileObjectDataProviderResponse*)q;
}

void _ns1__OpenFileObjectDataProvider::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__OpenFileObjectDataProvider::sessionId);
	soap_default_int(soap, &this->_ns1__OpenFileObjectDataProvider::idFileObj);
	soap_default_bool(soap, &this->_ns1__OpenFileObjectDataProvider::compressed);
	/* transient soap skipped */
}

void _ns1__OpenFileObjectDataProvider::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__OpenFileObjectDataProvider::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__OpenFileObjectDataProvider::idFileObj, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__OpenFileObjectDataProvider::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenFileObjectDataProvider(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenFileObjectDataProvider(struct soap *soap, const char *tag, int id, const _ns1__OpenFileObjectDataProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenFileObjectDataProvider), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__OpenFileObjectDataProvider::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:idFileObj", -1, &(a->_ns1__OpenFileObjectDataProvider::idFileObj), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:compressed", -1, &(a->_ns1__OpenFileObjectDataProvider::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenFileObjectDataProvider::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenFileObjectDataProvider(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenFileObjectDataProvider * SOAP_FMAC4 soap_in__ns1__OpenFileObjectDataProvider(struct soap *soap, const char *tag, _ns1__OpenFileObjectDataProvider *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenFileObjectDataProvider *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenFileObjectDataProvider, sizeof(_ns1__OpenFileObjectDataProvider), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenFileObjectDataProvider)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenFileObjectDataProvider *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__OpenFileObjectDataProvider::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:idFileObj", &(a->_ns1__OpenFileObjectDataProvider::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:compressed", &(a->_ns1__OpenFileObjectDataProvider::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenFileObjectDataProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenFileObjectDataProvider, 0, sizeof(_ns1__OpenFileObjectDataProvider), 0, soap_copy__ns1__OpenFileObjectDataProvider);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__OpenFileObjectDataProvider::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenFileObjectDataProvider);
	if (this->soap_out(soap, tag?tag:"ns1:OpenFileObjectDataProvider", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OpenFileObjectDataProvider::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenFileObjectDataProvider(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenFileObjectDataProvider * SOAP_FMAC4 soap_get__ns1__OpenFileObjectDataProvider(struct soap *soap, _ns1__OpenFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__OpenFileObjectDataProvider * SOAP_FMAC2 soap_instantiate__ns1__OpenFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__OpenFileObjectDataProvider);
		if (size)
			*size = sizeof(_ns1__OpenFileObjectDataProvider);
		((_ns1__OpenFileObjectDataProvider*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__OpenFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(_ns1__OpenFileObjectDataProvider);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__OpenFileObjectDataProvider*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__OpenFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenFileObjectDataProvider %p -> %p\n", q, p));
	*(_ns1__OpenFileObjectDataProvider*)p = *(_ns1__OpenFileObjectDataProvider*)q;
}

void _ns1__FinalizeFileObjectDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__FinalizeFileObjectDataResponse::FinalizeFileObjectDataResult);
	/* transient soap skipped */
}

void _ns1__FinalizeFileObjectDataResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__FinalizeFileObjectDataResponse::FinalizeFileObjectDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__FinalizeFileObjectDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__FinalizeFileObjectDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FinalizeFileObjectDataResponse(struct soap *soap, const char *tag, int id, const _ns1__FinalizeFileObjectDataResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__FinalizeFileObjectDataResponse), type))
		return soap->error;
	if (a->FinalizeFileObjectDataResult)
		soap_element_result(soap, "ns1:FinalizeFileObjectDataResult");
	if (soap_out_string(soap, "ns1:FinalizeFileObjectDataResult", -1, &(a->_ns1__FinalizeFileObjectDataResponse::FinalizeFileObjectDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__FinalizeFileObjectDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__FinalizeFileObjectDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__FinalizeFileObjectDataResponse * SOAP_FMAC4 soap_in__ns1__FinalizeFileObjectDataResponse(struct soap *soap, const char *tag, _ns1__FinalizeFileObjectDataResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__FinalizeFileObjectDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__FinalizeFileObjectDataResponse, sizeof(_ns1__FinalizeFileObjectDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__FinalizeFileObjectDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__FinalizeFileObjectDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_FinalizeFileObjectDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_FinalizeFileObjectDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:FinalizeFileObjectDataResult", &(a->_ns1__FinalizeFileObjectDataResponse::FinalizeFileObjectDataResult), "xsd:string"))
				{	soap_flag_FinalizeFileObjectDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:FinalizeFileObjectDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__FinalizeFileObjectDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__FinalizeFileObjectDataResponse, 0, sizeof(_ns1__FinalizeFileObjectDataResponse), 0, soap_copy__ns1__FinalizeFileObjectDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__FinalizeFileObjectDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__FinalizeFileObjectDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:FinalizeFileObjectDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__FinalizeFileObjectDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__FinalizeFileObjectDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__FinalizeFileObjectDataResponse * SOAP_FMAC4 soap_get__ns1__FinalizeFileObjectDataResponse(struct soap *soap, _ns1__FinalizeFileObjectDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__FinalizeFileObjectDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__FinalizeFileObjectDataResponse * SOAP_FMAC2 soap_instantiate__ns1__FinalizeFileObjectDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__FinalizeFileObjectDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__FinalizeFileObjectDataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__FinalizeFileObjectDataResponse);
		if (size)
			*size = sizeof(_ns1__FinalizeFileObjectDataResponse);
		((_ns1__FinalizeFileObjectDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__FinalizeFileObjectDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__FinalizeFileObjectDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__FinalizeFileObjectDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__FinalizeFileObjectDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__FinalizeFileObjectDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__FinalizeFileObjectDataResponse %p -> %p\n", q, p));
	*(_ns1__FinalizeFileObjectDataResponse*)p = *(_ns1__FinalizeFileObjectDataResponse*)q;
}

void _ns1__FinalizeFileObjectData::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__FinalizeFileObjectData::sessionId);
	soap_default_int(soap, &this->_ns1__FinalizeFileObjectData::idFileObj);
	soap_default_int(soap, &this->_ns1__FinalizeFileObjectData::file_USCORElength);
	soap_default_bool(soap, &this->_ns1__FinalizeFileObjectData::isOverriteFile);
	/* transient soap skipped */
}

void _ns1__FinalizeFileObjectData::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__FinalizeFileObjectData::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__FinalizeFileObjectData::idFileObj, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__FinalizeFileObjectData::file_USCORElength, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__FinalizeFileObjectData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__FinalizeFileObjectData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FinalizeFileObjectData(struct soap *soap, const char *tag, int id, const _ns1__FinalizeFileObjectData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__FinalizeFileObjectData), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__FinalizeFileObjectData::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:idFileObj", -1, &(a->_ns1__FinalizeFileObjectData::idFileObj), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:file_length", -1, &(a->_ns1__FinalizeFileObjectData::file_USCORElength), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:isOverriteFile", -1, &(a->_ns1__FinalizeFileObjectData::isOverriteFile), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__FinalizeFileObjectData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__FinalizeFileObjectData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__FinalizeFileObjectData * SOAP_FMAC4 soap_in__ns1__FinalizeFileObjectData(struct soap *soap, const char *tag, _ns1__FinalizeFileObjectData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__FinalizeFileObjectData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__FinalizeFileObjectData, sizeof(_ns1__FinalizeFileObjectData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__FinalizeFileObjectData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__FinalizeFileObjectData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	size_t soap_flag_file_USCORElength1 = 1;
	size_t soap_flag_isOverriteFile1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__FinalizeFileObjectData::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:idFileObj", &(a->_ns1__FinalizeFileObjectData::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			if (soap_flag_file_USCORElength1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:file_length", &(a->_ns1__FinalizeFileObjectData::file_USCORElength), "xsd:int"))
				{	soap_flag_file_USCORElength1--;
					continue;
				}
			if (soap_flag_isOverriteFile1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:isOverriteFile", &(a->_ns1__FinalizeFileObjectData::isOverriteFile), "xsd:boolean"))
				{	soap_flag_isOverriteFile1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__FinalizeFileObjectData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__FinalizeFileObjectData, 0, sizeof(_ns1__FinalizeFileObjectData), 0, soap_copy__ns1__FinalizeFileObjectData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0 || soap_flag_file_USCORElength1 > 0 || soap_flag_isOverriteFile1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__FinalizeFileObjectData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__FinalizeFileObjectData);
	if (this->soap_out(soap, tag?tag:"ns1:FinalizeFileObjectData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__FinalizeFileObjectData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__FinalizeFileObjectData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__FinalizeFileObjectData * SOAP_FMAC4 soap_get__ns1__FinalizeFileObjectData(struct soap *soap, _ns1__FinalizeFileObjectData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__FinalizeFileObjectData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__FinalizeFileObjectData * SOAP_FMAC2 soap_instantiate__ns1__FinalizeFileObjectData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__FinalizeFileObjectData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__FinalizeFileObjectData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__FinalizeFileObjectData);
		if (size)
			*size = sizeof(_ns1__FinalizeFileObjectData);
		((_ns1__FinalizeFileObjectData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__FinalizeFileObjectData, n);
		if (size)
			*size = n * sizeof(_ns1__FinalizeFileObjectData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__FinalizeFileObjectData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__FinalizeFileObjectData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__FinalizeFileObjectData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__FinalizeFileObjectData %p -> %p\n", q, p));
	*(_ns1__FinalizeFileObjectData*)p = *(_ns1__FinalizeFileObjectData*)q;
}

void _ns1__UploadFileObjectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__UploadFileObjectResponse::UploadFileObjectResult);
	/* transient soap skipped */
}

void _ns1__UploadFileObjectResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__UploadFileObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__UploadFileObjectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadFileObjectResponse(struct soap *soap, const char *tag, int id, const _ns1__UploadFileObjectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__UploadFileObjectResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:UploadFileObjectResult");
	if (soap_out_bool(soap, "ns1:UploadFileObjectResult", -1, &(a->_ns1__UploadFileObjectResponse::UploadFileObjectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__UploadFileObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__UploadFileObjectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__UploadFileObjectResponse * SOAP_FMAC4 soap_in__ns1__UploadFileObjectResponse(struct soap *soap, const char *tag, _ns1__UploadFileObjectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__UploadFileObjectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__UploadFileObjectResponse, sizeof(_ns1__UploadFileObjectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__UploadFileObjectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__UploadFileObjectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_UploadFileObjectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UploadFileObjectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:UploadFileObjectResult", &(a->_ns1__UploadFileObjectResponse::UploadFileObjectResult), "xsd:boolean"))
				{	soap_flag_UploadFileObjectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:UploadFileObjectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__UploadFileObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__UploadFileObjectResponse, 0, sizeof(_ns1__UploadFileObjectResponse), 0, soap_copy__ns1__UploadFileObjectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_UploadFileObjectResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__UploadFileObjectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__UploadFileObjectResponse);
	if (this->soap_out(soap, tag?tag:"ns1:UploadFileObjectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__UploadFileObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__UploadFileObjectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__UploadFileObjectResponse * SOAP_FMAC4 soap_get__ns1__UploadFileObjectResponse(struct soap *soap, _ns1__UploadFileObjectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__UploadFileObjectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__UploadFileObjectResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadFileObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__UploadFileObjectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__UploadFileObjectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__UploadFileObjectResponse);
		if (size)
			*size = sizeof(_ns1__UploadFileObjectResponse);
		((_ns1__UploadFileObjectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__UploadFileObjectResponse, n);
		if (size)
			*size = n * sizeof(_ns1__UploadFileObjectResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__UploadFileObjectResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__UploadFileObjectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadFileObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__UploadFileObjectResponse %p -> %p\n", q, p));
	*(_ns1__UploadFileObjectResponse*)p = *(_ns1__UploadFileObjectResponse*)q;
}

void _ns1__UploadFileObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__UploadFileObject::sessionId);
	soap_default_int(soap, &this->_ns1__UploadFileObject::idFileObj);
	soap_default_int(soap, &this->_ns1__UploadFileObject::startposition);
	this->_ns1__UploadFileObject::byteArr = NULL;
	soap_default_bool(soap, &this->_ns1__UploadFileObject::compressed);
	/* transient soap skipped */
}

void _ns1__UploadFileObject::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__UploadFileObject::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__UploadFileObject::idFileObj, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__UploadFileObject::startposition, SOAP_TYPE_int);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__UploadFileObject::byteArr);
	/* transient soap skipped */
#endif
}

int _ns1__UploadFileObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__UploadFileObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadFileObject(struct soap *soap, const char *tag, int id, const _ns1__UploadFileObject *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__UploadFileObject), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__UploadFileObject::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:idFileObj", -1, &(a->_ns1__UploadFileObject::idFileObj), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:startposition", -1, &(a->_ns1__UploadFileObject::startposition), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:byteArr", -1, &(a->_ns1__UploadFileObject::byteArr), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:compressed", -1, &(a->_ns1__UploadFileObject::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__UploadFileObject::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__UploadFileObject(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__UploadFileObject * SOAP_FMAC4 soap_in__ns1__UploadFileObject(struct soap *soap, const char *tag, _ns1__UploadFileObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__UploadFileObject *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__UploadFileObject, sizeof(_ns1__UploadFileObject), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__UploadFileObject)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__UploadFileObject *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	size_t soap_flag_startposition1 = 1;
	size_t soap_flag_byteArr1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__UploadFileObject::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:idFileObj", &(a->_ns1__UploadFileObject::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			if (soap_flag_startposition1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:startposition", &(a->_ns1__UploadFileObject::startposition), "xsd:int"))
				{	soap_flag_startposition1--;
					continue;
				}
			if (soap_flag_byteArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:byteArr", &(a->_ns1__UploadFileObject::byteArr), "xsd:base64Binary"))
				{	soap_flag_byteArr1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:compressed", &(a->_ns1__UploadFileObject::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__UploadFileObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__UploadFileObject, 0, sizeof(_ns1__UploadFileObject), 0, soap_copy__ns1__UploadFileObject);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0 || soap_flag_startposition1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__UploadFileObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__UploadFileObject);
	if (this->soap_out(soap, tag?tag:"ns1:UploadFileObject", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__UploadFileObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__UploadFileObject(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__UploadFileObject * SOAP_FMAC4 soap_get__ns1__UploadFileObject(struct soap *soap, _ns1__UploadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__UploadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__UploadFileObject * SOAP_FMAC2 soap_instantiate__ns1__UploadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__UploadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__UploadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__UploadFileObject);
		if (size)
			*size = sizeof(_ns1__UploadFileObject);
		((_ns1__UploadFileObject*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__UploadFileObject, n);
		if (size)
			*size = n * sizeof(_ns1__UploadFileObject);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__UploadFileObject*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__UploadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__UploadFileObject %p -> %p\n", q, p));
	*(_ns1__UploadFileObject*)p = *(_ns1__UploadFileObject*)q;
}

void _ns1__DownloadFileByIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DownloadFileByIdResponse::DownloadFileByIdResult = NULL;
	/* transient soap skipped */
}

void _ns1__DownloadFileByIdResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__DownloadFileByIdResponse::DownloadFileByIdResult);
	/* transient soap skipped */
#endif
}

int _ns1__DownloadFileByIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadFileByIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadFileByIdResponse(struct soap *soap, const char *tag, int id, const _ns1__DownloadFileByIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadFileByIdResponse), type))
		return soap->error;
	if (a->DownloadFileByIdResult)
		soap_element_result(soap, "ns1:DownloadFileByIdResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:DownloadFileByIdResult", -1, &(a->_ns1__DownloadFileByIdResponse::DownloadFileByIdResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadFileByIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadFileByIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadFileByIdResponse * SOAP_FMAC4 soap_in__ns1__DownloadFileByIdResponse(struct soap *soap, const char *tag, _ns1__DownloadFileByIdResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadFileByIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadFileByIdResponse, sizeof(_ns1__DownloadFileByIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadFileByIdResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadFileByIdResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DownloadFileByIdResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadFileByIdResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:DownloadFileByIdResult", &(a->_ns1__DownloadFileByIdResponse::DownloadFileByIdResult), "xsd:base64Binary"))
				{	soap_flag_DownloadFileByIdResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DownloadFileByIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadFileByIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadFileByIdResponse, 0, sizeof(_ns1__DownloadFileByIdResponse), 0, soap_copy__ns1__DownloadFileByIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__DownloadFileByIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadFileByIdResponse);
	if (this->soap_out(soap, tag?tag:"ns1:DownloadFileByIdResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DownloadFileByIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadFileByIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadFileByIdResponse * SOAP_FMAC4 soap_get__ns1__DownloadFileByIdResponse(struct soap *soap, _ns1__DownloadFileByIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadFileByIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DownloadFileByIdResponse * SOAP_FMAC2 soap_instantiate__ns1__DownloadFileByIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadFileByIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadFileByIdResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DownloadFileByIdResponse);
		if (size)
			*size = sizeof(_ns1__DownloadFileByIdResponse);
		((_ns1__DownloadFileByIdResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DownloadFileByIdResponse, n);
		if (size)
			*size = n * sizeof(_ns1__DownloadFileByIdResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DownloadFileByIdResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DownloadFileByIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadFileByIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadFileByIdResponse %p -> %p\n", q, p));
	*(_ns1__DownloadFileByIdResponse*)p = *(_ns1__DownloadFileByIdResponse*)q;
}

void _ns1__DownloadFileById::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__DownloadFileById::sessionId);
	soap_default_string(soap, &this->_ns1__DownloadFileById::clsName);
	soap_default_int(soap, &this->_ns1__DownloadFileById::fileId);
	/* transient soap skipped */
}

void _ns1__DownloadFileById::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__DownloadFileById::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__DownloadFileById::clsName);
	soap_embedded(soap, &this->_ns1__DownloadFileById::fileId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__DownloadFileById::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadFileById(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadFileById(struct soap *soap, const char *tag, int id, const _ns1__DownloadFileById *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadFileById), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__DownloadFileById::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__DownloadFileById::clsName), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:fileId", -1, &(a->_ns1__DownloadFileById::fileId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadFileById::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadFileById(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadFileById * SOAP_FMAC4 soap_in__ns1__DownloadFileById(struct soap *soap, const char *tag, _ns1__DownloadFileById *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadFileById *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadFileById, sizeof(_ns1__DownloadFileById), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadFileById)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadFileById *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_fileId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__DownloadFileById::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__DownloadFileById::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_fileId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:fileId", &(a->_ns1__DownloadFileById::fileId), "xsd:int"))
				{	soap_flag_fileId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadFileById *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadFileById, 0, sizeof(_ns1__DownloadFileById), 0, soap_copy__ns1__DownloadFileById);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_fileId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DownloadFileById::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadFileById);
	if (this->soap_out(soap, tag?tag:"ns1:DownloadFileById", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DownloadFileById::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadFileById(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadFileById * SOAP_FMAC4 soap_get__ns1__DownloadFileById(struct soap *soap, _ns1__DownloadFileById *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadFileById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DownloadFileById * SOAP_FMAC2 soap_instantiate__ns1__DownloadFileById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadFileById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadFileById, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DownloadFileById);
		if (size)
			*size = sizeof(_ns1__DownloadFileById);
		((_ns1__DownloadFileById*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DownloadFileById, n);
		if (size)
			*size = n * sizeof(_ns1__DownloadFileById);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DownloadFileById*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DownloadFileById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadFileById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadFileById %p -> %p\n", q, p));
	*(_ns1__DownloadFileById*)p = *(_ns1__DownloadFileById*)q;
}

void _ns1__DeleteObjectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__DeleteObjectResponse::DeleteObjectResult);
	/* transient soap skipped */
}

void _ns1__DeleteObjectResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__DeleteObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DeleteObjectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteObjectResponse(struct soap *soap, const char *tag, int id, const _ns1__DeleteObjectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DeleteObjectResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:DeleteObjectResult");
	if (soap_out_bool(soap, "ns1:DeleteObjectResult", -1, &(a->_ns1__DeleteObjectResponse::DeleteObjectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DeleteObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DeleteObjectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DeleteObjectResponse * SOAP_FMAC4 soap_in__ns1__DeleteObjectResponse(struct soap *soap, const char *tag, _ns1__DeleteObjectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DeleteObjectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DeleteObjectResponse, sizeof(_ns1__DeleteObjectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DeleteObjectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DeleteObjectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeleteObjectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeleteObjectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:DeleteObjectResult", &(a->_ns1__DeleteObjectResponse::DeleteObjectResult), "xsd:boolean"))
				{	soap_flag_DeleteObjectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DeleteObjectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DeleteObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DeleteObjectResponse, 0, sizeof(_ns1__DeleteObjectResponse), 0, soap_copy__ns1__DeleteObjectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeleteObjectResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DeleteObjectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DeleteObjectResponse);
	if (this->soap_out(soap, tag?tag:"ns1:DeleteObjectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DeleteObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DeleteObjectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DeleteObjectResponse * SOAP_FMAC4 soap_get__ns1__DeleteObjectResponse(struct soap *soap, _ns1__DeleteObjectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DeleteObjectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DeleteObjectResponse * SOAP_FMAC2 soap_instantiate__ns1__DeleteObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DeleteObjectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DeleteObjectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DeleteObjectResponse);
		if (size)
			*size = sizeof(_ns1__DeleteObjectResponse);
		((_ns1__DeleteObjectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DeleteObjectResponse, n);
		if (size)
			*size = n * sizeof(_ns1__DeleteObjectResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DeleteObjectResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DeleteObjectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DeleteObjectResponse %p -> %p\n", q, p));
	*(_ns1__DeleteObjectResponse*)p = *(_ns1__DeleteObjectResponse*)q;
}

void _ns1__DeleteObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__DeleteObject::sessionId);
	soap_default_string(soap, &this->_ns1__DeleteObject::clsName);
	soap_default_int(soap, &this->_ns1__DeleteObject::objId);
	/* transient soap skipped */
}

void _ns1__DeleteObject::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__DeleteObject::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__DeleteObject::clsName);
	soap_embedded(soap, &this->_ns1__DeleteObject::objId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__DeleteObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DeleteObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteObject(struct soap *soap, const char *tag, int id, const _ns1__DeleteObject *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DeleteObject), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__DeleteObject::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__DeleteObject::clsName), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:objId", -1, &(a->_ns1__DeleteObject::objId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DeleteObject::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DeleteObject(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DeleteObject * SOAP_FMAC4 soap_in__ns1__DeleteObject(struct soap *soap, const char *tag, _ns1__DeleteObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DeleteObject *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DeleteObject, sizeof(_ns1__DeleteObject), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DeleteObject)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DeleteObject *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_objId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__DeleteObject::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__DeleteObject::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_objId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:objId", &(a->_ns1__DeleteObject::objId), "xsd:int"))
				{	soap_flag_objId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DeleteObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DeleteObject, 0, sizeof(_ns1__DeleteObject), 0, soap_copy__ns1__DeleteObject);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_objId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DeleteObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DeleteObject);
	if (this->soap_out(soap, tag?tag:"ns1:DeleteObject", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DeleteObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DeleteObject(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DeleteObject * SOAP_FMAC4 soap_get__ns1__DeleteObject(struct soap *soap, _ns1__DeleteObject *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DeleteObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DeleteObject * SOAP_FMAC2 soap_instantiate__ns1__DeleteObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DeleteObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DeleteObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DeleteObject);
		if (size)
			*size = sizeof(_ns1__DeleteObject);
		((_ns1__DeleteObject*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DeleteObject, n);
		if (size)
			*size = n * sizeof(_ns1__DeleteObject);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DeleteObject*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DeleteObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DeleteObject %p -> %p\n", q, p));
	*(_ns1__DeleteObject*)p = *(_ns1__DeleteObject*)q;
}

void _ns1__SaveOrUpdateObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult);
	/* transient soap skipped */
}

void _ns1__SaveOrUpdateObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult);
	/* transient soap skipped */
#endif
}

int _ns1__SaveOrUpdateObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SaveOrUpdateObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, const char *tag, int id, const _ns1__SaveOrUpdateObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse), type))
		return soap->error;
	if (a->SaveOrUpdateObjectsResult)
		soap_element_result(soap, "ns1:SaveOrUpdateObjectsResult");
	if (soap_out_string(soap, "ns1:SaveOrUpdateObjectsResult", -1, &(a->_ns1__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SaveOrUpdateObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SaveOrUpdateObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjectsResponse * SOAP_FMAC4 soap_in__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, const char *tag, _ns1__SaveOrUpdateObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SaveOrUpdateObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse, sizeof(_ns1__SaveOrUpdateObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SaveOrUpdateObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SaveOrUpdateObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SaveOrUpdateObjectsResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:SaveOrUpdateObjectsResult", &(a->_ns1__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult), "xsd:string"))
				{	soap_flag_SaveOrUpdateObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SaveOrUpdateObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SaveOrUpdateObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse, 0, sizeof(_ns1__SaveOrUpdateObjectsResponse), 0, soap_copy__ns1__SaveOrUpdateObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SaveOrUpdateObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SaveOrUpdateObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SaveOrUpdateObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SaveOrUpdateObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjectsResponse * SOAP_FMAC4 soap_get__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, _ns1__SaveOrUpdateObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SaveOrUpdateObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SaveOrUpdateObjectsResponse * SOAP_FMAC2 soap_instantiate__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SaveOrUpdateObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SaveOrUpdateObjectsResponse);
		if (size)
			*size = sizeof(_ns1__SaveOrUpdateObjectsResponse);
		((_ns1__SaveOrUpdateObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__SaveOrUpdateObjectsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SaveOrUpdateObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SaveOrUpdateObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SaveOrUpdateObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SaveOrUpdateObjectsResponse %p -> %p\n", q, p));
	*(_ns1__SaveOrUpdateObjectsResponse*)p = *(_ns1__SaveOrUpdateObjectsResponse*)q;
}

void _ns1__SaveOrUpdateObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__SaveOrUpdateObjects::sessionId);
	soap_default_string(soap, &this->_ns1__SaveOrUpdateObjects::clsName);
	soap_default_string(soap, &this->_ns1__SaveOrUpdateObjects::xmlformat);
	this->_ns1__SaveOrUpdateObjects::byteArr = NULL;
	/* transient soap skipped */
}

void _ns1__SaveOrUpdateObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__SaveOrUpdateObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__SaveOrUpdateObjects::clsName);
	soap_serialize_string(soap, &this->_ns1__SaveOrUpdateObjects::xmlformat);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__SaveOrUpdateObjects::byteArr);
	/* transient soap skipped */
#endif
}

int _ns1__SaveOrUpdateObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SaveOrUpdateObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const _ns1__SaveOrUpdateObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SaveOrUpdateObjects), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__SaveOrUpdateObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__SaveOrUpdateObjects::clsName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:xmlformat", -1, &(a->_ns1__SaveOrUpdateObjects::xmlformat), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:byteArr", -1, &(a->_ns1__SaveOrUpdateObjects::byteArr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SaveOrUpdateObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SaveOrUpdateObjects(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjects * SOAP_FMAC4 soap_in__ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, _ns1__SaveOrUpdateObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SaveOrUpdateObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SaveOrUpdateObjects, sizeof(_ns1__SaveOrUpdateObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SaveOrUpdateObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SaveOrUpdateObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_xmlformat1 = 1;
	size_t soap_flag_byteArr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__SaveOrUpdateObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__SaveOrUpdateObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_xmlformat1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:xmlformat", &(a->_ns1__SaveOrUpdateObjects::xmlformat), "xsd:string"))
				{	soap_flag_xmlformat1--;
					continue;
				}
			if (soap_flag_byteArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:byteArr", &(a->_ns1__SaveOrUpdateObjects::byteArr), "xsd:base64Binary"))
				{	soap_flag_byteArr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SaveOrUpdateObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SaveOrUpdateObjects, 0, sizeof(_ns1__SaveOrUpdateObjects), 0, soap_copy__ns1__SaveOrUpdateObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__SaveOrUpdateObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SaveOrUpdateObjects);
	if (this->soap_out(soap, tag?tag:"ns1:SaveOrUpdateObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SaveOrUpdateObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SaveOrUpdateObjects(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjects * SOAP_FMAC4 soap_get__ns1__SaveOrUpdateObjects(struct soap *soap, _ns1__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate__ns1__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(_ns1__SaveOrUpdateObjects);
		((_ns1__SaveOrUpdateObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(_ns1__SaveOrUpdateObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SaveOrUpdateObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(_ns1__SaveOrUpdateObjects*)p = *(_ns1__SaveOrUpdateObjects*)q;
}

void _ns1__MatchTowerPartsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__MatchTowerPartsResponse::MatchTowerPartsResult);
	/* transient soap skipped */
}

void _ns1__MatchTowerPartsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__MatchTowerPartsResponse::MatchTowerPartsResult);
	/* transient soap skipped */
#endif
}

int _ns1__MatchTowerPartsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MatchTowerPartsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MatchTowerPartsResponse(struct soap *soap, const char *tag, int id, const _ns1__MatchTowerPartsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MatchTowerPartsResponse), type))
		return soap->error;
	if (a->MatchTowerPartsResult)
		soap_element_result(soap, "ns1:MatchTowerPartsResult");
	if (soap_out_string(soap, "ns1:MatchTowerPartsResult", -1, &(a->_ns1__MatchTowerPartsResponse::MatchTowerPartsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MatchTowerPartsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MatchTowerPartsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MatchTowerPartsResponse * SOAP_FMAC4 soap_in__ns1__MatchTowerPartsResponse(struct soap *soap, const char *tag, _ns1__MatchTowerPartsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MatchTowerPartsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MatchTowerPartsResponse, sizeof(_ns1__MatchTowerPartsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MatchTowerPartsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MatchTowerPartsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MatchTowerPartsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MatchTowerPartsResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:MatchTowerPartsResult", &(a->_ns1__MatchTowerPartsResponse::MatchTowerPartsResult), "xsd:string"))
				{	soap_flag_MatchTowerPartsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MatchTowerPartsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MatchTowerPartsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MatchTowerPartsResponse, 0, sizeof(_ns1__MatchTowerPartsResponse), 0, soap_copy__ns1__MatchTowerPartsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MatchTowerPartsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__MatchTowerPartsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MatchTowerPartsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MatchTowerPartsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MatchTowerPartsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MatchTowerPartsResponse * SOAP_FMAC4 soap_get__ns1__MatchTowerPartsResponse(struct soap *soap, _ns1__MatchTowerPartsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MatchTowerPartsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MatchTowerPartsResponse * SOAP_FMAC2 soap_instantiate__ns1__MatchTowerPartsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MatchTowerPartsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MatchTowerPartsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MatchTowerPartsResponse);
		if (size)
			*size = sizeof(_ns1__MatchTowerPartsResponse);
		((_ns1__MatchTowerPartsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MatchTowerPartsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MatchTowerPartsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MatchTowerPartsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MatchTowerPartsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MatchTowerPartsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MatchTowerPartsResponse %p -> %p\n", q, p));
	*(_ns1__MatchTowerPartsResponse*)p = *(_ns1__MatchTowerPartsResponse*)q;
}

void _ns1__MatchTowerParts::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__MatchTowerParts::sessionId);
	soap_default_string(soap, &this->_ns1__MatchTowerParts::xmlformat);
	this->_ns1__MatchTowerParts::byteArr = NULL;
	/* transient soap skipped */
}

void _ns1__MatchTowerParts::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__MatchTowerParts::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__MatchTowerParts::xmlformat);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__MatchTowerParts::byteArr);
	/* transient soap skipped */
#endif
}

int _ns1__MatchTowerParts::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MatchTowerParts(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MatchTowerParts(struct soap *soap, const char *tag, int id, const _ns1__MatchTowerParts *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MatchTowerParts), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__MatchTowerParts::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:xmlformat", -1, &(a->_ns1__MatchTowerParts::xmlformat), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:byteArr", -1, &(a->_ns1__MatchTowerParts::byteArr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MatchTowerParts::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MatchTowerParts(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MatchTowerParts * SOAP_FMAC4 soap_in__ns1__MatchTowerParts(struct soap *soap, const char *tag, _ns1__MatchTowerParts *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MatchTowerParts *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MatchTowerParts, sizeof(_ns1__MatchTowerParts), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MatchTowerParts)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MatchTowerParts *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_xmlformat1 = 1;
	size_t soap_flag_byteArr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__MatchTowerParts::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_xmlformat1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:xmlformat", &(a->_ns1__MatchTowerParts::xmlformat), "xsd:string"))
				{	soap_flag_xmlformat1--;
					continue;
				}
			if (soap_flag_byteArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:byteArr", &(a->_ns1__MatchTowerParts::byteArr), "xsd:base64Binary"))
				{	soap_flag_byteArr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MatchTowerParts *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MatchTowerParts, 0, sizeof(_ns1__MatchTowerParts), 0, soap_copy__ns1__MatchTowerParts);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MatchTowerParts::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__MatchTowerParts);
	if (this->soap_out(soap, tag?tag:"ns1:MatchTowerParts", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MatchTowerParts::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MatchTowerParts(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MatchTowerParts * SOAP_FMAC4 soap_get__ns1__MatchTowerParts(struct soap *soap, _ns1__MatchTowerParts *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MatchTowerParts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MatchTowerParts * SOAP_FMAC2 soap_instantiate__ns1__MatchTowerParts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MatchTowerParts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MatchTowerParts, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MatchTowerParts);
		if (size)
			*size = sizeof(_ns1__MatchTowerParts);
		((_ns1__MatchTowerParts*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MatchTowerParts, n);
		if (size)
			*size = n * sizeof(_ns1__MatchTowerParts);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MatchTowerParts*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MatchTowerParts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MatchTowerParts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MatchTowerParts %p -> %p\n", q, p));
	*(_ns1__MatchTowerParts*)p = *(_ns1__MatchTowerParts*)q;
}

void _ns1__GetTowerPartsLabelAndVersionSerialResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetTowerPartsLabelAndVersionSerialResponse::GetTowerPartsLabelAndVersionSerialResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetTowerPartsLabelAndVersionSerialResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__GetTowerPartsLabelAndVersionSerialResponse::GetTowerPartsLabelAndVersionSerialResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetTowerPartsLabelAndVersionSerialResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTowerPartsLabelAndVersionSerialResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, const char *tag, int id, const _ns1__GetTowerPartsLabelAndVersionSerialResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse), type))
		return soap->error;
	if (a->GetTowerPartsLabelAndVersionSerialResult)
		soap_element_result(soap, "ns1:GetTowerPartsLabelAndVersionSerialResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:GetTowerPartsLabelAndVersionSerialResult", -1, &(a->_ns1__GetTowerPartsLabelAndVersionSerialResponse::GetTowerPartsLabelAndVersionSerialResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetTowerPartsLabelAndVersionSerialResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTowerPartsLabelAndVersionSerialResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTowerPartsLabelAndVersionSerialResponse * SOAP_FMAC4 soap_in__ns1__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, const char *tag, _ns1__GetTowerPartsLabelAndVersionSerialResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetTowerPartsLabelAndVersionSerialResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse, sizeof(_ns1__GetTowerPartsLabelAndVersionSerialResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTowerPartsLabelAndVersionSerialResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetTowerPartsLabelAndVersionSerialResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTowerPartsLabelAndVersionSerialResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:GetTowerPartsLabelAndVersionSerialResult", &(a->_ns1__GetTowerPartsLabelAndVersionSerialResponse::GetTowerPartsLabelAndVersionSerialResult), "xsd:base64Binary"))
				{	soap_flag_GetTowerPartsLabelAndVersionSerialResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetTowerPartsLabelAndVersionSerialResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTowerPartsLabelAndVersionSerialResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse, 0, sizeof(_ns1__GetTowerPartsLabelAndVersionSerialResponse), 0, soap_copy__ns1__GetTowerPartsLabelAndVersionSerialResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetTowerPartsLabelAndVersionSerialResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetTowerPartsLabelAndVersionSerialResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetTowerPartsLabelAndVersionSerialResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTowerPartsLabelAndVersionSerialResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTowerPartsLabelAndVersionSerialResponse * SOAP_FMAC4 soap_get__ns1__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, _ns1__GetTowerPartsLabelAndVersionSerialResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTowerPartsLabelAndVersionSerialResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetTowerPartsLabelAndVersionSerialResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTowerPartsLabelAndVersionSerialResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerialResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetTowerPartsLabelAndVersionSerialResponse);
		if (size)
			*size = sizeof(_ns1__GetTowerPartsLabelAndVersionSerialResponse);
		((_ns1__GetTowerPartsLabelAndVersionSerialResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetTowerPartsLabelAndVersionSerialResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetTowerPartsLabelAndVersionSerialResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetTowerPartsLabelAndVersionSerialResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetTowerPartsLabelAndVersionSerialResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTowerPartsLabelAndVersionSerialResponse %p -> %p\n", q, p));
	*(_ns1__GetTowerPartsLabelAndVersionSerialResponse*)p = *(_ns1__GetTowerPartsLabelAndVersionSerialResponse*)q;
}

void _ns1__GetTowerPartsLabelAndVersionSerial::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__GetTowerPartsLabelAndVersionSerial::sessionId);
	soap_default_int(soap, &this->_ns1__GetTowerPartsLabelAndVersionSerial::towerTypeId);
	/* transient soap skipped */
}

void _ns1__GetTowerPartsLabelAndVersionSerial::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__GetTowerPartsLabelAndVersionSerial::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__GetTowerPartsLabelAndVersionSerial::towerTypeId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__GetTowerPartsLabelAndVersionSerial::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTowerPartsLabelAndVersionSerial(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, int id, const _ns1__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__GetTowerPartsLabelAndVersionSerial::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:towerTypeId", -1, &(a->_ns1__GetTowerPartsLabelAndVersionSerial::towerTypeId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetTowerPartsLabelAndVersionSerial::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTowerPartsLabelAndVersionSerial(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_in__ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, _ns1__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetTowerPartsLabelAndVersionSerial *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial, sizeof(_ns1__GetTowerPartsLabelAndVersionSerial), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTowerPartsLabelAndVersionSerial *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_towerTypeId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__GetTowerPartsLabelAndVersionSerial::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_towerTypeId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:towerTypeId", &(a->_ns1__GetTowerPartsLabelAndVersionSerial::towerTypeId), "xsd:int"))
				{	soap_flag_towerTypeId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTowerPartsLabelAndVersionSerial *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial, 0, sizeof(_ns1__GetTowerPartsLabelAndVersionSerial), 0, soap_copy__ns1__GetTowerPartsLabelAndVersionSerial);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_towerTypeId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetTowerPartsLabelAndVersionSerial::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial);
	if (this->soap_out(soap, tag?tag:"ns1:GetTowerPartsLabelAndVersionSerial", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetTowerPartsLabelAndVersionSerial::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTowerPartsLabelAndVersionSerial(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_get__ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, _ns1__GetTowerPartsLabelAndVersionSerial *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTowerPartsLabelAndVersionSerial(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC2 soap_instantiate__ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTowerPartsLabelAndVersionSerial(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetTowerPartsLabelAndVersionSerial);
		if (size)
			*size = sizeof(_ns1__GetTowerPartsLabelAndVersionSerial);
		((_ns1__GetTowerPartsLabelAndVersionSerial*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetTowerPartsLabelAndVersionSerial, n);
		if (size)
			*size = n * sizeof(_ns1__GetTowerPartsLabelAndVersionSerial);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetTowerPartsLabelAndVersionSerial*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetTowerPartsLabelAndVersionSerial*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTowerPartsLabelAndVersionSerial %p -> %p\n", q, p));
	*(_ns1__GetTowerPartsLabelAndVersionSerial*)p = *(_ns1__GetTowerPartsLabelAndVersionSerial*)q;
}

void _ns1__GetObjectsVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetObjectsVersionResponse::GetObjectsVersionResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetObjectsVersionResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfUnsignedInt(soap, &this->_ns1__GetObjectsVersionResponse::GetObjectsVersionResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetObjectsVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetObjectsVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetObjectsVersionResponse(struct soap *soap, const char *tag, int id, const _ns1__GetObjectsVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetObjectsVersionResponse), type))
		return soap->error;
	if (a->GetObjectsVersionResult)
		soap_element_result(soap, "ns1:GetObjectsVersionResult");
	if (soap_out_PointerTons1__ArrayOfUnsignedInt(soap, "ns1:GetObjectsVersionResult", -1, &(a->_ns1__GetObjectsVersionResponse::GetObjectsVersionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetObjectsVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetObjectsVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetObjectsVersionResponse * SOAP_FMAC4 soap_in__ns1__GetObjectsVersionResponse(struct soap *soap, const char *tag, _ns1__GetObjectsVersionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetObjectsVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetObjectsVersionResponse, sizeof(_ns1__GetObjectsVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetObjectsVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetObjectsVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetObjectsVersionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetObjectsVersionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfUnsignedInt(soap, "ns1:GetObjectsVersionResult", &(a->_ns1__GetObjectsVersionResponse::GetObjectsVersionResult), "ns1:ArrayOfUnsignedInt"))
				{	soap_flag_GetObjectsVersionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetObjectsVersionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetObjectsVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetObjectsVersionResponse, 0, sizeof(_ns1__GetObjectsVersionResponse), 0, soap_copy__ns1__GetObjectsVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetObjectsVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetObjectsVersionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetObjectsVersionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetObjectsVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetObjectsVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetObjectsVersionResponse * SOAP_FMAC4 soap_get__ns1__GetObjectsVersionResponse(struct soap *soap, _ns1__GetObjectsVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetObjectsVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetObjectsVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__GetObjectsVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetObjectsVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetObjectsVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetObjectsVersionResponse);
		if (size)
			*size = sizeof(_ns1__GetObjectsVersionResponse);
		((_ns1__GetObjectsVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetObjectsVersionResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetObjectsVersionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetObjectsVersionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetObjectsVersionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetObjectsVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetObjectsVersionResponse %p -> %p\n", q, p));
	*(_ns1__GetObjectsVersionResponse*)p = *(_ns1__GetObjectsVersionResponse*)q;
}

void _ns1__GetObjectsVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__GetObjectsVersion::sessionId);
	soap_default_string(soap, &this->_ns1__GetObjectsVersion::clsName);
	this->_ns1__GetObjectsVersion::idarr = NULL;
	/* transient soap skipped */
}

void _ns1__GetObjectsVersion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__GetObjectsVersion::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__GetObjectsVersion::clsName);
	soap_serialize_PointerTons1__ArrayOfInt(soap, &this->_ns1__GetObjectsVersion::idarr);
	/* transient soap skipped */
#endif
}

int _ns1__GetObjectsVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetObjectsVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetObjectsVersion(struct soap *soap, const char *tag, int id, const _ns1__GetObjectsVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetObjectsVersion), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__GetObjectsVersion::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__GetObjectsVersion::clsName), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfInt(soap, "ns1:idarr", -1, &(a->_ns1__GetObjectsVersion::idarr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetObjectsVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetObjectsVersion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetObjectsVersion * SOAP_FMAC4 soap_in__ns1__GetObjectsVersion(struct soap *soap, const char *tag, _ns1__GetObjectsVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetObjectsVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetObjectsVersion, sizeof(_ns1__GetObjectsVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetObjectsVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetObjectsVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_idarr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__GetObjectsVersion::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__GetObjectsVersion::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_idarr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfInt(soap, "ns1:idarr", &(a->_ns1__GetObjectsVersion::idarr), "ns1:ArrayOfInt"))
				{	soap_flag_idarr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetObjectsVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetObjectsVersion, 0, sizeof(_ns1__GetObjectsVersion), 0, soap_copy__ns1__GetObjectsVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetObjectsVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetObjectsVersion);
	if (this->soap_out(soap, tag?tag:"ns1:GetObjectsVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetObjectsVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetObjectsVersion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetObjectsVersion * SOAP_FMAC4 soap_get__ns1__GetObjectsVersion(struct soap *soap, _ns1__GetObjectsVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetObjectsVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetObjectsVersion * SOAP_FMAC2 soap_instantiate__ns1__GetObjectsVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetObjectsVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetObjectsVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetObjectsVersion);
		if (size)
			*size = sizeof(_ns1__GetObjectsVersion);
		((_ns1__GetObjectsVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetObjectsVersion, n);
		if (size)
			*size = n * sizeof(_ns1__GetObjectsVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetObjectsVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetObjectsVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetObjectsVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetObjectsVersion %p -> %p\n", q, p));
	*(_ns1__GetObjectsVersion*)p = *(_ns1__GetObjectsVersion*)q;
}

void _ns1__DownloadObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DownloadObjectsResponse::DownloadObjectsResult = NULL;
	/* transient soap skipped */
}

void _ns1__DownloadObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__DownloadObjectsResponse::DownloadObjectsResult);
	/* transient soap skipped */
#endif
}

int _ns1__DownloadObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadObjectsResponse(struct soap *soap, const char *tag, int id, const _ns1__DownloadObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadObjectsResponse), type))
		return soap->error;
	if (a->DownloadObjectsResult)
		soap_element_result(soap, "ns1:DownloadObjectsResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:DownloadObjectsResult", -1, &(a->_ns1__DownloadObjectsResponse::DownloadObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadObjectsResponse * SOAP_FMAC4 soap_in__ns1__DownloadObjectsResponse(struct soap *soap, const char *tag, _ns1__DownloadObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadObjectsResponse, sizeof(_ns1__DownloadObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DownloadObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadObjectsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:DownloadObjectsResult", &(a->_ns1__DownloadObjectsResponse::DownloadObjectsResult), "xsd:base64Binary"))
				{	soap_flag_DownloadObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DownloadObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadObjectsResponse, 0, sizeof(_ns1__DownloadObjectsResponse), 0, soap_copy__ns1__DownloadObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__DownloadObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadObjectsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:DownloadObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DownloadObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadObjectsResponse * SOAP_FMAC4 soap_get__ns1__DownloadObjectsResponse(struct soap *soap, _ns1__DownloadObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DownloadObjectsResponse * SOAP_FMAC2 soap_instantiate__ns1__DownloadObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DownloadObjectsResponse);
		if (size)
			*size = sizeof(_ns1__DownloadObjectsResponse);
		((_ns1__DownloadObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DownloadObjectsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__DownloadObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DownloadObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DownloadObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadObjectsResponse %p -> %p\n", q, p));
	*(_ns1__DownloadObjectsResponse*)p = *(_ns1__DownloadObjectsResponse*)q;
}

void _ns1__DownloadObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__DownloadObjects::sessionId);
	soap_default_string(soap, &this->_ns1__DownloadObjects::clsName);
	this->_ns1__DownloadObjects::idarr = NULL;
	soap_default_unsignedInt(soap, &this->_ns1__DownloadObjects::serialize);
	/* transient soap skipped */
}

void _ns1__DownloadObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__DownloadObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__DownloadObjects::clsName);
	soap_serialize_PointerTons1__ArrayOfInt(soap, &this->_ns1__DownloadObjects::idarr);
	soap_embedded(soap, &this->_ns1__DownloadObjects::serialize, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _ns1__DownloadObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadObjects(struct soap *soap, const char *tag, int id, const _ns1__DownloadObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadObjects), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__DownloadObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__DownloadObjects::clsName), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfInt(soap, "ns1:idarr", -1, &(a->_ns1__DownloadObjects::idarr), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:serialize", -1, &(a->_ns1__DownloadObjects::serialize), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadObjects(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadObjects * SOAP_FMAC4 soap_in__ns1__DownloadObjects(struct soap *soap, const char *tag, _ns1__DownloadObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadObjects, sizeof(_ns1__DownloadObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_idarr1 = 1;
	size_t soap_flag_serialize1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__DownloadObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__DownloadObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_idarr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfInt(soap, "ns1:idarr", &(a->_ns1__DownloadObjects::idarr), "ns1:ArrayOfInt"))
				{	soap_flag_idarr1--;
					continue;
				}
			if (soap_flag_serialize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:serialize", &(a->_ns1__DownloadObjects::serialize), "xsd:unsignedInt"))
				{	soap_flag_serialize1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadObjects, 0, sizeof(_ns1__DownloadObjects), 0, soap_copy__ns1__DownloadObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_serialize1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DownloadObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadObjects);
	if (this->soap_out(soap, tag?tag:"ns1:DownloadObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DownloadObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadObjects(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadObjects * SOAP_FMAC4 soap_get__ns1__DownloadObjects(struct soap *soap, _ns1__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DownloadObjects * SOAP_FMAC2 soap_instantiate__ns1__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DownloadObjects);
		if (size)
			*size = sizeof(_ns1__DownloadObjects);
		((_ns1__DownloadObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DownloadObjects, n);
		if (size)
			*size = n * sizeof(_ns1__DownloadObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DownloadObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadObjects %p -> %p\n", q, p));
	*(_ns1__DownloadObjects*)p = *(_ns1__DownloadObjects*)q;
}

void _ns1__QueryObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__QueryObjectsResponse::QueryObjectsResult = NULL;
	/* transient soap skipped */
}

void _ns1__QueryObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__QueryObjectsResponse::QueryObjectsResult);
	/* transient soap skipped */
#endif
}

int _ns1__QueryObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__QueryObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryObjectsResponse(struct soap *soap, const char *tag, int id, const _ns1__QueryObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__QueryObjectsResponse), type))
		return soap->error;
	if (a->QueryObjectsResult)
		soap_element_result(soap, "ns1:QueryObjectsResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:QueryObjectsResult", -1, &(a->_ns1__QueryObjectsResponse::QueryObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__QueryObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__QueryObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__QueryObjectsResponse * SOAP_FMAC4 soap_in__ns1__QueryObjectsResponse(struct soap *soap, const char *tag, _ns1__QueryObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__QueryObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__QueryObjectsResponse, sizeof(_ns1__QueryObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__QueryObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__QueryObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_QueryObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_QueryObjectsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:QueryObjectsResult", &(a->_ns1__QueryObjectsResponse::QueryObjectsResult), "xsd:base64Binary"))
				{	soap_flag_QueryObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:QueryObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__QueryObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__QueryObjectsResponse, 0, sizeof(_ns1__QueryObjectsResponse), 0, soap_copy__ns1__QueryObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__QueryObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__QueryObjectsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:QueryObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__QueryObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__QueryObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__QueryObjectsResponse * SOAP_FMAC4 soap_get__ns1__QueryObjectsResponse(struct soap *soap, _ns1__QueryObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__QueryObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__QueryObjectsResponse * SOAP_FMAC2 soap_instantiate__ns1__QueryObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__QueryObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__QueryObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__QueryObjectsResponse);
		if (size)
			*size = sizeof(_ns1__QueryObjectsResponse);
		((_ns1__QueryObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__QueryObjectsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__QueryObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__QueryObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__QueryObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__QueryObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__QueryObjectsResponse %p -> %p\n", q, p));
	*(_ns1__QueryObjectsResponse*)p = *(_ns1__QueryObjectsResponse*)q;
}

void _ns1__QueryObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__QueryObjects::sessionId);
	soap_default_string(soap, &this->_ns1__QueryObjects::clsName);
	soap_default_string(soap, &this->_ns1__QueryObjects::xmlScope);
	/* transient soap skipped */
}

void _ns1__QueryObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__QueryObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__QueryObjects::clsName);
	soap_serialize_string(soap, &this->_ns1__QueryObjects::xmlScope);
	/* transient soap skipped */
#endif
}

int _ns1__QueryObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__QueryObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryObjects(struct soap *soap, const char *tag, int id, const _ns1__QueryObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__QueryObjects), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__QueryObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__QueryObjects::clsName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:xmlScope", -1, &(a->_ns1__QueryObjects::xmlScope), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__QueryObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__QueryObjects(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__QueryObjects * SOAP_FMAC4 soap_in__ns1__QueryObjects(struct soap *soap, const char *tag, _ns1__QueryObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__QueryObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__QueryObjects, sizeof(_ns1__QueryObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__QueryObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__QueryObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_xmlScope1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__QueryObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__QueryObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_xmlScope1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:xmlScope", &(a->_ns1__QueryObjects::xmlScope), "xsd:string"))
				{	soap_flag_xmlScope1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__QueryObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__QueryObjects, 0, sizeof(_ns1__QueryObjects), 0, soap_copy__ns1__QueryObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__QueryObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__QueryObjects);
	if (this->soap_out(soap, tag?tag:"ns1:QueryObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__QueryObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__QueryObjects(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__QueryObjects * SOAP_FMAC4 soap_get__ns1__QueryObjects(struct soap *soap, _ns1__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__QueryObjects * SOAP_FMAC2 soap_instantiate__ns1__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__QueryObjects);
		if (size)
			*size = sizeof(_ns1__QueryObjects);
		((_ns1__QueryObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__QueryObjects, n);
		if (size)
			*size = n * sizeof(_ns1__QueryObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__QueryObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__QueryObjects %p -> %p\n", q, p));
	*(_ns1__QueryObjects*)p = *(_ns1__QueryObjects*)q;
}

void _ns1__logoutUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__logoutUserResponse::logoutUserResult);
	/* transient soap skipped */
}

void _ns1__logoutUserResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__logoutUserResponse::logoutUserResult, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__logoutUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__logoutUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__logoutUserResponse(struct soap *soap, const char *tag, int id, const _ns1__logoutUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__logoutUserResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:logoutUserResult");
	if (soap_out_int(soap, "ns1:logoutUserResult", -1, &(a->_ns1__logoutUserResponse::logoutUserResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__logoutUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__logoutUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__logoutUserResponse * SOAP_FMAC4 soap_in__ns1__logoutUserResponse(struct soap *soap, const char *tag, _ns1__logoutUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__logoutUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__logoutUserResponse, sizeof(_ns1__logoutUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__logoutUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__logoutUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_logoutUserResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_logoutUserResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:logoutUserResult", &(a->_ns1__logoutUserResponse::logoutUserResult), "xsd:int"))
				{	soap_flag_logoutUserResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:logoutUserResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__logoutUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__logoutUserResponse, 0, sizeof(_ns1__logoutUserResponse), 0, soap_copy__ns1__logoutUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logoutUserResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__logoutUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__logoutUserResponse);
	if (this->soap_out(soap, tag?tag:"ns1:logoutUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__logoutUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__logoutUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__logoutUserResponse * SOAP_FMAC4 soap_get__ns1__logoutUserResponse(struct soap *soap, _ns1__logoutUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__logoutUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__logoutUserResponse * SOAP_FMAC2 soap_instantiate__ns1__logoutUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__logoutUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__logoutUserResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__logoutUserResponse);
		if (size)
			*size = sizeof(_ns1__logoutUserResponse);
		((_ns1__logoutUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__logoutUserResponse, n);
		if (size)
			*size = n * sizeof(_ns1__logoutUserResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__logoutUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__logoutUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__logoutUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__logoutUserResponse %p -> %p\n", q, p));
	*(_ns1__logoutUserResponse*)p = *(_ns1__logoutUserResponse*)q;
}

void _ns1__logoutUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__logoutUser::sessionId);
	/* transient soap skipped */
}

void _ns1__logoutUser::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__logoutUser::sessionId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__logoutUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__logoutUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__logoutUser(struct soap *soap, const char *tag, int id, const _ns1__logoutUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__logoutUser), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__logoutUser::sessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__logoutUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__logoutUser(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__logoutUser * SOAP_FMAC4 soap_in__ns1__logoutUser(struct soap *soap, const char *tag, _ns1__logoutUser *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__logoutUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__logoutUser, sizeof(_ns1__logoutUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__logoutUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__logoutUser *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__logoutUser::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__logoutUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__logoutUser, 0, sizeof(_ns1__logoutUser), 0, soap_copy__ns1__logoutUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__logoutUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__logoutUser);
	if (this->soap_out(soap, tag?tag:"ns1:logoutUser", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__logoutUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__logoutUser(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__logoutUser * SOAP_FMAC4 soap_get__ns1__logoutUser(struct soap *soap, _ns1__logoutUser *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__logoutUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__logoutUser * SOAP_FMAC2 soap_instantiate__ns1__logoutUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__logoutUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__logoutUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__logoutUser);
		if (size)
			*size = sizeof(_ns1__logoutUser);
		((_ns1__logoutUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__logoutUser, n);
		if (size)
			*size = n * sizeof(_ns1__logoutUser);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__logoutUser*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__logoutUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__logoutUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__logoutUser %p -> %p\n", q, p));
	*(_ns1__logoutUser*)p = *(_ns1__logoutUser*)q;
}

void _ns1__loginUserByByteArrResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__loginUserByByteArrResponse::loginUserByByteArrResult);
	/* transient soap skipped */
}

void _ns1__loginUserByByteArrResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__loginUserByByteArrResponse::loginUserByByteArrResult, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__loginUserByByteArrResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__loginUserByByteArrResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loginUserByByteArrResponse(struct soap *soap, const char *tag, int id, const _ns1__loginUserByByteArrResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__loginUserByByteArrResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:loginUserByByteArrResult");
	if (soap_out_int(soap, "ns1:loginUserByByteArrResult", -1, &(a->_ns1__loginUserByByteArrResponse::loginUserByByteArrResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__loginUserByByteArrResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__loginUserByByteArrResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__loginUserByByteArrResponse * SOAP_FMAC4 soap_in__ns1__loginUserByByteArrResponse(struct soap *soap, const char *tag, _ns1__loginUserByByteArrResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__loginUserByByteArrResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__loginUserByByteArrResponse, sizeof(_ns1__loginUserByByteArrResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__loginUserByByteArrResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__loginUserByByteArrResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_loginUserByByteArrResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_loginUserByByteArrResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:loginUserByByteArrResult", &(a->_ns1__loginUserByByteArrResponse::loginUserByByteArrResult), "xsd:int"))
				{	soap_flag_loginUserByByteArrResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:loginUserByByteArrResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__loginUserByByteArrResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__loginUserByByteArrResponse, 0, sizeof(_ns1__loginUserByByteArrResponse), 0, soap_copy__ns1__loginUserByByteArrResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginUserByByteArrResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__loginUserByByteArrResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__loginUserByByteArrResponse);
	if (this->soap_out(soap, tag?tag:"ns1:loginUserByByteArrResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__loginUserByByteArrResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__loginUserByByteArrResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__loginUserByByteArrResponse * SOAP_FMAC4 soap_get__ns1__loginUserByByteArrResponse(struct soap *soap, _ns1__loginUserByByteArrResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__loginUserByByteArrResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__loginUserByByteArrResponse * SOAP_FMAC2 soap_instantiate__ns1__loginUserByByteArrResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__loginUserByByteArrResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__loginUserByByteArrResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__loginUserByByteArrResponse);
		if (size)
			*size = sizeof(_ns1__loginUserByByteArrResponse);
		((_ns1__loginUserByByteArrResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__loginUserByByteArrResponse, n);
		if (size)
			*size = n * sizeof(_ns1__loginUserByByteArrResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__loginUserByByteArrResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__loginUserByByteArrResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__loginUserByByteArrResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__loginUserByByteArrResponse %p -> %p\n", q, p));
	*(_ns1__loginUserByByteArrResponse*)p = *(_ns1__loginUserByByteArrResponse*)q;
}

void _ns1__loginUserByByteArr::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__loginUserByByteArr::userInfo = NULL;
	/* transient soap skipped */
}

void _ns1__loginUserByByteArr::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__loginUserByByteArr::userInfo);
	/* transient soap skipped */
#endif
}

int _ns1__loginUserByByteArr::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__loginUserByByteArr(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loginUserByByteArr(struct soap *soap, const char *tag, int id, const _ns1__loginUserByByteArr *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__loginUserByByteArr), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:userInfo", -1, &(a->_ns1__loginUserByByteArr::userInfo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__loginUserByByteArr::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__loginUserByByteArr(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__loginUserByByteArr * SOAP_FMAC4 soap_in__ns1__loginUserByByteArr(struct soap *soap, const char *tag, _ns1__loginUserByByteArr *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__loginUserByByteArr *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__loginUserByByteArr, sizeof(_ns1__loginUserByByteArr), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__loginUserByByteArr)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__loginUserByByteArr *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:userInfo", &(a->_ns1__loginUserByByteArr::userInfo), "xsd:base64Binary"))
				{	soap_flag_userInfo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__loginUserByByteArr *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__loginUserByByteArr, 0, sizeof(_ns1__loginUserByByteArr), 0, soap_copy__ns1__loginUserByByteArr);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__loginUserByByteArr::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__loginUserByByteArr);
	if (this->soap_out(soap, tag?tag:"ns1:loginUserByByteArr", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__loginUserByByteArr::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__loginUserByByteArr(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__loginUserByByteArr * SOAP_FMAC4 soap_get__ns1__loginUserByByteArr(struct soap *soap, _ns1__loginUserByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__loginUserByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__loginUserByByteArr * SOAP_FMAC2 soap_instantiate__ns1__loginUserByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__loginUserByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__loginUserByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__loginUserByByteArr);
		if (size)
			*size = sizeof(_ns1__loginUserByByteArr);
		((_ns1__loginUserByByteArr*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__loginUserByByteArr, n);
		if (size)
			*size = n * sizeof(_ns1__loginUserByByteArr);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__loginUserByByteArr*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__loginUserByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__loginUserByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__loginUserByByteArr %p -> %p\n", q, p));
	*(_ns1__loginUserByByteArr*)p = *(_ns1__loginUserByByteArr*)q;
}

void _ns1__loginUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__loginUserResponse::loginUserResult);
	/* transient soap skipped */
}

void _ns1__loginUserResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__loginUserResponse::loginUserResult, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__loginUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__loginUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loginUserResponse(struct soap *soap, const char *tag, int id, const _ns1__loginUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__loginUserResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:loginUserResult");
	if (soap_out_int(soap, "ns1:loginUserResult", -1, &(a->_ns1__loginUserResponse::loginUserResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__loginUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__loginUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__loginUserResponse * SOAP_FMAC4 soap_in__ns1__loginUserResponse(struct soap *soap, const char *tag, _ns1__loginUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__loginUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__loginUserResponse, sizeof(_ns1__loginUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__loginUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__loginUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_loginUserResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_loginUserResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:loginUserResult", &(a->_ns1__loginUserResponse::loginUserResult), "xsd:int"))
				{	soap_flag_loginUserResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:loginUserResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__loginUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__loginUserResponse, 0, sizeof(_ns1__loginUserResponse), 0, soap_copy__ns1__loginUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginUserResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__loginUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__loginUserResponse);
	if (this->soap_out(soap, tag?tag:"ns1:loginUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__loginUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__loginUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__loginUserResponse * SOAP_FMAC4 soap_get__ns1__loginUserResponse(struct soap *soap, _ns1__loginUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__loginUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__loginUserResponse * SOAP_FMAC2 soap_instantiate__ns1__loginUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__loginUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__loginUserResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__loginUserResponse);
		if (size)
			*size = sizeof(_ns1__loginUserResponse);
		((_ns1__loginUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__loginUserResponse, n);
		if (size)
			*size = n * sizeof(_ns1__loginUserResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__loginUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__loginUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__loginUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__loginUserResponse %p -> %p\n", q, p));
	*(_ns1__loginUserResponse*)p = *(_ns1__loginUserResponse*)q;
}

void _ns1__loginUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__loginUser::userName);
	soap_default_string(soap, &this->_ns1__loginUser::password);
	soap_default_string(soap, &this->_ns1__loginUser::fingerprint);
	/* transient soap skipped */
}

void _ns1__loginUser::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__loginUser::userName);
	soap_serialize_string(soap, &this->_ns1__loginUser::password);
	soap_serialize_string(soap, &this->_ns1__loginUser::fingerprint);
	/* transient soap skipped */
#endif
}

int _ns1__loginUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__loginUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loginUser(struct soap *soap, const char *tag, int id, const _ns1__loginUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__loginUser), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:userName", -1, &(a->_ns1__loginUser::userName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:password", -1, &(a->_ns1__loginUser::password), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:fingerprint", -1, &(a->_ns1__loginUser::fingerprint), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__loginUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__loginUser(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__loginUser * SOAP_FMAC4 soap_in__ns1__loginUser(struct soap *soap, const char *tag, _ns1__loginUser *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__loginUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__loginUser, sizeof(_ns1__loginUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__loginUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__loginUser *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_password1 = 1;
	size_t soap_flag_fingerprint1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:userName", &(a->_ns1__loginUser::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:password", &(a->_ns1__loginUser::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap_flag_fingerprint1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:fingerprint", &(a->_ns1__loginUser::fingerprint), "xsd:string"))
				{	soap_flag_fingerprint1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__loginUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__loginUser, 0, sizeof(_ns1__loginUser), 0, soap_copy__ns1__loginUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__loginUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__loginUser);
	if (this->soap_out(soap, tag?tag:"ns1:loginUser", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__loginUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__loginUser(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__loginUser * SOAP_FMAC4 soap_get__ns1__loginUser(struct soap *soap, _ns1__loginUser *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__loginUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__loginUser * SOAP_FMAC2 soap_instantiate__ns1__loginUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__loginUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__loginUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__loginUser);
		if (size)
			*size = sizeof(_ns1__loginUser);
		((_ns1__loginUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__loginUser, n);
		if (size)
			*size = n * sizeof(_ns1__loginUser);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__loginUser*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__loginUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__loginUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__loginUser %p -> %p\n", q, p));
	*(_ns1__loginUser*)p = *(_ns1__loginUser*)q;
}

void ns1__ArrayOfUnsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfUnsignedInt::__sizeunsignedInt = 0;
	this->ns1__ArrayOfUnsignedInt::unsignedInt = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfUnsignedInt::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfUnsignedInt::unsignedInt)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfUnsignedInt::__sizeunsignedInt; i++)
		{
			soap_embedded(soap, this->ns1__ArrayOfUnsignedInt::unsignedInt + i, SOAP_TYPE_unsignedInt);
		}
	}
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfUnsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfUnsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfUnsignedInt(struct soap *soap, const char *tag, int id, const ns1__ArrayOfUnsignedInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfUnsignedInt), type))
		return soap->error;
	if (a->ns1__ArrayOfUnsignedInt::unsignedInt)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfUnsignedInt::__sizeunsignedInt; i++)
			if (soap_out_unsignedInt(soap, "ns1:unsignedInt", -1, a->ns1__ArrayOfUnsignedInt::unsignedInt + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfUnsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfUnsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfUnsignedInt * SOAP_FMAC4 soap_in_ns1__ArrayOfUnsignedInt(struct soap *soap, const char *tag, ns1__ArrayOfUnsignedInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfUnsignedInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfUnsignedInt, sizeof(ns1__ArrayOfUnsignedInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfUnsignedInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfUnsignedInt *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_unsignedInt1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:unsignedInt", 1, NULL))
			{	if (a->ns1__ArrayOfUnsignedInt::unsignedInt == NULL)
				{	if (soap_blist_unsignedInt1 == NULL)
						soap_blist_unsignedInt1 = soap_new_block(soap);
					a->ns1__ArrayOfUnsignedInt::unsignedInt = (unsigned int *)soap_push_block(soap, soap_blist_unsignedInt1, sizeof(unsigned int));
					if (a->ns1__ArrayOfUnsignedInt::unsignedInt == NULL)
						return NULL;
					soap_default_unsignedInt(soap, a->ns1__ArrayOfUnsignedInt::unsignedInt);
				}
				soap_revert(soap);
				if (soap_in_unsignedInt(soap, "ns1:unsignedInt", a->ns1__ArrayOfUnsignedInt::unsignedInt, "xsd:unsignedInt"))
				{	a->ns1__ArrayOfUnsignedInt::__sizeunsignedInt++;
					a->ns1__ArrayOfUnsignedInt::unsignedInt = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfUnsignedInt::unsignedInt)
			soap_pop_block(soap, soap_blist_unsignedInt1);
		if (a->ns1__ArrayOfUnsignedInt::__sizeunsignedInt)
			a->ns1__ArrayOfUnsignedInt::unsignedInt = (unsigned int *)soap_save_block(soap, soap_blist_unsignedInt1, NULL, 1);
		else
		{	a->ns1__ArrayOfUnsignedInt::unsignedInt = NULL;
			if (soap_blist_unsignedInt1)
				soap_end_block(soap, soap_blist_unsignedInt1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfUnsignedInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfUnsignedInt, 0, sizeof(ns1__ArrayOfUnsignedInt), 0, soap_copy_ns1__ArrayOfUnsignedInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfUnsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfUnsignedInt);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfUnsignedInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfUnsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfUnsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfUnsignedInt * SOAP_FMAC4 soap_get_ns1__ArrayOfUnsignedInt(struct soap *soap, ns1__ArrayOfUnsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfUnsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfUnsignedInt * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfUnsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfUnsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfUnsignedInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfUnsignedInt);
		if (size)
			*size = sizeof(ns1__ArrayOfUnsignedInt);
		((ns1__ArrayOfUnsignedInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfUnsignedInt, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfUnsignedInt);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfUnsignedInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfUnsignedInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfUnsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfUnsignedInt %p -> %p\n", q, p));
	*(ns1__ArrayOfUnsignedInt*)p = *(ns1__ArrayOfUnsignedInt*)q;
}

void ns1__ArrayOfInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfInt::__sizeint_ = 0;
	this->ns1__ArrayOfInt::int_ = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfInt::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfInt::__sizeint_; i++)
		{
			soap_embedded(soap, this->ns1__ArrayOfInt::int_ + i, SOAP_TYPE_int);
		}
	}
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfInt(struct soap *soap, const char *tag, int id, const ns1__ArrayOfInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfInt), type))
		return soap->error;
	if (a->ns1__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfInt::__sizeint_; i++)
			if (soap_out_int(soap, "ns1:int", -1, a->ns1__ArrayOfInt::int_ + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfInt(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_in_ns1__ArrayOfInt(struct soap *soap, const char *tag, ns1__ArrayOfInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfInt, sizeof(ns1__ArrayOfInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfInt *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_int_1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:int", 1, NULL))
			{	if (a->ns1__ArrayOfInt::int_ == NULL)
				{	if (soap_blist_int_1 == NULL)
						soap_blist_int_1 = soap_new_block(soap);
					a->ns1__ArrayOfInt::int_ = (int *)soap_push_block(soap, soap_blist_int_1, sizeof(int));
					if (a->ns1__ArrayOfInt::int_ == NULL)
						return NULL;
					soap_default_int(soap, a->ns1__ArrayOfInt::int_);
				}
				soap_revert(soap);
				if (soap_in_int(soap, "ns1:int", a->ns1__ArrayOfInt::int_, "xsd:int"))
				{	a->ns1__ArrayOfInt::__sizeint_++;
					a->ns1__ArrayOfInt::int_ = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfInt::int_)
			soap_pop_block(soap, soap_blist_int_1);
		if (a->ns1__ArrayOfInt::__sizeint_)
			a->ns1__ArrayOfInt::int_ = (int *)soap_save_block(soap, soap_blist_int_1, NULL, 1);
		else
		{	a->ns1__ArrayOfInt::int_ = NULL;
			if (soap_blist_int_1)
				soap_end_block(soap, soap_blist_int_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfInt, 0, sizeof(ns1__ArrayOfInt), 0, soap_copy_ns1__ArrayOfInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfInt);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfInt(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_get_ns1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfInt * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfInt);
		if (size)
			*size = sizeof(ns1__ArrayOfInt);
		((ns1__ArrayOfInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfInt, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfInt);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfInt %p -> %p\n", q, p));
	*(ns1__ArrayOfInt*)p = *(ns1__ArrayOfInt*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseFileObjectDataProvider_(struct soap *soap, struct __ns1__CloseFileObjectDataProvider_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseFileObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseFileObjectDataProvider_(struct soap *soap, const struct __ns1__CloseFileObjectDataProvider_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CloseFileObjectDataProvider(soap, &a->ns1__CloseFileObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseFileObjectDataProvider_(struct soap *soap, const char *tag, int id, const struct __ns1__CloseFileObjectDataProvider_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__CloseFileObjectDataProvider(soap, "ns1:CloseFileObjectDataProvider", -1, &a->ns1__CloseFileObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CloseFileObjectDataProvider_ * SOAP_FMAC4 soap_in___ns1__CloseFileObjectDataProvider_(struct soap *soap, const char *tag, struct __ns1__CloseFileObjectDataProvider_ *a, const char *type)
{
	size_t soap_flag_ns1__CloseFileObjectDataProvider = 1;
	short soap_flag;
	a = (struct __ns1__CloseFileObjectDataProvider_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CloseFileObjectDataProvider_, sizeof(struct __ns1__CloseFileObjectDataProvider_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CloseFileObjectDataProvider_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseFileObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CloseFileObjectDataProvider(soap, "ns1:CloseFileObjectDataProvider", &a->ns1__CloseFileObjectDataProvider, ""))
				{	soap_flag_ns1__CloseFileObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseFileObjectDataProvider_(struct soap *soap, const struct __ns1__CloseFileObjectDataProvider_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CloseFileObjectDataProvider_(soap, tag?tag:"-ns1:CloseFileObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CloseFileObjectDataProvider_ * SOAP_FMAC4 soap_get___ns1__CloseFileObjectDataProvider_(struct soap *soap, struct __ns1__CloseFileObjectDataProvider_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CloseFileObjectDataProvider_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CloseFileObjectDataProvider_ * SOAP_FMAC2 soap_instantiate___ns1__CloseFileObjectDataProvider_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CloseFileObjectDataProvider_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CloseFileObjectDataProvider_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CloseFileObjectDataProvider_);
		if (size)
			*size = sizeof(struct __ns1__CloseFileObjectDataProvider_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CloseFileObjectDataProvider_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CloseFileObjectDataProvider_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CloseFileObjectDataProvider_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CloseFileObjectDataProvider_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CloseFileObjectDataProvider_ %p -> %p\n", q, p));
	*(struct __ns1__CloseFileObjectDataProvider_*)p = *(struct __ns1__CloseFileObjectDataProvider_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownloadFileObject_(struct soap *soap, struct __ns1__DownloadFileObject_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadFileObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownloadFileObject_(struct soap *soap, const struct __ns1__DownloadFileObject_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadFileObject(soap, &a->ns1__DownloadFileObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownloadFileObject_(struct soap *soap, const char *tag, int id, const struct __ns1__DownloadFileObject_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DownloadFileObject(soap, "ns1:DownloadFileObject", -1, &a->ns1__DownloadFileObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadFileObject_ * SOAP_FMAC4 soap_in___ns1__DownloadFileObject_(struct soap *soap, const char *tag, struct __ns1__DownloadFileObject_ *a, const char *type)
{
	size_t soap_flag_ns1__DownloadFileObject = 1;
	short soap_flag;
	a = (struct __ns1__DownloadFileObject_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DownloadFileObject_, sizeof(struct __ns1__DownloadFileObject_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DownloadFileObject_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadFileObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadFileObject(soap, "ns1:DownloadFileObject", &a->ns1__DownloadFileObject, ""))
				{	soap_flag_ns1__DownloadFileObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownloadFileObject_(struct soap *soap, const struct __ns1__DownloadFileObject_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DownloadFileObject_(soap, tag?tag:"-ns1:DownloadFileObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadFileObject_ * SOAP_FMAC4 soap_get___ns1__DownloadFileObject_(struct soap *soap, struct __ns1__DownloadFileObject_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DownloadFileObject_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DownloadFileObject_ * SOAP_FMAC2 soap_instantiate___ns1__DownloadFileObject_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DownloadFileObject_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DownloadFileObject_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DownloadFileObject_);
		if (size)
			*size = sizeof(struct __ns1__DownloadFileObject_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DownloadFileObject_, n);
		if (size)
			*size = n * sizeof(struct __ns1__DownloadFileObject_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DownloadFileObject_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DownloadFileObject_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DownloadFileObject_ %p -> %p\n", q, p));
	*(struct __ns1__DownloadFileObject_*)p = *(struct __ns1__DownloadFileObject_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenServerObjectDataProvider_(struct soap *soap, struct __ns1__OpenServerObjectDataProvider_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenServerObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenServerObjectDataProvider_(struct soap *soap, const struct __ns1__OpenServerObjectDataProvider_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenServerObjectDataProvider(soap, &a->ns1__OpenServerObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenServerObjectDataProvider_(struct soap *soap, const char *tag, int id, const struct __ns1__OpenServerObjectDataProvider_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__OpenServerObjectDataProvider(soap, "ns1:OpenServerObjectDataProvider", -1, &a->ns1__OpenServerObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenServerObjectDataProvider_ * SOAP_FMAC4 soap_in___ns1__OpenServerObjectDataProvider_(struct soap *soap, const char *tag, struct __ns1__OpenServerObjectDataProvider_ *a, const char *type)
{
	size_t soap_flag_ns1__OpenServerObjectDataProvider = 1;
	short soap_flag;
	a = (struct __ns1__OpenServerObjectDataProvider_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OpenServerObjectDataProvider_, sizeof(struct __ns1__OpenServerObjectDataProvider_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OpenServerObjectDataProvider_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenServerObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenServerObjectDataProvider(soap, "ns1:OpenServerObjectDataProvider", &a->ns1__OpenServerObjectDataProvider, ""))
				{	soap_flag_ns1__OpenServerObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenServerObjectDataProvider_(struct soap *soap, const struct __ns1__OpenServerObjectDataProvider_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__OpenServerObjectDataProvider_(soap, tag?tag:"-ns1:OpenServerObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenServerObjectDataProvider_ * SOAP_FMAC4 soap_get___ns1__OpenServerObjectDataProvider_(struct soap *soap, struct __ns1__OpenServerObjectDataProvider_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OpenServerObjectDataProvider_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__OpenServerObjectDataProvider_ * SOAP_FMAC2 soap_instantiate___ns1__OpenServerObjectDataProvider_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OpenServerObjectDataProvider_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__OpenServerObjectDataProvider_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__OpenServerObjectDataProvider_);
		if (size)
			*size = sizeof(struct __ns1__OpenServerObjectDataProvider_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__OpenServerObjectDataProvider_, n);
		if (size)
			*size = n * sizeof(struct __ns1__OpenServerObjectDataProvider_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__OpenServerObjectDataProvider_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OpenServerObjectDataProvider_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__OpenServerObjectDataProvider_ %p -> %p\n", q, p));
	*(struct __ns1__OpenServerObjectDataProvider_*)p = *(struct __ns1__OpenServerObjectDataProvider_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenTapModelDataProvider_(struct soap *soap, struct __ns1__OpenTapModelDataProvider_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenTapModelDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenTapModelDataProvider_(struct soap *soap, const struct __ns1__OpenTapModelDataProvider_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenTapModelDataProvider(soap, &a->ns1__OpenTapModelDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenTapModelDataProvider_(struct soap *soap, const char *tag, int id, const struct __ns1__OpenTapModelDataProvider_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__OpenTapModelDataProvider(soap, "ns1:OpenTapModelDataProvider", -1, &a->ns1__OpenTapModelDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenTapModelDataProvider_ * SOAP_FMAC4 soap_in___ns1__OpenTapModelDataProvider_(struct soap *soap, const char *tag, struct __ns1__OpenTapModelDataProvider_ *a, const char *type)
{
	size_t soap_flag_ns1__OpenTapModelDataProvider = 1;
	short soap_flag;
	a = (struct __ns1__OpenTapModelDataProvider_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OpenTapModelDataProvider_, sizeof(struct __ns1__OpenTapModelDataProvider_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OpenTapModelDataProvider_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenTapModelDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenTapModelDataProvider(soap, "ns1:OpenTapModelDataProvider", &a->ns1__OpenTapModelDataProvider, ""))
				{	soap_flag_ns1__OpenTapModelDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenTapModelDataProvider_(struct soap *soap, const struct __ns1__OpenTapModelDataProvider_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__OpenTapModelDataProvider_(soap, tag?tag:"-ns1:OpenTapModelDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenTapModelDataProvider_ * SOAP_FMAC4 soap_get___ns1__OpenTapModelDataProvider_(struct soap *soap, struct __ns1__OpenTapModelDataProvider_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OpenTapModelDataProvider_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__OpenTapModelDataProvider_ * SOAP_FMAC2 soap_instantiate___ns1__OpenTapModelDataProvider_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OpenTapModelDataProvider_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__OpenTapModelDataProvider_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__OpenTapModelDataProvider_);
		if (size)
			*size = sizeof(struct __ns1__OpenTapModelDataProvider_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__OpenTapModelDataProvider_, n);
		if (size)
			*size = n * sizeof(struct __ns1__OpenTapModelDataProvider_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__OpenTapModelDataProvider_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OpenTapModelDataProvider_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__OpenTapModelDataProvider_ %p -> %p\n", q, p));
	*(struct __ns1__OpenTapModelDataProvider_*)p = *(struct __ns1__OpenTapModelDataProvider_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenFileObjectDataProvider_(struct soap *soap, struct __ns1__OpenFileObjectDataProvider_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenFileObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenFileObjectDataProvider_(struct soap *soap, const struct __ns1__OpenFileObjectDataProvider_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenFileObjectDataProvider(soap, &a->ns1__OpenFileObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenFileObjectDataProvider_(struct soap *soap, const char *tag, int id, const struct __ns1__OpenFileObjectDataProvider_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__OpenFileObjectDataProvider(soap, "ns1:OpenFileObjectDataProvider", -1, &a->ns1__OpenFileObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenFileObjectDataProvider_ * SOAP_FMAC4 soap_in___ns1__OpenFileObjectDataProvider_(struct soap *soap, const char *tag, struct __ns1__OpenFileObjectDataProvider_ *a, const char *type)
{
	size_t soap_flag_ns1__OpenFileObjectDataProvider = 1;
	short soap_flag;
	a = (struct __ns1__OpenFileObjectDataProvider_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OpenFileObjectDataProvider_, sizeof(struct __ns1__OpenFileObjectDataProvider_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OpenFileObjectDataProvider_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenFileObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenFileObjectDataProvider(soap, "ns1:OpenFileObjectDataProvider", &a->ns1__OpenFileObjectDataProvider, ""))
				{	soap_flag_ns1__OpenFileObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenFileObjectDataProvider_(struct soap *soap, const struct __ns1__OpenFileObjectDataProvider_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__OpenFileObjectDataProvider_(soap, tag?tag:"-ns1:OpenFileObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenFileObjectDataProvider_ * SOAP_FMAC4 soap_get___ns1__OpenFileObjectDataProvider_(struct soap *soap, struct __ns1__OpenFileObjectDataProvider_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OpenFileObjectDataProvider_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__OpenFileObjectDataProvider_ * SOAP_FMAC2 soap_instantiate___ns1__OpenFileObjectDataProvider_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OpenFileObjectDataProvider_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__OpenFileObjectDataProvider_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__OpenFileObjectDataProvider_);
		if (size)
			*size = sizeof(struct __ns1__OpenFileObjectDataProvider_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__OpenFileObjectDataProvider_, n);
		if (size)
			*size = n * sizeof(struct __ns1__OpenFileObjectDataProvider_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__OpenFileObjectDataProvider_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OpenFileObjectDataProvider_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__OpenFileObjectDataProvider_ %p -> %p\n", q, p));
	*(struct __ns1__OpenFileObjectDataProvider_*)p = *(struct __ns1__OpenFileObjectDataProvider_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FinalizeFileObjectData_(struct soap *soap, struct __ns1__FinalizeFileObjectData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__FinalizeFileObjectData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FinalizeFileObjectData_(struct soap *soap, const struct __ns1__FinalizeFileObjectData_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__FinalizeFileObjectData(soap, &a->ns1__FinalizeFileObjectData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FinalizeFileObjectData_(struct soap *soap, const char *tag, int id, const struct __ns1__FinalizeFileObjectData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__FinalizeFileObjectData(soap, "ns1:FinalizeFileObjectData", -1, &a->ns1__FinalizeFileObjectData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__FinalizeFileObjectData_ * SOAP_FMAC4 soap_in___ns1__FinalizeFileObjectData_(struct soap *soap, const char *tag, struct __ns1__FinalizeFileObjectData_ *a, const char *type)
{
	size_t soap_flag_ns1__FinalizeFileObjectData = 1;
	short soap_flag;
	a = (struct __ns1__FinalizeFileObjectData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__FinalizeFileObjectData_, sizeof(struct __ns1__FinalizeFileObjectData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__FinalizeFileObjectData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__FinalizeFileObjectData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__FinalizeFileObjectData(soap, "ns1:FinalizeFileObjectData", &a->ns1__FinalizeFileObjectData, ""))
				{	soap_flag_ns1__FinalizeFileObjectData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FinalizeFileObjectData_(struct soap *soap, const struct __ns1__FinalizeFileObjectData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__FinalizeFileObjectData_(soap, tag?tag:"-ns1:FinalizeFileObjectData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__FinalizeFileObjectData_ * SOAP_FMAC4 soap_get___ns1__FinalizeFileObjectData_(struct soap *soap, struct __ns1__FinalizeFileObjectData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__FinalizeFileObjectData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__FinalizeFileObjectData_ * SOAP_FMAC2 soap_instantiate___ns1__FinalizeFileObjectData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__FinalizeFileObjectData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__FinalizeFileObjectData_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__FinalizeFileObjectData_);
		if (size)
			*size = sizeof(struct __ns1__FinalizeFileObjectData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__FinalizeFileObjectData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__FinalizeFileObjectData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__FinalizeFileObjectData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__FinalizeFileObjectData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__FinalizeFileObjectData_ %p -> %p\n", q, p));
	*(struct __ns1__FinalizeFileObjectData_*)p = *(struct __ns1__FinalizeFileObjectData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadFileObject_(struct soap *soap, struct __ns1__UploadFileObject_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__UploadFileObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadFileObject_(struct soap *soap, const struct __ns1__UploadFileObject_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__UploadFileObject(soap, &a->ns1__UploadFileObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadFileObject_(struct soap *soap, const char *tag, int id, const struct __ns1__UploadFileObject_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__UploadFileObject(soap, "ns1:UploadFileObject", -1, &a->ns1__UploadFileObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadFileObject_ * SOAP_FMAC4 soap_in___ns1__UploadFileObject_(struct soap *soap, const char *tag, struct __ns1__UploadFileObject_ *a, const char *type)
{
	size_t soap_flag_ns1__UploadFileObject = 1;
	short soap_flag;
	a = (struct __ns1__UploadFileObject_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__UploadFileObject_, sizeof(struct __ns1__UploadFileObject_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__UploadFileObject_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__UploadFileObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__UploadFileObject(soap, "ns1:UploadFileObject", &a->ns1__UploadFileObject, ""))
				{	soap_flag_ns1__UploadFileObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadFileObject_(struct soap *soap, const struct __ns1__UploadFileObject_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__UploadFileObject_(soap, tag?tag:"-ns1:UploadFileObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadFileObject_ * SOAP_FMAC4 soap_get___ns1__UploadFileObject_(struct soap *soap, struct __ns1__UploadFileObject_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__UploadFileObject_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__UploadFileObject_ * SOAP_FMAC2 soap_instantiate___ns1__UploadFileObject_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__UploadFileObject_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__UploadFileObject_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__UploadFileObject_);
		if (size)
			*size = sizeof(struct __ns1__UploadFileObject_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__UploadFileObject_, n);
		if (size)
			*size = n * sizeof(struct __ns1__UploadFileObject_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__UploadFileObject_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadFileObject_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__UploadFileObject_ %p -> %p\n", q, p));
	*(struct __ns1__UploadFileObject_*)p = *(struct __ns1__UploadFileObject_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownloadFileById_(struct soap *soap, struct __ns1__DownloadFileById_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadFileById = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownloadFileById_(struct soap *soap, const struct __ns1__DownloadFileById_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadFileById(soap, &a->ns1__DownloadFileById);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownloadFileById_(struct soap *soap, const char *tag, int id, const struct __ns1__DownloadFileById_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DownloadFileById(soap, "ns1:DownloadFileById", -1, &a->ns1__DownloadFileById, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadFileById_ * SOAP_FMAC4 soap_in___ns1__DownloadFileById_(struct soap *soap, const char *tag, struct __ns1__DownloadFileById_ *a, const char *type)
{
	size_t soap_flag_ns1__DownloadFileById = 1;
	short soap_flag;
	a = (struct __ns1__DownloadFileById_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DownloadFileById_, sizeof(struct __ns1__DownloadFileById_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DownloadFileById_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadFileById && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadFileById(soap, "ns1:DownloadFileById", &a->ns1__DownloadFileById, ""))
				{	soap_flag_ns1__DownloadFileById--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownloadFileById_(struct soap *soap, const struct __ns1__DownloadFileById_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DownloadFileById_(soap, tag?tag:"-ns1:DownloadFileById", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadFileById_ * SOAP_FMAC4 soap_get___ns1__DownloadFileById_(struct soap *soap, struct __ns1__DownloadFileById_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DownloadFileById_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DownloadFileById_ * SOAP_FMAC2 soap_instantiate___ns1__DownloadFileById_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DownloadFileById_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DownloadFileById_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DownloadFileById_);
		if (size)
			*size = sizeof(struct __ns1__DownloadFileById_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DownloadFileById_, n);
		if (size)
			*size = n * sizeof(struct __ns1__DownloadFileById_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DownloadFileById_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DownloadFileById_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DownloadFileById_ %p -> %p\n", q, p));
	*(struct __ns1__DownloadFileById_*)p = *(struct __ns1__DownloadFileById_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteObject_(struct soap *soap, struct __ns1__DeleteObject_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DeleteObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteObject_(struct soap *soap, const struct __ns1__DeleteObject_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DeleteObject(soap, &a->ns1__DeleteObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteObject_(struct soap *soap, const char *tag, int id, const struct __ns1__DeleteObject_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DeleteObject(soap, "ns1:DeleteObject", -1, &a->ns1__DeleteObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DeleteObject_ * SOAP_FMAC4 soap_in___ns1__DeleteObject_(struct soap *soap, const char *tag, struct __ns1__DeleteObject_ *a, const char *type)
{
	size_t soap_flag_ns1__DeleteObject = 1;
	short soap_flag;
	a = (struct __ns1__DeleteObject_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DeleteObject_, sizeof(struct __ns1__DeleteObject_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DeleteObject_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DeleteObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DeleteObject(soap, "ns1:DeleteObject", &a->ns1__DeleteObject, ""))
				{	soap_flag_ns1__DeleteObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteObject_(struct soap *soap, const struct __ns1__DeleteObject_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DeleteObject_(soap, tag?tag:"-ns1:DeleteObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DeleteObject_ * SOAP_FMAC4 soap_get___ns1__DeleteObject_(struct soap *soap, struct __ns1__DeleteObject_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DeleteObject_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DeleteObject_ * SOAP_FMAC2 soap_instantiate___ns1__DeleteObject_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DeleteObject_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DeleteObject_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DeleteObject_);
		if (size)
			*size = sizeof(struct __ns1__DeleteObject_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DeleteObject_, n);
		if (size)
			*size = n * sizeof(struct __ns1__DeleteObject_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DeleteObject_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteObject_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DeleteObject_ %p -> %p\n", q, p));
	*(struct __ns1__DeleteObject_*)p = *(struct __ns1__DeleteObject_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveOrUpdateObjects_(struct soap *soap, struct __ns1__SaveOrUpdateObjects_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SaveOrUpdateObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveOrUpdateObjects_(struct soap *soap, const struct __ns1__SaveOrUpdateObjects_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SaveOrUpdateObjects(soap, &a->ns1__SaveOrUpdateObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveOrUpdateObjects_(struct soap *soap, const char *tag, int id, const struct __ns1__SaveOrUpdateObjects_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SaveOrUpdateObjects(soap, "ns1:SaveOrUpdateObjects", -1, &a->ns1__SaveOrUpdateObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveOrUpdateObjects_ * SOAP_FMAC4 soap_in___ns1__SaveOrUpdateObjects_(struct soap *soap, const char *tag, struct __ns1__SaveOrUpdateObjects_ *a, const char *type)
{
	size_t soap_flag_ns1__SaveOrUpdateObjects = 1;
	short soap_flag;
	a = (struct __ns1__SaveOrUpdateObjects_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SaveOrUpdateObjects_, sizeof(struct __ns1__SaveOrUpdateObjects_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SaveOrUpdateObjects_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SaveOrUpdateObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SaveOrUpdateObjects(soap, "ns1:SaveOrUpdateObjects", &a->ns1__SaveOrUpdateObjects, ""))
				{	soap_flag_ns1__SaveOrUpdateObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveOrUpdateObjects_(struct soap *soap, const struct __ns1__SaveOrUpdateObjects_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SaveOrUpdateObjects_(soap, tag?tag:"-ns1:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveOrUpdateObjects_ * SOAP_FMAC4 soap_get___ns1__SaveOrUpdateObjects_(struct soap *soap, struct __ns1__SaveOrUpdateObjects_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SaveOrUpdateObjects_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SaveOrUpdateObjects_ * SOAP_FMAC2 soap_instantiate___ns1__SaveOrUpdateObjects_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SaveOrUpdateObjects_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SaveOrUpdateObjects_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SaveOrUpdateObjects_);
		if (size)
			*size = sizeof(struct __ns1__SaveOrUpdateObjects_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__SaveOrUpdateObjects_, n);
		if (size)
			*size = n * sizeof(struct __ns1__SaveOrUpdateObjects_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SaveOrUpdateObjects_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SaveOrUpdateObjects_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SaveOrUpdateObjects_ %p -> %p\n", q, p));
	*(struct __ns1__SaveOrUpdateObjects_*)p = *(struct __ns1__SaveOrUpdateObjects_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MatchTowerParts_(struct soap *soap, struct __ns1__MatchTowerParts_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MatchTowerParts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MatchTowerParts_(struct soap *soap, const struct __ns1__MatchTowerParts_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__MatchTowerParts(soap, &a->ns1__MatchTowerParts);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MatchTowerParts_(struct soap *soap, const char *tag, int id, const struct __ns1__MatchTowerParts_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__MatchTowerParts(soap, "ns1:MatchTowerParts", -1, &a->ns1__MatchTowerParts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MatchTowerParts_ * SOAP_FMAC4 soap_in___ns1__MatchTowerParts_(struct soap *soap, const char *tag, struct __ns1__MatchTowerParts_ *a, const char *type)
{
	size_t soap_flag_ns1__MatchTowerParts = 1;
	short soap_flag;
	a = (struct __ns1__MatchTowerParts_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MatchTowerParts_, sizeof(struct __ns1__MatchTowerParts_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MatchTowerParts_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MatchTowerParts && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MatchTowerParts(soap, "ns1:MatchTowerParts", &a->ns1__MatchTowerParts, ""))
				{	soap_flag_ns1__MatchTowerParts--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MatchTowerParts_(struct soap *soap, const struct __ns1__MatchTowerParts_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MatchTowerParts_(soap, tag?tag:"-ns1:MatchTowerParts", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MatchTowerParts_ * SOAP_FMAC4 soap_get___ns1__MatchTowerParts_(struct soap *soap, struct __ns1__MatchTowerParts_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MatchTowerParts_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MatchTowerParts_ * SOAP_FMAC2 soap_instantiate___ns1__MatchTowerParts_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MatchTowerParts_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MatchTowerParts_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MatchTowerParts_);
		if (size)
			*size = sizeof(struct __ns1__MatchTowerParts_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MatchTowerParts_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MatchTowerParts_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MatchTowerParts_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MatchTowerParts_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MatchTowerParts_ %p -> %p\n", q, p));
	*(struct __ns1__MatchTowerParts_*)p = *(struct __ns1__MatchTowerParts_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTowerPartsLabelAndVersionSerial_(struct soap *soap, struct __ns1__GetTowerPartsLabelAndVersionSerial_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTowerPartsLabelAndVersionSerial = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTowerPartsLabelAndVersionSerial_(struct soap *soap, const struct __ns1__GetTowerPartsLabelAndVersionSerial_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, &a->ns1__GetTowerPartsLabelAndVersionSerial);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTowerPartsLabelAndVersionSerial_(struct soap *soap, const char *tag, int id, const struct __ns1__GetTowerPartsLabelAndVersionSerial_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, "ns1:GetTowerPartsLabelAndVersionSerial", -1, &a->ns1__GetTowerPartsLabelAndVersionSerial, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTowerPartsLabelAndVersionSerial_ * SOAP_FMAC4 soap_in___ns1__GetTowerPartsLabelAndVersionSerial_(struct soap *soap, const char *tag, struct __ns1__GetTowerPartsLabelAndVersionSerial_ *a, const char *type)
{
	size_t soap_flag_ns1__GetTowerPartsLabelAndVersionSerial = 1;
	short soap_flag;
	a = (struct __ns1__GetTowerPartsLabelAndVersionSerial_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial_, sizeof(struct __ns1__GetTowerPartsLabelAndVersionSerial_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTowerPartsLabelAndVersionSerial_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTowerPartsLabelAndVersionSerial && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, "ns1:GetTowerPartsLabelAndVersionSerial", &a->ns1__GetTowerPartsLabelAndVersionSerial, ""))
				{	soap_flag_ns1__GetTowerPartsLabelAndVersionSerial--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTowerPartsLabelAndVersionSerial_(struct soap *soap, const struct __ns1__GetTowerPartsLabelAndVersionSerial_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTowerPartsLabelAndVersionSerial_(soap, tag?tag:"-ns1:GetTowerPartsLabelAndVersionSerial", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTowerPartsLabelAndVersionSerial_ * SOAP_FMAC4 soap_get___ns1__GetTowerPartsLabelAndVersionSerial_(struct soap *soap, struct __ns1__GetTowerPartsLabelAndVersionSerial_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTowerPartsLabelAndVersionSerial_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetTowerPartsLabelAndVersionSerial_ * SOAP_FMAC2 soap_instantiate___ns1__GetTowerPartsLabelAndVersionSerial_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetTowerPartsLabelAndVersionSerial_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetTowerPartsLabelAndVersionSerial_);
		if (size)
			*size = sizeof(struct __ns1__GetTowerPartsLabelAndVersionSerial_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetTowerPartsLabelAndVersionSerial_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetTowerPartsLabelAndVersionSerial_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetTowerPartsLabelAndVersionSerial_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTowerPartsLabelAndVersionSerial_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetTowerPartsLabelAndVersionSerial_ %p -> %p\n", q, p));
	*(struct __ns1__GetTowerPartsLabelAndVersionSerial_*)p = *(struct __ns1__GetTowerPartsLabelAndVersionSerial_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetObjectsVersion_(struct soap *soap, struct __ns1__GetObjectsVersion_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetObjectsVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetObjectsVersion_(struct soap *soap, const struct __ns1__GetObjectsVersion_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetObjectsVersion(soap, &a->ns1__GetObjectsVersion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetObjectsVersion_(struct soap *soap, const char *tag, int id, const struct __ns1__GetObjectsVersion_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetObjectsVersion(soap, "ns1:GetObjectsVersion", -1, &a->ns1__GetObjectsVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetObjectsVersion_ * SOAP_FMAC4 soap_in___ns1__GetObjectsVersion_(struct soap *soap, const char *tag, struct __ns1__GetObjectsVersion_ *a, const char *type)
{
	size_t soap_flag_ns1__GetObjectsVersion = 1;
	short soap_flag;
	a = (struct __ns1__GetObjectsVersion_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetObjectsVersion_, sizeof(struct __ns1__GetObjectsVersion_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetObjectsVersion_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetObjectsVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetObjectsVersion(soap, "ns1:GetObjectsVersion", &a->ns1__GetObjectsVersion, ""))
				{	soap_flag_ns1__GetObjectsVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetObjectsVersion_(struct soap *soap, const struct __ns1__GetObjectsVersion_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetObjectsVersion_(soap, tag?tag:"-ns1:GetObjectsVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetObjectsVersion_ * SOAP_FMAC4 soap_get___ns1__GetObjectsVersion_(struct soap *soap, struct __ns1__GetObjectsVersion_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetObjectsVersion_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetObjectsVersion_ * SOAP_FMAC2 soap_instantiate___ns1__GetObjectsVersion_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetObjectsVersion_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetObjectsVersion_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetObjectsVersion_);
		if (size)
			*size = sizeof(struct __ns1__GetObjectsVersion_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetObjectsVersion_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetObjectsVersion_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetObjectsVersion_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetObjectsVersion_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetObjectsVersion_ %p -> %p\n", q, p));
	*(struct __ns1__GetObjectsVersion_*)p = *(struct __ns1__GetObjectsVersion_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownloadObjects_(struct soap *soap, struct __ns1__DownloadObjects_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownloadObjects_(struct soap *soap, const struct __ns1__DownloadObjects_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadObjects(soap, &a->ns1__DownloadObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownloadObjects_(struct soap *soap, const char *tag, int id, const struct __ns1__DownloadObjects_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DownloadObjects(soap, "ns1:DownloadObjects", -1, &a->ns1__DownloadObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadObjects_ * SOAP_FMAC4 soap_in___ns1__DownloadObjects_(struct soap *soap, const char *tag, struct __ns1__DownloadObjects_ *a, const char *type)
{
	size_t soap_flag_ns1__DownloadObjects = 1;
	short soap_flag;
	a = (struct __ns1__DownloadObjects_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DownloadObjects_, sizeof(struct __ns1__DownloadObjects_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DownloadObjects_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadObjects(soap, "ns1:DownloadObjects", &a->ns1__DownloadObjects, ""))
				{	soap_flag_ns1__DownloadObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownloadObjects_(struct soap *soap, const struct __ns1__DownloadObjects_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DownloadObjects_(soap, tag?tag:"-ns1:DownloadObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadObjects_ * SOAP_FMAC4 soap_get___ns1__DownloadObjects_(struct soap *soap, struct __ns1__DownloadObjects_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DownloadObjects_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DownloadObjects_ * SOAP_FMAC2 soap_instantiate___ns1__DownloadObjects_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DownloadObjects_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DownloadObjects_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DownloadObjects_);
		if (size)
			*size = sizeof(struct __ns1__DownloadObjects_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DownloadObjects_, n);
		if (size)
			*size = n * sizeof(struct __ns1__DownloadObjects_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DownloadObjects_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DownloadObjects_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DownloadObjects_ %p -> %p\n", q, p));
	*(struct __ns1__DownloadObjects_*)p = *(struct __ns1__DownloadObjects_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryObjects_(struct soap *soap, struct __ns1__QueryObjects_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__QueryObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryObjects_(struct soap *soap, const struct __ns1__QueryObjects_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__QueryObjects(soap, &a->ns1__QueryObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryObjects_(struct soap *soap, const char *tag, int id, const struct __ns1__QueryObjects_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__QueryObjects(soap, "ns1:QueryObjects", -1, &a->ns1__QueryObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryObjects_ * SOAP_FMAC4 soap_in___ns1__QueryObjects_(struct soap *soap, const char *tag, struct __ns1__QueryObjects_ *a, const char *type)
{
	size_t soap_flag_ns1__QueryObjects = 1;
	short soap_flag;
	a = (struct __ns1__QueryObjects_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__QueryObjects_, sizeof(struct __ns1__QueryObjects_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__QueryObjects_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__QueryObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__QueryObjects(soap, "ns1:QueryObjects", &a->ns1__QueryObjects, ""))
				{	soap_flag_ns1__QueryObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryObjects_(struct soap *soap, const struct __ns1__QueryObjects_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__QueryObjects_(soap, tag?tag:"-ns1:QueryObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryObjects_ * SOAP_FMAC4 soap_get___ns1__QueryObjects_(struct soap *soap, struct __ns1__QueryObjects_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__QueryObjects_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__QueryObjects_ * SOAP_FMAC2 soap_instantiate___ns1__QueryObjects_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__QueryObjects_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__QueryObjects_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__QueryObjects_);
		if (size)
			*size = sizeof(struct __ns1__QueryObjects_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__QueryObjects_, n);
		if (size)
			*size = n * sizeof(struct __ns1__QueryObjects_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__QueryObjects_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__QueryObjects_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__QueryObjects_ %p -> %p\n", q, p));
	*(struct __ns1__QueryObjects_*)p = *(struct __ns1__QueryObjects_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logoutUser_(struct soap *soap, struct __ns1__logoutUser_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__logoutUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logoutUser_(struct soap *soap, const struct __ns1__logoutUser_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__logoutUser(soap, &a->ns1__logoutUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logoutUser_(struct soap *soap, const char *tag, int id, const struct __ns1__logoutUser_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__logoutUser(soap, "ns1:logoutUser", -1, &a->ns1__logoutUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__logoutUser_ * SOAP_FMAC4 soap_in___ns1__logoutUser_(struct soap *soap, const char *tag, struct __ns1__logoutUser_ *a, const char *type)
{
	size_t soap_flag_ns1__logoutUser = 1;
	short soap_flag;
	a = (struct __ns1__logoutUser_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__logoutUser_, sizeof(struct __ns1__logoutUser_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__logoutUser_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__logoutUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__logoutUser(soap, "ns1:logoutUser", &a->ns1__logoutUser, ""))
				{	soap_flag_ns1__logoutUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logoutUser_(struct soap *soap, const struct __ns1__logoutUser_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__logoutUser_(soap, tag?tag:"-ns1:logoutUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__logoutUser_ * SOAP_FMAC4 soap_get___ns1__logoutUser_(struct soap *soap, struct __ns1__logoutUser_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__logoutUser_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__logoutUser_ * SOAP_FMAC2 soap_instantiate___ns1__logoutUser_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__logoutUser_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__logoutUser_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__logoutUser_);
		if (size)
			*size = sizeof(struct __ns1__logoutUser_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__logoutUser_, n);
		if (size)
			*size = n * sizeof(struct __ns1__logoutUser_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__logoutUser_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__logoutUser_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__logoutUser_ %p -> %p\n", q, p));
	*(struct __ns1__logoutUser_*)p = *(struct __ns1__logoutUser_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__loginUserByByteArr_(struct soap *soap, struct __ns1__loginUserByByteArr_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__loginUserByByteArr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__loginUserByByteArr_(struct soap *soap, const struct __ns1__loginUserByByteArr_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__loginUserByByteArr(soap, &a->ns1__loginUserByByteArr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__loginUserByByteArr_(struct soap *soap, const char *tag, int id, const struct __ns1__loginUserByByteArr_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__loginUserByByteArr(soap, "ns1:loginUserByByteArr", -1, &a->ns1__loginUserByByteArr, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__loginUserByByteArr_ * SOAP_FMAC4 soap_in___ns1__loginUserByByteArr_(struct soap *soap, const char *tag, struct __ns1__loginUserByByteArr_ *a, const char *type)
{
	size_t soap_flag_ns1__loginUserByByteArr = 1;
	short soap_flag;
	a = (struct __ns1__loginUserByByteArr_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__loginUserByByteArr_, sizeof(struct __ns1__loginUserByByteArr_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__loginUserByByteArr_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__loginUserByByteArr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__loginUserByByteArr(soap, "ns1:loginUserByByteArr", &a->ns1__loginUserByByteArr, ""))
				{	soap_flag_ns1__loginUserByByteArr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__loginUserByByteArr_(struct soap *soap, const struct __ns1__loginUserByByteArr_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__loginUserByByteArr_(soap, tag?tag:"-ns1:loginUserByByteArr", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__loginUserByByteArr_ * SOAP_FMAC4 soap_get___ns1__loginUserByByteArr_(struct soap *soap, struct __ns1__loginUserByByteArr_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__loginUserByByteArr_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__loginUserByByteArr_ * SOAP_FMAC2 soap_instantiate___ns1__loginUserByByteArr_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__loginUserByByteArr_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__loginUserByByteArr_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__loginUserByByteArr_);
		if (size)
			*size = sizeof(struct __ns1__loginUserByByteArr_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__loginUserByByteArr_, n);
		if (size)
			*size = n * sizeof(struct __ns1__loginUserByByteArr_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__loginUserByByteArr_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__loginUserByByteArr_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__loginUserByByteArr_ %p -> %p\n", q, p));
	*(struct __ns1__loginUserByByteArr_*)p = *(struct __ns1__loginUserByByteArr_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__loginUser_(struct soap *soap, struct __ns1__loginUser_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__loginUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__loginUser_(struct soap *soap, const struct __ns1__loginUser_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__loginUser(soap, &a->ns1__loginUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__loginUser_(struct soap *soap, const char *tag, int id, const struct __ns1__loginUser_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__loginUser(soap, "ns1:loginUser", -1, &a->ns1__loginUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__loginUser_ * SOAP_FMAC4 soap_in___ns1__loginUser_(struct soap *soap, const char *tag, struct __ns1__loginUser_ *a, const char *type)
{
	size_t soap_flag_ns1__loginUser = 1;
	short soap_flag;
	a = (struct __ns1__loginUser_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__loginUser_, sizeof(struct __ns1__loginUser_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__loginUser_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__loginUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__loginUser(soap, "ns1:loginUser", &a->ns1__loginUser, ""))
				{	soap_flag_ns1__loginUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__loginUser_(struct soap *soap, const struct __ns1__loginUser_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__loginUser_(soap, tag?tag:"-ns1:loginUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__loginUser_ * SOAP_FMAC4 soap_get___ns1__loginUser_(struct soap *soap, struct __ns1__loginUser_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__loginUser_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__loginUser_ * SOAP_FMAC2 soap_instantiate___ns1__loginUser_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__loginUser_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__loginUser_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__loginUser_);
		if (size)
			*size = sizeof(struct __ns1__loginUser_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__loginUser_, n);
		if (size)
			*size = n * sizeof(struct __ns1__loginUser_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__loginUser_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__loginUser_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__loginUser_ %p -> %p\n", q, p));
	*(struct __ns1__loginUser_*)p = *(struct __ns1__loginUser_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseFileObjectDataProvider(struct soap *soap, struct __ns1__CloseFileObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseFileObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseFileObjectDataProvider(struct soap *soap, const struct __ns1__CloseFileObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CloseFileObjectDataProvider(soap, &a->ns1__CloseFileObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseFileObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __ns1__CloseFileObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__CloseFileObjectDataProvider(soap, "ns1:CloseFileObjectDataProvider", -1, &a->ns1__CloseFileObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CloseFileObjectDataProvider * SOAP_FMAC4 soap_in___ns1__CloseFileObjectDataProvider(struct soap *soap, const char *tag, struct __ns1__CloseFileObjectDataProvider *a, const char *type)
{
	size_t soap_flag_ns1__CloseFileObjectDataProvider = 1;
	short soap_flag;
	a = (struct __ns1__CloseFileObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CloseFileObjectDataProvider, sizeof(struct __ns1__CloseFileObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CloseFileObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseFileObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CloseFileObjectDataProvider(soap, "ns1:CloseFileObjectDataProvider", &a->ns1__CloseFileObjectDataProvider, ""))
				{	soap_flag_ns1__CloseFileObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseFileObjectDataProvider(struct soap *soap, const struct __ns1__CloseFileObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CloseFileObjectDataProvider(soap, tag?tag:"-ns1:CloseFileObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CloseFileObjectDataProvider * SOAP_FMAC4 soap_get___ns1__CloseFileObjectDataProvider(struct soap *soap, struct __ns1__CloseFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CloseFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CloseFileObjectDataProvider * SOAP_FMAC2 soap_instantiate___ns1__CloseFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CloseFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CloseFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CloseFileObjectDataProvider);
		if (size)
			*size = sizeof(struct __ns1__CloseFileObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CloseFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __ns1__CloseFileObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CloseFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CloseFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CloseFileObjectDataProvider %p -> %p\n", q, p));
	*(struct __ns1__CloseFileObjectDataProvider*)p = *(struct __ns1__CloseFileObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownloadFileObject(struct soap *soap, struct __ns1__DownloadFileObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadFileObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownloadFileObject(struct soap *soap, const struct __ns1__DownloadFileObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadFileObject(soap, &a->ns1__DownloadFileObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownloadFileObject(struct soap *soap, const char *tag, int id, const struct __ns1__DownloadFileObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DownloadFileObject(soap, "ns1:DownloadFileObject", -1, &a->ns1__DownloadFileObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadFileObject * SOAP_FMAC4 soap_in___ns1__DownloadFileObject(struct soap *soap, const char *tag, struct __ns1__DownloadFileObject *a, const char *type)
{
	size_t soap_flag_ns1__DownloadFileObject = 1;
	short soap_flag;
	a = (struct __ns1__DownloadFileObject *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DownloadFileObject, sizeof(struct __ns1__DownloadFileObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DownloadFileObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadFileObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadFileObject(soap, "ns1:DownloadFileObject", &a->ns1__DownloadFileObject, ""))
				{	soap_flag_ns1__DownloadFileObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownloadFileObject(struct soap *soap, const struct __ns1__DownloadFileObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DownloadFileObject(soap, tag?tag:"-ns1:DownloadFileObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadFileObject * SOAP_FMAC4 soap_get___ns1__DownloadFileObject(struct soap *soap, struct __ns1__DownloadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DownloadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DownloadFileObject * SOAP_FMAC2 soap_instantiate___ns1__DownloadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DownloadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DownloadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DownloadFileObject);
		if (size)
			*size = sizeof(struct __ns1__DownloadFileObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DownloadFileObject, n);
		if (size)
			*size = n * sizeof(struct __ns1__DownloadFileObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DownloadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DownloadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DownloadFileObject %p -> %p\n", q, p));
	*(struct __ns1__DownloadFileObject*)p = *(struct __ns1__DownloadFileObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenServerObjectDataProvider(struct soap *soap, struct __ns1__OpenServerObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenServerObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenServerObjectDataProvider(struct soap *soap, const struct __ns1__OpenServerObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenServerObjectDataProvider(soap, &a->ns1__OpenServerObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenServerObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __ns1__OpenServerObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__OpenServerObjectDataProvider(soap, "ns1:OpenServerObjectDataProvider", -1, &a->ns1__OpenServerObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenServerObjectDataProvider * SOAP_FMAC4 soap_in___ns1__OpenServerObjectDataProvider(struct soap *soap, const char *tag, struct __ns1__OpenServerObjectDataProvider *a, const char *type)
{
	size_t soap_flag_ns1__OpenServerObjectDataProvider = 1;
	short soap_flag;
	a = (struct __ns1__OpenServerObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OpenServerObjectDataProvider, sizeof(struct __ns1__OpenServerObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OpenServerObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenServerObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenServerObjectDataProvider(soap, "ns1:OpenServerObjectDataProvider", &a->ns1__OpenServerObjectDataProvider, ""))
				{	soap_flag_ns1__OpenServerObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenServerObjectDataProvider(struct soap *soap, const struct __ns1__OpenServerObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__OpenServerObjectDataProvider(soap, tag?tag:"-ns1:OpenServerObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenServerObjectDataProvider * SOAP_FMAC4 soap_get___ns1__OpenServerObjectDataProvider(struct soap *soap, struct __ns1__OpenServerObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OpenServerObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__OpenServerObjectDataProvider * SOAP_FMAC2 soap_instantiate___ns1__OpenServerObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OpenServerObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__OpenServerObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__OpenServerObjectDataProvider);
		if (size)
			*size = sizeof(struct __ns1__OpenServerObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__OpenServerObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __ns1__OpenServerObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__OpenServerObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OpenServerObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__OpenServerObjectDataProvider %p -> %p\n", q, p));
	*(struct __ns1__OpenServerObjectDataProvider*)p = *(struct __ns1__OpenServerObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenTapModelDataProvider(struct soap *soap, struct __ns1__OpenTapModelDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenTapModelDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenTapModelDataProvider(struct soap *soap, const struct __ns1__OpenTapModelDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenTapModelDataProvider(soap, &a->ns1__OpenTapModelDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenTapModelDataProvider(struct soap *soap, const char *tag, int id, const struct __ns1__OpenTapModelDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__OpenTapModelDataProvider(soap, "ns1:OpenTapModelDataProvider", -1, &a->ns1__OpenTapModelDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenTapModelDataProvider * SOAP_FMAC4 soap_in___ns1__OpenTapModelDataProvider(struct soap *soap, const char *tag, struct __ns1__OpenTapModelDataProvider *a, const char *type)
{
	size_t soap_flag_ns1__OpenTapModelDataProvider = 1;
	short soap_flag;
	a = (struct __ns1__OpenTapModelDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OpenTapModelDataProvider, sizeof(struct __ns1__OpenTapModelDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OpenTapModelDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenTapModelDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenTapModelDataProvider(soap, "ns1:OpenTapModelDataProvider", &a->ns1__OpenTapModelDataProvider, ""))
				{	soap_flag_ns1__OpenTapModelDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenTapModelDataProvider(struct soap *soap, const struct __ns1__OpenTapModelDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__OpenTapModelDataProvider(soap, tag?tag:"-ns1:OpenTapModelDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenTapModelDataProvider * SOAP_FMAC4 soap_get___ns1__OpenTapModelDataProvider(struct soap *soap, struct __ns1__OpenTapModelDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OpenTapModelDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__OpenTapModelDataProvider * SOAP_FMAC2 soap_instantiate___ns1__OpenTapModelDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OpenTapModelDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__OpenTapModelDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__OpenTapModelDataProvider);
		if (size)
			*size = sizeof(struct __ns1__OpenTapModelDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__OpenTapModelDataProvider, n);
		if (size)
			*size = n * sizeof(struct __ns1__OpenTapModelDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__OpenTapModelDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OpenTapModelDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__OpenTapModelDataProvider %p -> %p\n", q, p));
	*(struct __ns1__OpenTapModelDataProvider*)p = *(struct __ns1__OpenTapModelDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenFileObjectDataProvider(struct soap *soap, struct __ns1__OpenFileObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenFileObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenFileObjectDataProvider(struct soap *soap, const struct __ns1__OpenFileObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenFileObjectDataProvider(soap, &a->ns1__OpenFileObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenFileObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __ns1__OpenFileObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__OpenFileObjectDataProvider(soap, "ns1:OpenFileObjectDataProvider", -1, &a->ns1__OpenFileObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenFileObjectDataProvider * SOAP_FMAC4 soap_in___ns1__OpenFileObjectDataProvider(struct soap *soap, const char *tag, struct __ns1__OpenFileObjectDataProvider *a, const char *type)
{
	size_t soap_flag_ns1__OpenFileObjectDataProvider = 1;
	short soap_flag;
	a = (struct __ns1__OpenFileObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OpenFileObjectDataProvider, sizeof(struct __ns1__OpenFileObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OpenFileObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenFileObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenFileObjectDataProvider(soap, "ns1:OpenFileObjectDataProvider", &a->ns1__OpenFileObjectDataProvider, ""))
				{	soap_flag_ns1__OpenFileObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenFileObjectDataProvider(struct soap *soap, const struct __ns1__OpenFileObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__OpenFileObjectDataProvider(soap, tag?tag:"-ns1:OpenFileObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenFileObjectDataProvider * SOAP_FMAC4 soap_get___ns1__OpenFileObjectDataProvider(struct soap *soap, struct __ns1__OpenFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OpenFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__OpenFileObjectDataProvider * SOAP_FMAC2 soap_instantiate___ns1__OpenFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OpenFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__OpenFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__OpenFileObjectDataProvider);
		if (size)
			*size = sizeof(struct __ns1__OpenFileObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__OpenFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __ns1__OpenFileObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__OpenFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OpenFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__OpenFileObjectDataProvider %p -> %p\n", q, p));
	*(struct __ns1__OpenFileObjectDataProvider*)p = *(struct __ns1__OpenFileObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FinalizeFileObjectData(struct soap *soap, struct __ns1__FinalizeFileObjectData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__FinalizeFileObjectData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FinalizeFileObjectData(struct soap *soap, const struct __ns1__FinalizeFileObjectData *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__FinalizeFileObjectData(soap, &a->ns1__FinalizeFileObjectData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FinalizeFileObjectData(struct soap *soap, const char *tag, int id, const struct __ns1__FinalizeFileObjectData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__FinalizeFileObjectData(soap, "ns1:FinalizeFileObjectData", -1, &a->ns1__FinalizeFileObjectData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__FinalizeFileObjectData * SOAP_FMAC4 soap_in___ns1__FinalizeFileObjectData(struct soap *soap, const char *tag, struct __ns1__FinalizeFileObjectData *a, const char *type)
{
	size_t soap_flag_ns1__FinalizeFileObjectData = 1;
	short soap_flag;
	a = (struct __ns1__FinalizeFileObjectData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__FinalizeFileObjectData, sizeof(struct __ns1__FinalizeFileObjectData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__FinalizeFileObjectData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__FinalizeFileObjectData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__FinalizeFileObjectData(soap, "ns1:FinalizeFileObjectData", &a->ns1__FinalizeFileObjectData, ""))
				{	soap_flag_ns1__FinalizeFileObjectData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FinalizeFileObjectData(struct soap *soap, const struct __ns1__FinalizeFileObjectData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__FinalizeFileObjectData(soap, tag?tag:"-ns1:FinalizeFileObjectData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__FinalizeFileObjectData * SOAP_FMAC4 soap_get___ns1__FinalizeFileObjectData(struct soap *soap, struct __ns1__FinalizeFileObjectData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__FinalizeFileObjectData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__FinalizeFileObjectData * SOAP_FMAC2 soap_instantiate___ns1__FinalizeFileObjectData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__FinalizeFileObjectData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__FinalizeFileObjectData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__FinalizeFileObjectData);
		if (size)
			*size = sizeof(struct __ns1__FinalizeFileObjectData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__FinalizeFileObjectData, n);
		if (size)
			*size = n * sizeof(struct __ns1__FinalizeFileObjectData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__FinalizeFileObjectData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__FinalizeFileObjectData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__FinalizeFileObjectData %p -> %p\n", q, p));
	*(struct __ns1__FinalizeFileObjectData*)p = *(struct __ns1__FinalizeFileObjectData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadFileObject(struct soap *soap, struct __ns1__UploadFileObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__UploadFileObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadFileObject(struct soap *soap, const struct __ns1__UploadFileObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__UploadFileObject(soap, &a->ns1__UploadFileObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadFileObject(struct soap *soap, const char *tag, int id, const struct __ns1__UploadFileObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__UploadFileObject(soap, "ns1:UploadFileObject", -1, &a->ns1__UploadFileObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadFileObject * SOAP_FMAC4 soap_in___ns1__UploadFileObject(struct soap *soap, const char *tag, struct __ns1__UploadFileObject *a, const char *type)
{
	size_t soap_flag_ns1__UploadFileObject = 1;
	short soap_flag;
	a = (struct __ns1__UploadFileObject *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__UploadFileObject, sizeof(struct __ns1__UploadFileObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__UploadFileObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__UploadFileObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__UploadFileObject(soap, "ns1:UploadFileObject", &a->ns1__UploadFileObject, ""))
				{	soap_flag_ns1__UploadFileObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadFileObject(struct soap *soap, const struct __ns1__UploadFileObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__UploadFileObject(soap, tag?tag:"-ns1:UploadFileObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadFileObject * SOAP_FMAC4 soap_get___ns1__UploadFileObject(struct soap *soap, struct __ns1__UploadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__UploadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__UploadFileObject * SOAP_FMAC2 soap_instantiate___ns1__UploadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__UploadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__UploadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__UploadFileObject);
		if (size)
			*size = sizeof(struct __ns1__UploadFileObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__UploadFileObject, n);
		if (size)
			*size = n * sizeof(struct __ns1__UploadFileObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__UploadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__UploadFileObject %p -> %p\n", q, p));
	*(struct __ns1__UploadFileObject*)p = *(struct __ns1__UploadFileObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownloadFileById(struct soap *soap, struct __ns1__DownloadFileById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadFileById = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownloadFileById(struct soap *soap, const struct __ns1__DownloadFileById *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadFileById(soap, &a->ns1__DownloadFileById);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownloadFileById(struct soap *soap, const char *tag, int id, const struct __ns1__DownloadFileById *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DownloadFileById(soap, "ns1:DownloadFileById", -1, &a->ns1__DownloadFileById, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadFileById * SOAP_FMAC4 soap_in___ns1__DownloadFileById(struct soap *soap, const char *tag, struct __ns1__DownloadFileById *a, const char *type)
{
	size_t soap_flag_ns1__DownloadFileById = 1;
	short soap_flag;
	a = (struct __ns1__DownloadFileById *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DownloadFileById, sizeof(struct __ns1__DownloadFileById), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DownloadFileById(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadFileById && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadFileById(soap, "ns1:DownloadFileById", &a->ns1__DownloadFileById, ""))
				{	soap_flag_ns1__DownloadFileById--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownloadFileById(struct soap *soap, const struct __ns1__DownloadFileById *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DownloadFileById(soap, tag?tag:"-ns1:DownloadFileById", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadFileById * SOAP_FMAC4 soap_get___ns1__DownloadFileById(struct soap *soap, struct __ns1__DownloadFileById *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DownloadFileById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DownloadFileById * SOAP_FMAC2 soap_instantiate___ns1__DownloadFileById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DownloadFileById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DownloadFileById, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DownloadFileById);
		if (size)
			*size = sizeof(struct __ns1__DownloadFileById);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DownloadFileById, n);
		if (size)
			*size = n * sizeof(struct __ns1__DownloadFileById);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DownloadFileById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DownloadFileById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DownloadFileById %p -> %p\n", q, p));
	*(struct __ns1__DownloadFileById*)p = *(struct __ns1__DownloadFileById*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteObject(struct soap *soap, struct __ns1__DeleteObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DeleteObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteObject(struct soap *soap, const struct __ns1__DeleteObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DeleteObject(soap, &a->ns1__DeleteObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteObject(struct soap *soap, const char *tag, int id, const struct __ns1__DeleteObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DeleteObject(soap, "ns1:DeleteObject", -1, &a->ns1__DeleteObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DeleteObject * SOAP_FMAC4 soap_in___ns1__DeleteObject(struct soap *soap, const char *tag, struct __ns1__DeleteObject *a, const char *type)
{
	size_t soap_flag_ns1__DeleteObject = 1;
	short soap_flag;
	a = (struct __ns1__DeleteObject *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DeleteObject, sizeof(struct __ns1__DeleteObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DeleteObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DeleteObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DeleteObject(soap, "ns1:DeleteObject", &a->ns1__DeleteObject, ""))
				{	soap_flag_ns1__DeleteObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteObject(struct soap *soap, const struct __ns1__DeleteObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DeleteObject(soap, tag?tag:"-ns1:DeleteObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DeleteObject * SOAP_FMAC4 soap_get___ns1__DeleteObject(struct soap *soap, struct __ns1__DeleteObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DeleteObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DeleteObject * SOAP_FMAC2 soap_instantiate___ns1__DeleteObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DeleteObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DeleteObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DeleteObject);
		if (size)
			*size = sizeof(struct __ns1__DeleteObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DeleteObject, n);
		if (size)
			*size = n * sizeof(struct __ns1__DeleteObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DeleteObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DeleteObject %p -> %p\n", q, p));
	*(struct __ns1__DeleteObject*)p = *(struct __ns1__DeleteObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveOrUpdateObjects(struct soap *soap, struct __ns1__SaveOrUpdateObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SaveOrUpdateObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveOrUpdateObjects(struct soap *soap, const struct __ns1__SaveOrUpdateObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SaveOrUpdateObjects(soap, &a->ns1__SaveOrUpdateObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const struct __ns1__SaveOrUpdateObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SaveOrUpdateObjects(soap, "ns1:SaveOrUpdateObjects", -1, &a->ns1__SaveOrUpdateObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveOrUpdateObjects * SOAP_FMAC4 soap_in___ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, struct __ns1__SaveOrUpdateObjects *a, const char *type)
{
	size_t soap_flag_ns1__SaveOrUpdateObjects = 1;
	short soap_flag;
	a = (struct __ns1__SaveOrUpdateObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SaveOrUpdateObjects, sizeof(struct __ns1__SaveOrUpdateObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SaveOrUpdateObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SaveOrUpdateObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SaveOrUpdateObjects(soap, "ns1:SaveOrUpdateObjects", &a->ns1__SaveOrUpdateObjects, ""))
				{	soap_flag_ns1__SaveOrUpdateObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveOrUpdateObjects(struct soap *soap, const struct __ns1__SaveOrUpdateObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SaveOrUpdateObjects(soap, tag?tag:"-ns1:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveOrUpdateObjects * SOAP_FMAC4 soap_get___ns1__SaveOrUpdateObjects(struct soap *soap, struct __ns1__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate___ns1__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(struct __ns1__SaveOrUpdateObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(struct __ns1__SaveOrUpdateObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(struct __ns1__SaveOrUpdateObjects*)p = *(struct __ns1__SaveOrUpdateObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MatchTowerParts(struct soap *soap, struct __ns1__MatchTowerParts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MatchTowerParts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MatchTowerParts(struct soap *soap, const struct __ns1__MatchTowerParts *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__MatchTowerParts(soap, &a->ns1__MatchTowerParts);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MatchTowerParts(struct soap *soap, const char *tag, int id, const struct __ns1__MatchTowerParts *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__MatchTowerParts(soap, "ns1:MatchTowerParts", -1, &a->ns1__MatchTowerParts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MatchTowerParts * SOAP_FMAC4 soap_in___ns1__MatchTowerParts(struct soap *soap, const char *tag, struct __ns1__MatchTowerParts *a, const char *type)
{
	size_t soap_flag_ns1__MatchTowerParts = 1;
	short soap_flag;
	a = (struct __ns1__MatchTowerParts *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MatchTowerParts, sizeof(struct __ns1__MatchTowerParts), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MatchTowerParts(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MatchTowerParts && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MatchTowerParts(soap, "ns1:MatchTowerParts", &a->ns1__MatchTowerParts, ""))
				{	soap_flag_ns1__MatchTowerParts--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MatchTowerParts(struct soap *soap, const struct __ns1__MatchTowerParts *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MatchTowerParts(soap, tag?tag:"-ns1:MatchTowerParts", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MatchTowerParts * SOAP_FMAC4 soap_get___ns1__MatchTowerParts(struct soap *soap, struct __ns1__MatchTowerParts *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MatchTowerParts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MatchTowerParts * SOAP_FMAC2 soap_instantiate___ns1__MatchTowerParts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MatchTowerParts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MatchTowerParts, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MatchTowerParts);
		if (size)
			*size = sizeof(struct __ns1__MatchTowerParts);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MatchTowerParts, n);
		if (size)
			*size = n * sizeof(struct __ns1__MatchTowerParts);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MatchTowerParts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MatchTowerParts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MatchTowerParts %p -> %p\n", q, p));
	*(struct __ns1__MatchTowerParts*)p = *(struct __ns1__MatchTowerParts*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, struct __ns1__GetTowerPartsLabelAndVersionSerial *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTowerPartsLabelAndVersionSerial = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const struct __ns1__GetTowerPartsLabelAndVersionSerial *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, &a->ns1__GetTowerPartsLabelAndVersionSerial);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, int id, const struct __ns1__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, "ns1:GetTowerPartsLabelAndVersionSerial", -1, &a->ns1__GetTowerPartsLabelAndVersionSerial, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_in___ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, struct __ns1__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	size_t soap_flag_ns1__GetTowerPartsLabelAndVersionSerial = 1;
	short soap_flag;
	a = (struct __ns1__GetTowerPartsLabelAndVersionSerial *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial, sizeof(struct __ns1__GetTowerPartsLabelAndVersionSerial), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTowerPartsLabelAndVersionSerial(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTowerPartsLabelAndVersionSerial && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, "ns1:GetTowerPartsLabelAndVersionSerial", &a->ns1__GetTowerPartsLabelAndVersionSerial, ""))
				{	soap_flag_ns1__GetTowerPartsLabelAndVersionSerial--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const struct __ns1__GetTowerPartsLabelAndVersionSerial *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTowerPartsLabelAndVersionSerial(soap, tag?tag:"-ns1:GetTowerPartsLabelAndVersionSerial", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_get___ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, struct __ns1__GetTowerPartsLabelAndVersionSerial *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTowerPartsLabelAndVersionSerial(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC2 soap_instantiate___ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetTowerPartsLabelAndVersionSerial(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetTowerPartsLabelAndVersionSerial, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetTowerPartsLabelAndVersionSerial);
		if (size)
			*size = sizeof(struct __ns1__GetTowerPartsLabelAndVersionSerial);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetTowerPartsLabelAndVersionSerial, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetTowerPartsLabelAndVersionSerial);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetTowerPartsLabelAndVersionSerial*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetTowerPartsLabelAndVersionSerial %p -> %p\n", q, p));
	*(struct __ns1__GetTowerPartsLabelAndVersionSerial*)p = *(struct __ns1__GetTowerPartsLabelAndVersionSerial*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetObjectsVersion(struct soap *soap, struct __ns1__GetObjectsVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetObjectsVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetObjectsVersion(struct soap *soap, const struct __ns1__GetObjectsVersion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetObjectsVersion(soap, &a->ns1__GetObjectsVersion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetObjectsVersion(struct soap *soap, const char *tag, int id, const struct __ns1__GetObjectsVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetObjectsVersion(soap, "ns1:GetObjectsVersion", -1, &a->ns1__GetObjectsVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetObjectsVersion * SOAP_FMAC4 soap_in___ns1__GetObjectsVersion(struct soap *soap, const char *tag, struct __ns1__GetObjectsVersion *a, const char *type)
{
	size_t soap_flag_ns1__GetObjectsVersion = 1;
	short soap_flag;
	a = (struct __ns1__GetObjectsVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetObjectsVersion, sizeof(struct __ns1__GetObjectsVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetObjectsVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetObjectsVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetObjectsVersion(soap, "ns1:GetObjectsVersion", &a->ns1__GetObjectsVersion, ""))
				{	soap_flag_ns1__GetObjectsVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetObjectsVersion(struct soap *soap, const struct __ns1__GetObjectsVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetObjectsVersion(soap, tag?tag:"-ns1:GetObjectsVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetObjectsVersion * SOAP_FMAC4 soap_get___ns1__GetObjectsVersion(struct soap *soap, struct __ns1__GetObjectsVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetObjectsVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetObjectsVersion * SOAP_FMAC2 soap_instantiate___ns1__GetObjectsVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetObjectsVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetObjectsVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetObjectsVersion);
		if (size)
			*size = sizeof(struct __ns1__GetObjectsVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetObjectsVersion, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetObjectsVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetObjectsVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetObjectsVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetObjectsVersion %p -> %p\n", q, p));
	*(struct __ns1__GetObjectsVersion*)p = *(struct __ns1__GetObjectsVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownloadObjects(struct soap *soap, struct __ns1__DownloadObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownloadObjects(struct soap *soap, const struct __ns1__DownloadObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadObjects(soap, &a->ns1__DownloadObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownloadObjects(struct soap *soap, const char *tag, int id, const struct __ns1__DownloadObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DownloadObjects(soap, "ns1:DownloadObjects", -1, &a->ns1__DownloadObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadObjects * SOAP_FMAC4 soap_in___ns1__DownloadObjects(struct soap *soap, const char *tag, struct __ns1__DownloadObjects *a, const char *type)
{
	size_t soap_flag_ns1__DownloadObjects = 1;
	short soap_flag;
	a = (struct __ns1__DownloadObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DownloadObjects, sizeof(struct __ns1__DownloadObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DownloadObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadObjects(soap, "ns1:DownloadObjects", &a->ns1__DownloadObjects, ""))
				{	soap_flag_ns1__DownloadObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownloadObjects(struct soap *soap, const struct __ns1__DownloadObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DownloadObjects(soap, tag?tag:"-ns1:DownloadObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadObjects * SOAP_FMAC4 soap_get___ns1__DownloadObjects(struct soap *soap, struct __ns1__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DownloadObjects * SOAP_FMAC2 soap_instantiate___ns1__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DownloadObjects);
		if (size)
			*size = sizeof(struct __ns1__DownloadObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DownloadObjects, n);
		if (size)
			*size = n * sizeof(struct __ns1__DownloadObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DownloadObjects %p -> %p\n", q, p));
	*(struct __ns1__DownloadObjects*)p = *(struct __ns1__DownloadObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryObjects(struct soap *soap, struct __ns1__QueryObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__QueryObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryObjects(struct soap *soap, const struct __ns1__QueryObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__QueryObjects(soap, &a->ns1__QueryObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryObjects(struct soap *soap, const char *tag, int id, const struct __ns1__QueryObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__QueryObjects(soap, "ns1:QueryObjects", -1, &a->ns1__QueryObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryObjects * SOAP_FMAC4 soap_in___ns1__QueryObjects(struct soap *soap, const char *tag, struct __ns1__QueryObjects *a, const char *type)
{
	size_t soap_flag_ns1__QueryObjects = 1;
	short soap_flag;
	a = (struct __ns1__QueryObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__QueryObjects, sizeof(struct __ns1__QueryObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__QueryObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__QueryObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__QueryObjects(soap, "ns1:QueryObjects", &a->ns1__QueryObjects, ""))
				{	soap_flag_ns1__QueryObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryObjects(struct soap *soap, const struct __ns1__QueryObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__QueryObjects(soap, tag?tag:"-ns1:QueryObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryObjects * SOAP_FMAC4 soap_get___ns1__QueryObjects(struct soap *soap, struct __ns1__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__QueryObjects * SOAP_FMAC2 soap_instantiate___ns1__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__QueryObjects);
		if (size)
			*size = sizeof(struct __ns1__QueryObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__QueryObjects, n);
		if (size)
			*size = n * sizeof(struct __ns1__QueryObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__QueryObjects %p -> %p\n", q, p));
	*(struct __ns1__QueryObjects*)p = *(struct __ns1__QueryObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logoutUser(struct soap *soap, struct __ns1__logoutUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__logoutUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logoutUser(struct soap *soap, const struct __ns1__logoutUser *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__logoutUser(soap, &a->ns1__logoutUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logoutUser(struct soap *soap, const char *tag, int id, const struct __ns1__logoutUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__logoutUser(soap, "ns1:logoutUser", -1, &a->ns1__logoutUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__logoutUser * SOAP_FMAC4 soap_in___ns1__logoutUser(struct soap *soap, const char *tag, struct __ns1__logoutUser *a, const char *type)
{
	size_t soap_flag_ns1__logoutUser = 1;
	short soap_flag;
	a = (struct __ns1__logoutUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__logoutUser, sizeof(struct __ns1__logoutUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__logoutUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__logoutUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__logoutUser(soap, "ns1:logoutUser", &a->ns1__logoutUser, ""))
				{	soap_flag_ns1__logoutUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logoutUser(struct soap *soap, const struct __ns1__logoutUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__logoutUser(soap, tag?tag:"-ns1:logoutUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__logoutUser * SOAP_FMAC4 soap_get___ns1__logoutUser(struct soap *soap, struct __ns1__logoutUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__logoutUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__logoutUser * SOAP_FMAC2 soap_instantiate___ns1__logoutUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__logoutUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__logoutUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__logoutUser);
		if (size)
			*size = sizeof(struct __ns1__logoutUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__logoutUser, n);
		if (size)
			*size = n * sizeof(struct __ns1__logoutUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__logoutUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__logoutUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__logoutUser %p -> %p\n", q, p));
	*(struct __ns1__logoutUser*)p = *(struct __ns1__logoutUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__loginUserByByteArr(struct soap *soap, struct __ns1__loginUserByByteArr *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__loginUserByByteArr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__loginUserByByteArr(struct soap *soap, const struct __ns1__loginUserByByteArr *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__loginUserByByteArr(soap, &a->ns1__loginUserByByteArr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__loginUserByByteArr(struct soap *soap, const char *tag, int id, const struct __ns1__loginUserByByteArr *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__loginUserByByteArr(soap, "ns1:loginUserByByteArr", -1, &a->ns1__loginUserByByteArr, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__loginUserByByteArr * SOAP_FMAC4 soap_in___ns1__loginUserByByteArr(struct soap *soap, const char *tag, struct __ns1__loginUserByByteArr *a, const char *type)
{
	size_t soap_flag_ns1__loginUserByByteArr = 1;
	short soap_flag;
	a = (struct __ns1__loginUserByByteArr *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__loginUserByByteArr, sizeof(struct __ns1__loginUserByByteArr), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__loginUserByByteArr(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__loginUserByByteArr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__loginUserByByteArr(soap, "ns1:loginUserByByteArr", &a->ns1__loginUserByByteArr, ""))
				{	soap_flag_ns1__loginUserByByteArr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__loginUserByByteArr(struct soap *soap, const struct __ns1__loginUserByByteArr *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__loginUserByByteArr(soap, tag?tag:"-ns1:loginUserByByteArr", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__loginUserByByteArr * SOAP_FMAC4 soap_get___ns1__loginUserByByteArr(struct soap *soap, struct __ns1__loginUserByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__loginUserByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__loginUserByByteArr * SOAP_FMAC2 soap_instantiate___ns1__loginUserByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__loginUserByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__loginUserByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__loginUserByByteArr);
		if (size)
			*size = sizeof(struct __ns1__loginUserByByteArr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__loginUserByByteArr, n);
		if (size)
			*size = n * sizeof(struct __ns1__loginUserByByteArr);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__loginUserByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__loginUserByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__loginUserByByteArr %p -> %p\n", q, p));
	*(struct __ns1__loginUserByByteArr*)p = *(struct __ns1__loginUserByByteArr*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__loginUser(struct soap *soap, struct __ns1__loginUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__loginUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__loginUser(struct soap *soap, const struct __ns1__loginUser *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__loginUser(soap, &a->ns1__loginUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__loginUser(struct soap *soap, const char *tag, int id, const struct __ns1__loginUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__loginUser(soap, "ns1:loginUser", -1, &a->ns1__loginUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__loginUser * SOAP_FMAC4 soap_in___ns1__loginUser(struct soap *soap, const char *tag, struct __ns1__loginUser *a, const char *type)
{
	size_t soap_flag_ns1__loginUser = 1;
	short soap_flag;
	a = (struct __ns1__loginUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__loginUser, sizeof(struct __ns1__loginUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__loginUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__loginUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__loginUser(soap, "ns1:loginUser", &a->ns1__loginUser, ""))
				{	soap_flag_ns1__loginUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__loginUser(struct soap *soap, const struct __ns1__loginUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__loginUser(soap, tag?tag:"-ns1:loginUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__loginUser * SOAP_FMAC4 soap_get___ns1__loginUser(struct soap *soap, struct __ns1__loginUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__loginUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__loginUser * SOAP_FMAC2 soap_instantiate___ns1__loginUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__loginUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__loginUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__loginUser);
		if (size)
			*size = sizeof(struct __ns1__loginUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__loginUser, n);
		if (size)
			*size = n * sizeof(struct __ns1__loginUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__loginUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__loginUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__loginUser %p -> %p\n", q, p));
	*(struct __ns1__loginUser*)p = *(struct __ns1__loginUser*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseFileObjectDataProvider(struct soap *soap, _ns1__CloseFileObjectDataProvider *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CloseFileObjectDataProvider))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseFileObjectDataProvider(struct soap *soap, const char *tag, int id, _ns1__CloseFileObjectDataProvider *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CloseFileObjectDataProvider);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CloseFileObjectDataProvider ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseFileObjectDataProvider(struct soap *soap, const char *tag, _ns1__CloseFileObjectDataProvider **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CloseFileObjectDataProvider **)soap_malloc(soap, sizeof(_ns1__CloseFileObjectDataProvider *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CloseFileObjectDataProvider *)soap_instantiate__ns1__CloseFileObjectDataProvider(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CloseFileObjectDataProvider ** p = (_ns1__CloseFileObjectDataProvider **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CloseFileObjectDataProvider, sizeof(_ns1__CloseFileObjectDataProvider), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseFileObjectDataProvider(struct soap *soap, _ns1__CloseFileObjectDataProvider *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CloseFileObjectDataProvider);
	if (soap_out_PointerTo_ns1__CloseFileObjectDataProvider(soap, tag?tag:"ns1:CloseFileObjectDataProvider", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CloseFileObjectDataProvider ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseFileObjectDataProvider(struct soap *soap, _ns1__CloseFileObjectDataProvider **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CloseFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DownloadFileObject(struct soap *soap, _ns1__DownloadFileObject *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DownloadFileObject))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DownloadFileObject(struct soap *soap, const char *tag, int id, _ns1__DownloadFileObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DownloadFileObject);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DownloadFileObject ** SOAP_FMAC4 soap_in_PointerTo_ns1__DownloadFileObject(struct soap *soap, const char *tag, _ns1__DownloadFileObject **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DownloadFileObject **)soap_malloc(soap, sizeof(_ns1__DownloadFileObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DownloadFileObject *)soap_instantiate__ns1__DownloadFileObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DownloadFileObject ** p = (_ns1__DownloadFileObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DownloadFileObject, sizeof(_ns1__DownloadFileObject), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DownloadFileObject(struct soap *soap, _ns1__DownloadFileObject *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DownloadFileObject);
	if (soap_out_PointerTo_ns1__DownloadFileObject(soap, tag?tag:"ns1:DownloadFileObject", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DownloadFileObject ** SOAP_FMAC4 soap_get_PointerTo_ns1__DownloadFileObject(struct soap *soap, _ns1__DownloadFileObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DownloadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenServerObjectDataProvider(struct soap *soap, _ns1__OpenServerObjectDataProvider *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OpenServerObjectDataProvider))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenServerObjectDataProvider(struct soap *soap, const char *tag, int id, _ns1__OpenServerObjectDataProvider *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OpenServerObjectDataProvider);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__OpenServerObjectDataProvider ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenServerObjectDataProvider(struct soap *soap, const char *tag, _ns1__OpenServerObjectDataProvider **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OpenServerObjectDataProvider **)soap_malloc(soap, sizeof(_ns1__OpenServerObjectDataProvider *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OpenServerObjectDataProvider *)soap_instantiate__ns1__OpenServerObjectDataProvider(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__OpenServerObjectDataProvider ** p = (_ns1__OpenServerObjectDataProvider **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OpenServerObjectDataProvider, sizeof(_ns1__OpenServerObjectDataProvider), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenServerObjectDataProvider(struct soap *soap, _ns1__OpenServerObjectDataProvider *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__OpenServerObjectDataProvider);
	if (soap_out_PointerTo_ns1__OpenServerObjectDataProvider(soap, tag?tag:"ns1:OpenServerObjectDataProvider", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OpenServerObjectDataProvider ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenServerObjectDataProvider(struct soap *soap, _ns1__OpenServerObjectDataProvider **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OpenServerObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenTapModelDataProvider(struct soap *soap, _ns1__OpenTapModelDataProvider *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OpenTapModelDataProvider))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenTapModelDataProvider(struct soap *soap, const char *tag, int id, _ns1__OpenTapModelDataProvider *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OpenTapModelDataProvider);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__OpenTapModelDataProvider ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenTapModelDataProvider(struct soap *soap, const char *tag, _ns1__OpenTapModelDataProvider **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OpenTapModelDataProvider **)soap_malloc(soap, sizeof(_ns1__OpenTapModelDataProvider *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OpenTapModelDataProvider *)soap_instantiate__ns1__OpenTapModelDataProvider(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__OpenTapModelDataProvider ** p = (_ns1__OpenTapModelDataProvider **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OpenTapModelDataProvider, sizeof(_ns1__OpenTapModelDataProvider), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenTapModelDataProvider(struct soap *soap, _ns1__OpenTapModelDataProvider *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__OpenTapModelDataProvider);
	if (soap_out_PointerTo_ns1__OpenTapModelDataProvider(soap, tag?tag:"ns1:OpenTapModelDataProvider", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OpenTapModelDataProvider ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenTapModelDataProvider(struct soap *soap, _ns1__OpenTapModelDataProvider **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OpenTapModelDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenFileObjectDataProvider(struct soap *soap, _ns1__OpenFileObjectDataProvider *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OpenFileObjectDataProvider))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenFileObjectDataProvider(struct soap *soap, const char *tag, int id, _ns1__OpenFileObjectDataProvider *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OpenFileObjectDataProvider);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__OpenFileObjectDataProvider ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenFileObjectDataProvider(struct soap *soap, const char *tag, _ns1__OpenFileObjectDataProvider **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OpenFileObjectDataProvider **)soap_malloc(soap, sizeof(_ns1__OpenFileObjectDataProvider *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OpenFileObjectDataProvider *)soap_instantiate__ns1__OpenFileObjectDataProvider(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__OpenFileObjectDataProvider ** p = (_ns1__OpenFileObjectDataProvider **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OpenFileObjectDataProvider, sizeof(_ns1__OpenFileObjectDataProvider), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenFileObjectDataProvider(struct soap *soap, _ns1__OpenFileObjectDataProvider *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__OpenFileObjectDataProvider);
	if (soap_out_PointerTo_ns1__OpenFileObjectDataProvider(soap, tag?tag:"ns1:OpenFileObjectDataProvider", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OpenFileObjectDataProvider ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenFileObjectDataProvider(struct soap *soap, _ns1__OpenFileObjectDataProvider **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OpenFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__FinalizeFileObjectData(struct soap *soap, _ns1__FinalizeFileObjectData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__FinalizeFileObjectData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__FinalizeFileObjectData(struct soap *soap, const char *tag, int id, _ns1__FinalizeFileObjectData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__FinalizeFileObjectData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__FinalizeFileObjectData ** SOAP_FMAC4 soap_in_PointerTo_ns1__FinalizeFileObjectData(struct soap *soap, const char *tag, _ns1__FinalizeFileObjectData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__FinalizeFileObjectData **)soap_malloc(soap, sizeof(_ns1__FinalizeFileObjectData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__FinalizeFileObjectData *)soap_instantiate__ns1__FinalizeFileObjectData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__FinalizeFileObjectData ** p = (_ns1__FinalizeFileObjectData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__FinalizeFileObjectData, sizeof(_ns1__FinalizeFileObjectData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__FinalizeFileObjectData(struct soap *soap, _ns1__FinalizeFileObjectData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__FinalizeFileObjectData);
	if (soap_out_PointerTo_ns1__FinalizeFileObjectData(soap, tag?tag:"ns1:FinalizeFileObjectData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__FinalizeFileObjectData ** SOAP_FMAC4 soap_get_PointerTo_ns1__FinalizeFileObjectData(struct soap *soap, _ns1__FinalizeFileObjectData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__FinalizeFileObjectData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadFileObject(struct soap *soap, _ns1__UploadFileObject *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__UploadFileObject))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadFileObject(struct soap *soap, const char *tag, int id, _ns1__UploadFileObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__UploadFileObject);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__UploadFileObject ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadFileObject(struct soap *soap, const char *tag, _ns1__UploadFileObject **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__UploadFileObject **)soap_malloc(soap, sizeof(_ns1__UploadFileObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__UploadFileObject *)soap_instantiate__ns1__UploadFileObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__UploadFileObject ** p = (_ns1__UploadFileObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__UploadFileObject, sizeof(_ns1__UploadFileObject), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadFileObject(struct soap *soap, _ns1__UploadFileObject *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__UploadFileObject);
	if (soap_out_PointerTo_ns1__UploadFileObject(soap, tag?tag:"ns1:UploadFileObject", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__UploadFileObject ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadFileObject(struct soap *soap, _ns1__UploadFileObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__UploadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DownloadFileById(struct soap *soap, _ns1__DownloadFileById *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DownloadFileById))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DownloadFileById(struct soap *soap, const char *tag, int id, _ns1__DownloadFileById *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DownloadFileById);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DownloadFileById ** SOAP_FMAC4 soap_in_PointerTo_ns1__DownloadFileById(struct soap *soap, const char *tag, _ns1__DownloadFileById **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DownloadFileById **)soap_malloc(soap, sizeof(_ns1__DownloadFileById *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DownloadFileById *)soap_instantiate__ns1__DownloadFileById(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DownloadFileById ** p = (_ns1__DownloadFileById **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DownloadFileById, sizeof(_ns1__DownloadFileById), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DownloadFileById(struct soap *soap, _ns1__DownloadFileById *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DownloadFileById);
	if (soap_out_PointerTo_ns1__DownloadFileById(soap, tag?tag:"ns1:DownloadFileById", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DownloadFileById ** SOAP_FMAC4 soap_get_PointerTo_ns1__DownloadFileById(struct soap *soap, _ns1__DownloadFileById **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DownloadFileById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteObject(struct soap *soap, _ns1__DeleteObject *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DeleteObject))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteObject(struct soap *soap, const char *tag, int id, _ns1__DeleteObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DeleteObject);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DeleteObject ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteObject(struct soap *soap, const char *tag, _ns1__DeleteObject **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DeleteObject **)soap_malloc(soap, sizeof(_ns1__DeleteObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DeleteObject *)soap_instantiate__ns1__DeleteObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DeleteObject ** p = (_ns1__DeleteObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DeleteObject, sizeof(_ns1__DeleteObject), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteObject(struct soap *soap, _ns1__DeleteObject *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DeleteObject);
	if (soap_out_PointerTo_ns1__DeleteObject(soap, tag?tag:"ns1:DeleteObject", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DeleteObject ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteObject(struct soap *soap, _ns1__DeleteObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DeleteObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, _ns1__SaveOrUpdateObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SaveOrUpdateObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, _ns1__SaveOrUpdateObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SaveOrUpdateObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjects ** SOAP_FMAC4 soap_in_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, _ns1__SaveOrUpdateObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SaveOrUpdateObjects **)soap_malloc(soap, sizeof(_ns1__SaveOrUpdateObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SaveOrUpdateObjects *)soap_instantiate__ns1__SaveOrUpdateObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SaveOrUpdateObjects ** p = (_ns1__SaveOrUpdateObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SaveOrUpdateObjects, sizeof(_ns1__SaveOrUpdateObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, _ns1__SaveOrUpdateObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SaveOrUpdateObjects);
	if (soap_out_PointerTo_ns1__SaveOrUpdateObjects(soap, tag?tag:"ns1:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjects ** SOAP_FMAC4 soap_get_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, _ns1__SaveOrUpdateObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MatchTowerParts(struct soap *soap, _ns1__MatchTowerParts *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MatchTowerParts))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MatchTowerParts(struct soap *soap, const char *tag, int id, _ns1__MatchTowerParts *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MatchTowerParts);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MatchTowerParts ** SOAP_FMAC4 soap_in_PointerTo_ns1__MatchTowerParts(struct soap *soap, const char *tag, _ns1__MatchTowerParts **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MatchTowerParts **)soap_malloc(soap, sizeof(_ns1__MatchTowerParts *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MatchTowerParts *)soap_instantiate__ns1__MatchTowerParts(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MatchTowerParts ** p = (_ns1__MatchTowerParts **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MatchTowerParts, sizeof(_ns1__MatchTowerParts), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MatchTowerParts(struct soap *soap, _ns1__MatchTowerParts *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__MatchTowerParts);
	if (soap_out_PointerTo_ns1__MatchTowerParts(soap, tag?tag:"ns1:MatchTowerParts", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MatchTowerParts ** SOAP_FMAC4 soap_get_PointerTo_ns1__MatchTowerParts(struct soap *soap, _ns1__MatchTowerParts **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MatchTowerParts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, _ns1__GetTowerPartsLabelAndVersionSerial *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, int id, _ns1__GetTowerPartsLabelAndVersionSerial *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTowerPartsLabelAndVersionSerial ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, _ns1__GetTowerPartsLabelAndVersionSerial **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTowerPartsLabelAndVersionSerial **)soap_malloc(soap, sizeof(_ns1__GetTowerPartsLabelAndVersionSerial *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTowerPartsLabelAndVersionSerial *)soap_instantiate__ns1__GetTowerPartsLabelAndVersionSerial(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetTowerPartsLabelAndVersionSerial ** p = (_ns1__GetTowerPartsLabelAndVersionSerial **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTowerPartsLabelAndVersionSerial, sizeof(_ns1__GetTowerPartsLabelAndVersionSerial), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, _ns1__GetTowerPartsLabelAndVersionSerial *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial);
	if (soap_out_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, tag?tag:"ns1:GetTowerPartsLabelAndVersionSerial", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetTowerPartsLabelAndVersionSerial ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(struct soap *soap, _ns1__GetTowerPartsLabelAndVersionSerial **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTowerPartsLabelAndVersionSerial(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetObjectsVersion(struct soap *soap, _ns1__GetObjectsVersion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetObjectsVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetObjectsVersion(struct soap *soap, const char *tag, int id, _ns1__GetObjectsVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetObjectsVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetObjectsVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetObjectsVersion(struct soap *soap, const char *tag, _ns1__GetObjectsVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetObjectsVersion **)soap_malloc(soap, sizeof(_ns1__GetObjectsVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetObjectsVersion *)soap_instantiate__ns1__GetObjectsVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetObjectsVersion ** p = (_ns1__GetObjectsVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetObjectsVersion, sizeof(_ns1__GetObjectsVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetObjectsVersion(struct soap *soap, _ns1__GetObjectsVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetObjectsVersion);
	if (soap_out_PointerTo_ns1__GetObjectsVersion(soap, tag?tag:"ns1:GetObjectsVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetObjectsVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetObjectsVersion(struct soap *soap, _ns1__GetObjectsVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetObjectsVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DownloadObjects(struct soap *soap, _ns1__DownloadObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DownloadObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DownloadObjects(struct soap *soap, const char *tag, int id, _ns1__DownloadObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DownloadObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DownloadObjects ** SOAP_FMAC4 soap_in_PointerTo_ns1__DownloadObjects(struct soap *soap, const char *tag, _ns1__DownloadObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DownloadObjects **)soap_malloc(soap, sizeof(_ns1__DownloadObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DownloadObjects *)soap_instantiate__ns1__DownloadObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DownloadObjects ** p = (_ns1__DownloadObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DownloadObjects, sizeof(_ns1__DownloadObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DownloadObjects(struct soap *soap, _ns1__DownloadObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DownloadObjects);
	if (soap_out_PointerTo_ns1__DownloadObjects(soap, tag?tag:"ns1:DownloadObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DownloadObjects ** SOAP_FMAC4 soap_get_PointerTo_ns1__DownloadObjects(struct soap *soap, _ns1__DownloadObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QueryObjects(struct soap *soap, _ns1__QueryObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__QueryObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QueryObjects(struct soap *soap, const char *tag, int id, _ns1__QueryObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__QueryObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__QueryObjects ** SOAP_FMAC4 soap_in_PointerTo_ns1__QueryObjects(struct soap *soap, const char *tag, _ns1__QueryObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__QueryObjects **)soap_malloc(soap, sizeof(_ns1__QueryObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__QueryObjects *)soap_instantiate__ns1__QueryObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__QueryObjects ** p = (_ns1__QueryObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__QueryObjects, sizeof(_ns1__QueryObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QueryObjects(struct soap *soap, _ns1__QueryObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__QueryObjects);
	if (soap_out_PointerTo_ns1__QueryObjects(soap, tag?tag:"ns1:QueryObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__QueryObjects ** SOAP_FMAC4 soap_get_PointerTo_ns1__QueryObjects(struct soap *soap, _ns1__QueryObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__logoutUser(struct soap *soap, _ns1__logoutUser *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__logoutUser))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__logoutUser(struct soap *soap, const char *tag, int id, _ns1__logoutUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__logoutUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__logoutUser ** SOAP_FMAC4 soap_in_PointerTo_ns1__logoutUser(struct soap *soap, const char *tag, _ns1__logoutUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__logoutUser **)soap_malloc(soap, sizeof(_ns1__logoutUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__logoutUser *)soap_instantiate__ns1__logoutUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__logoutUser ** p = (_ns1__logoutUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__logoutUser, sizeof(_ns1__logoutUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__logoutUser(struct soap *soap, _ns1__logoutUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__logoutUser);
	if (soap_out_PointerTo_ns1__logoutUser(soap, tag?tag:"ns1:logoutUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__logoutUser ** SOAP_FMAC4 soap_get_PointerTo_ns1__logoutUser(struct soap *soap, _ns1__logoutUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__logoutUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__loginUserByByteArr(struct soap *soap, _ns1__loginUserByByteArr *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__loginUserByByteArr))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__loginUserByByteArr(struct soap *soap, const char *tag, int id, _ns1__loginUserByByteArr *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__loginUserByByteArr);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__loginUserByByteArr ** SOAP_FMAC4 soap_in_PointerTo_ns1__loginUserByByteArr(struct soap *soap, const char *tag, _ns1__loginUserByByteArr **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__loginUserByByteArr **)soap_malloc(soap, sizeof(_ns1__loginUserByByteArr *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__loginUserByByteArr *)soap_instantiate__ns1__loginUserByByteArr(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__loginUserByByteArr ** p = (_ns1__loginUserByByteArr **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__loginUserByByteArr, sizeof(_ns1__loginUserByByteArr), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__loginUserByByteArr(struct soap *soap, _ns1__loginUserByByteArr *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__loginUserByByteArr);
	if (soap_out_PointerTo_ns1__loginUserByByteArr(soap, tag?tag:"ns1:loginUserByByteArr", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__loginUserByByteArr ** SOAP_FMAC4 soap_get_PointerTo_ns1__loginUserByByteArr(struct soap *soap, _ns1__loginUserByByteArr **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__loginUserByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__loginUser(struct soap *soap, _ns1__loginUser *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__loginUser))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__loginUser(struct soap *soap, const char *tag, int id, _ns1__loginUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__loginUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__loginUser ** SOAP_FMAC4 soap_in_PointerTo_ns1__loginUser(struct soap *soap, const char *tag, _ns1__loginUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__loginUser **)soap_malloc(soap, sizeof(_ns1__loginUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__loginUser *)soap_instantiate__ns1__loginUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__loginUser ** p = (_ns1__loginUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__loginUser, sizeof(_ns1__loginUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__loginUser(struct soap *soap, _ns1__loginUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__loginUser);
	if (soap_out_PointerTo_ns1__loginUser(soap, tag?tag:"ns1:loginUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__loginUser ** SOAP_FMAC4 soap_get_PointerTo_ns1__loginUser(struct soap *soap, _ns1__loginUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__loginUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfUnsignedInt(struct soap *soap, ns1__ArrayOfUnsignedInt *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfUnsignedInt))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfUnsignedInt(struct soap *soap, const char *tag, int id, ns1__ArrayOfUnsignedInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfUnsignedInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfUnsignedInt ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfUnsignedInt(struct soap *soap, const char *tag, ns1__ArrayOfUnsignedInt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfUnsignedInt **)soap_malloc(soap, sizeof(ns1__ArrayOfUnsignedInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfUnsignedInt *)soap_instantiate_ns1__ArrayOfUnsignedInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfUnsignedInt ** p = (ns1__ArrayOfUnsignedInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfUnsignedInt, sizeof(ns1__ArrayOfUnsignedInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfUnsignedInt(struct soap *soap, ns1__ArrayOfUnsignedInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfUnsignedInt);
	if (soap_out_PointerTons1__ArrayOfUnsignedInt(soap, tag?tag:"ns1:ArrayOfUnsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfUnsignedInt ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfUnsignedInt(struct soap *soap, ns1__ArrayOfUnsignedInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfUnsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfInt))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfInt(struct soap *soap, const char *tag, int id, ns1__ArrayOfInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfInt ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfInt(struct soap *soap, const char *tag, ns1__ArrayOfInt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfInt **)soap_malloc(soap, sizeof(ns1__ArrayOfInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfInt *)soap_instantiate_ns1__ArrayOfInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfInt ** p = (ns1__ArrayOfInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfInt, sizeof(ns1__ArrayOfInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfInt);
	if (soap_out_PointerTons1__ArrayOfInt(soap, tag?tag:"ns1:ArrayOfInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfInt ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)(void*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"xsd:base64Binary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap *soap, unsigned int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedInt);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap *soap, const char *tag, int id, unsigned int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedInt);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedInt(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap *soap, const char *tag, unsigned int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned int **)soap_malloc(soap, sizeof(unsigned int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedInt(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedInt, sizeof(unsigned int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap *soap, unsigned int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedInt);
	if (soap_out_PointerTounsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap *soap, unsigned int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
