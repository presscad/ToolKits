/* soapC.cpp
   Generated by gSOAP 2.8.19 from d:\Structure\!ClientServTemp\ClientServer.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.19 2018-11-02 07:00:07 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_VersionServ__FileHeader:
		return soap_in_VersionServ__FileHeader(soap, NULL, NULL, "VersionServ:FileHeader");
	case SOAP_TYPE_VersionServ__DownLoadItem:
		return soap_in_VersionServ__DownLoadItem(soap, NULL, NULL, "VersionServ:DownLoadItem");
	case SOAP_TYPE_VersionServ__ArrayOfDownLoadItem:
		return soap_in_VersionServ__ArrayOfDownLoadItem(soap, NULL, NULL, "VersionServ:ArrayOfDownLoadItem");
	case SOAP_TYPE_VersionServ__ObjectV:
		return soap_in_VersionServ__ObjectV(soap, NULL, NULL, "VersionServ:ObjectV");
	case SOAP_TYPE_VersionServ__DogAccessHistory:
		return soap_in_VersionServ__DogAccessHistory(soap, NULL, NULL, "VersionServ:DogAccessHistory");
	case SOAP_TYPE_VersionServ__VersionRevision:
		return soap_in_VersionServ__VersionRevision(soap, NULL, NULL, "VersionServ:VersionRevision");
	case SOAP_TYPE_VersionServ__ArrayOfVersionRevision:
		return soap_in_VersionServ__ArrayOfVersionRevision(soap, NULL, NULL, "VersionServ:ArrayOfVersionRevision");
	case SOAP_TYPE_VersionServ__ArrayOfInt:
		return soap_in_VersionServ__ArrayOfInt(soap, NULL, NULL, "VersionServ:ArrayOfInt");
	case SOAP_TYPE_VersionServ__ProductVersion:
		return soap_in_VersionServ__ProductVersion(soap, NULL, NULL, "VersionServ:ProductVersion");
	case SOAP_TYPE_VersionServ__ArrayOfProductVersion:
		return soap_in_VersionServ__ArrayOfProductVersion(soap, NULL, NULL, "VersionServ:ArrayOfProductVersion");
	case SOAP_TYPE_TMSServ__ArrayOfUnsignedInt:
		return soap_in_TMSServ__ArrayOfUnsignedInt(soap, NULL, NULL, "TMSServ:ArrayOfUnsignedInt");
	case SOAP_TYPE_TMSServ__ArrayOfInt:
		return soap_in_TMSServ__ArrayOfInt(soap, NULL, NULL, "TMSServ:ArrayOfInt");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_VersionServ__SaveOrUpdateObjects:
		return soap_in_PointerTo_VersionServ__SaveOrUpdateObjects(soap, NULL, NULL, "VersionServ:SaveOrUpdateObjects");
	case SOAP_TYPE_PointerTo_VersionServ__DownloadObjects:
		return soap_in_PointerTo_VersionServ__DownloadObjects(soap, NULL, NULL, "VersionServ:DownloadObjects");
	case SOAP_TYPE_PointerTo_VersionServ__QueryObjects:
		return soap_in_PointerTo_VersionServ__QueryObjects(soap, NULL, NULL, "VersionServ:QueryObjects");
	case SOAP_TYPE_PointerTo_VersionServ__GetFileHeader:
		return soap_in_PointerTo_VersionServ__GetFileHeader(soap, NULL, NULL, "VersionServ:GetFileHeader");
	case SOAP_TYPE_PointerTo_VersionServ__QueryDownLoadItemArrByProductId:
		return soap_in_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, NULL, NULL, "VersionServ:QueryDownLoadItemArrByProductId");
	case SOAP_TYPE_PointerTo_VersionServ__GetDogAccessHistory:
		return soap_in_PointerTo_VersionServ__GetDogAccessHistory(soap, NULL, NULL, "VersionServ:GetDogAccessHistory");
	case SOAP_TYPE_PointerTo_VersionServ__GetVersionReleaseNotes:
		return soap_in_PointerTo_VersionServ__GetVersionReleaseNotes(soap, NULL, NULL, "VersionServ:GetVersionReleaseNotes");
	case SOAP_TYPE_PointerTo_VersionServ__CompareVersion:
		return soap_in_PointerTo_VersionServ__CompareVersion(soap, NULL, NULL, "VersionServ:CompareVersion");
	case SOAP_TYPE_PointerTo_VersionServ__SetRevisionReadFlag:
		return soap_in_PointerTo_VersionServ__SetRevisionReadFlag(soap, NULL, NULL, "VersionServ:SetRevisionReadFlag");
	case SOAP_TYPE_PointerTo_VersionServ__GetUpdateVerByCurVer:
		return soap_in_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, NULL, NULL, "VersionServ:GetUpdateVerByCurVer");
	case SOAP_TYPE_PointerTo_VersionServ__LoginByByteArr:
		return soap_in_PointerTo_VersionServ__LoginByByteArr(soap, NULL, NULL, "VersionServ:LoginByByteArr");
	case SOAP_TYPE_PointerTo_VersionServ__Login:
		return soap_in_PointerTo_VersionServ__Login(soap, NULL, NULL, "VersionServ:Login");
	case SOAP_TYPE_PointerToVersionServ__FileHeader:
		return soap_in_PointerToVersionServ__FileHeader(soap, NULL, NULL, "VersionServ:FileHeader");
	case SOAP_TYPE_PointerToVersionServ__ArrayOfDownLoadItem:
		return soap_in_PointerToVersionServ__ArrayOfDownLoadItem(soap, NULL, NULL, "VersionServ:ArrayOfDownLoadItem");
	case SOAP_TYPE_PointerToVersionServ__DogAccessHistory:
		return soap_in_PointerToVersionServ__DogAccessHistory(soap, NULL, NULL, "VersionServ:DogAccessHistory");
	case SOAP_TYPE_PointerToVersionServ__ArrayOfVersionRevision:
		return soap_in_PointerToVersionServ__ArrayOfVersionRevision(soap, NULL, NULL, "VersionServ:ArrayOfVersionRevision");
	case SOAP_TYPE_PointerToVersionServ__ArrayOfInt:
		return soap_in_PointerToVersionServ__ArrayOfInt(soap, NULL, NULL, "VersionServ:ArrayOfInt");
	case SOAP_TYPE_PointerToVersionServ__ArrayOfProductVersion:
		return soap_in_PointerToVersionServ__ArrayOfProductVersion(soap, NULL, NULL, "VersionServ:ArrayOfProductVersion");
	case SOAP_TYPE_PointerToPointerToVersionServ__DownLoadItem:
		return soap_in_PointerToPointerToVersionServ__DownLoadItem(soap, NULL, NULL, "VersionServ:DownLoadItem");
	case SOAP_TYPE_PointerToVersionServ__DownLoadItem:
		return soap_in_PointerToVersionServ__DownLoadItem(soap, NULL, NULL, "VersionServ:DownLoadItem");
	case SOAP_TYPE_PointerToPointerToVersionServ__VersionRevision:
		return soap_in_PointerToPointerToVersionServ__VersionRevision(soap, NULL, NULL, "VersionServ:VersionRevision");
	case SOAP_TYPE_PointerToVersionServ__VersionRevision:
		return soap_in_PointerToVersionServ__VersionRevision(soap, NULL, NULL, "VersionServ:VersionRevision");
	case SOAP_TYPE_PointerToPointerToVersionServ__ProductVersion:
		return soap_in_PointerToPointerToVersionServ__ProductVersion(soap, NULL, NULL, "VersionServ:ProductVersion");
	case SOAP_TYPE_PointerToVersionServ__ProductVersion:
		return soap_in_PointerToVersionServ__ProductVersion(soap, NULL, NULL, "VersionServ:ProductVersion");
	case SOAP_TYPE_PointerTo_TMSServ__CloseFileObjectDataProvider:
		return soap_in_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, NULL, NULL, "TMSServ:CloseFileObjectDataProvider");
	case SOAP_TYPE_PointerTo_TMSServ__DownloadFileObject:
		return soap_in_PointerTo_TMSServ__DownloadFileObject(soap, NULL, NULL, "TMSServ:DownloadFileObject");
	case SOAP_TYPE_PointerTo_TMSServ__OpenServerObjectDataProvider:
		return soap_in_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, NULL, NULL, "TMSServ:OpenServerObjectDataProvider");
	case SOAP_TYPE_PointerTo_TMSServ__OpenTapModelDataProvider:
		return soap_in_PointerTo_TMSServ__OpenTapModelDataProvider(soap, NULL, NULL, "TMSServ:OpenTapModelDataProvider");
	case SOAP_TYPE_PointerTo_TMSServ__OpenFileObjectDataProvider:
		return soap_in_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, NULL, NULL, "TMSServ:OpenFileObjectDataProvider");
	case SOAP_TYPE_PointerTo_TMSServ__FinalizeFileObjectData:
		return soap_in_PointerTo_TMSServ__FinalizeFileObjectData(soap, NULL, NULL, "TMSServ:FinalizeFileObjectData");
	case SOAP_TYPE_PointerTo_TMSServ__UploadFileObject:
		return soap_in_PointerTo_TMSServ__UploadFileObject(soap, NULL, NULL, "TMSServ:UploadFileObject");
	case SOAP_TYPE_PointerTo_TMSServ__DownloadFileById:
		return soap_in_PointerTo_TMSServ__DownloadFileById(soap, NULL, NULL, "TMSServ:DownloadFileById");
	case SOAP_TYPE_PointerTo_TMSServ__DeleteObject:
		return soap_in_PointerTo_TMSServ__DeleteObject(soap, NULL, NULL, "TMSServ:DeleteObject");
	case SOAP_TYPE_PointerTo_TMSServ__SaveOrUpdateObjects:
		return soap_in_PointerTo_TMSServ__SaveOrUpdateObjects(soap, NULL, NULL, "TMSServ:SaveOrUpdateObjects");
	case SOAP_TYPE_PointerTo_TMSServ__MatchTowerParts:
		return soap_in_PointerTo_TMSServ__MatchTowerParts(soap, NULL, NULL, "TMSServ:MatchTowerParts");
	case SOAP_TYPE_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial:
		return soap_in_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, NULL, NULL, "TMSServ:GetTowerPartsLabelAndVersionSerial");
	case SOAP_TYPE_PointerTo_TMSServ__GetObjectsVersion:
		return soap_in_PointerTo_TMSServ__GetObjectsVersion(soap, NULL, NULL, "TMSServ:GetObjectsVersion");
	case SOAP_TYPE_PointerTo_TMSServ__DownloadObjects:
		return soap_in_PointerTo_TMSServ__DownloadObjects(soap, NULL, NULL, "TMSServ:DownloadObjects");
	case SOAP_TYPE_PointerTo_TMSServ__QueryObjects:
		return soap_in_PointerTo_TMSServ__QueryObjects(soap, NULL, NULL, "TMSServ:QueryObjects");
	case SOAP_TYPE_PointerTo_TMSServ__logoutUser:
		return soap_in_PointerTo_TMSServ__logoutUser(soap, NULL, NULL, "TMSServ:logoutUser");
	case SOAP_TYPE_PointerTo_TMSServ__loginUserByByteArr:
		return soap_in_PointerTo_TMSServ__loginUserByByteArr(soap, NULL, NULL, "TMSServ:loginUserByByteArr");
	case SOAP_TYPE_PointerTo_TMSServ__loginUser:
		return soap_in_PointerTo_TMSServ__loginUser(soap, NULL, NULL, "TMSServ:loginUser");
	case SOAP_TYPE_PointerToTMSServ__ArrayOfUnsignedInt:
		return soap_in_PointerToTMSServ__ArrayOfUnsignedInt(soap, NULL, NULL, "TMSServ:ArrayOfUnsignedInt");
	case SOAP_TYPE_PointerToTMSServ__ArrayOfInt:
		return soap_in_PointerToTMSServ__ArrayOfInt(soap, NULL, NULL, "TMSServ:ArrayOfInt");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_in_PointerTounsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "VersionServ:FileHeader"))
		{	*type = SOAP_TYPE_VersionServ__FileHeader;
			return soap_in_VersionServ__FileHeader(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:DownLoadItem"))
		{	*type = SOAP_TYPE_VersionServ__DownLoadItem;
			return soap_in_VersionServ__DownLoadItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:ArrayOfDownLoadItem"))
		{	*type = SOAP_TYPE_VersionServ__ArrayOfDownLoadItem;
			return soap_in_VersionServ__ArrayOfDownLoadItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:ObjectV"))
		{	*type = SOAP_TYPE_VersionServ__ObjectV;
			return soap_in_VersionServ__ObjectV(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:DogAccessHistory"))
		{	*type = SOAP_TYPE_VersionServ__DogAccessHistory;
			return soap_in_VersionServ__DogAccessHistory(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:VersionRevision"))
		{	*type = SOAP_TYPE_VersionServ__VersionRevision;
			return soap_in_VersionServ__VersionRevision(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:ArrayOfVersionRevision"))
		{	*type = SOAP_TYPE_VersionServ__ArrayOfVersionRevision;
			return soap_in_VersionServ__ArrayOfVersionRevision(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:ArrayOfInt"))
		{	*type = SOAP_TYPE_VersionServ__ArrayOfInt;
			return soap_in_VersionServ__ArrayOfInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:ProductVersion"))
		{	*type = SOAP_TYPE_VersionServ__ProductVersion;
			return soap_in_VersionServ__ProductVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:ArrayOfProductVersion"))
		{	*type = SOAP_TYPE_VersionServ__ArrayOfProductVersion;
			return soap_in_VersionServ__ArrayOfProductVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:ArrayOfUnsignedInt"))
		{	*type = SOAP_TYPE_TMSServ__ArrayOfUnsignedInt;
			return soap_in_TMSServ__ArrayOfUnsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:ArrayOfInt"))
		{	*type = SOAP_TYPE_TMSServ__ArrayOfInt;
			return soap_in_TMSServ__ArrayOfInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "VersionServ:SaveOrUpdateObjectsResponse"))
		{	*type = SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse;
			return soap_in__VersionServ__SaveOrUpdateObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:SaveOrUpdateObjects"))
		{	*type = SOAP_TYPE__VersionServ__SaveOrUpdateObjects;
			return soap_in__VersionServ__SaveOrUpdateObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:DownloadObjectsResponse"))
		{	*type = SOAP_TYPE__VersionServ__DownloadObjectsResponse;
			return soap_in__VersionServ__DownloadObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:DownloadObjects"))
		{	*type = SOAP_TYPE__VersionServ__DownloadObjects;
			return soap_in__VersionServ__DownloadObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:QueryObjectsResponse"))
		{	*type = SOAP_TYPE__VersionServ__QueryObjectsResponse;
			return soap_in__VersionServ__QueryObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:QueryObjects"))
		{	*type = SOAP_TYPE__VersionServ__QueryObjects;
			return soap_in__VersionServ__QueryObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:GetFileHeaderResponse"))
		{	*type = SOAP_TYPE__VersionServ__GetFileHeaderResponse;
			return soap_in__VersionServ__GetFileHeaderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:GetFileHeader"))
		{	*type = SOAP_TYPE__VersionServ__GetFileHeader;
			return soap_in__VersionServ__GetFileHeader(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:QueryDownLoadItemArrByProductIdResponse"))
		{	*type = SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse;
			return soap_in__VersionServ__QueryDownLoadItemArrByProductIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:QueryDownLoadItemArrByProductId"))
		{	*type = SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId;
			return soap_in__VersionServ__QueryDownLoadItemArrByProductId(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:GetDogAccessHistoryResponse"))
		{	*type = SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse;
			return soap_in__VersionServ__GetDogAccessHistoryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:GetDogAccessHistory"))
		{	*type = SOAP_TYPE__VersionServ__GetDogAccessHistory;
			return soap_in__VersionServ__GetDogAccessHistory(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:GetVersionReleaseNotesResponse"))
		{	*type = SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse;
			return soap_in__VersionServ__GetVersionReleaseNotesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:GetVersionReleaseNotes"))
		{	*type = SOAP_TYPE__VersionServ__GetVersionReleaseNotes;
			return soap_in__VersionServ__GetVersionReleaseNotes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:CompareVersionResponse"))
		{	*type = SOAP_TYPE__VersionServ__CompareVersionResponse;
			return soap_in__VersionServ__CompareVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:CompareVersion"))
		{	*type = SOAP_TYPE__VersionServ__CompareVersion;
			return soap_in__VersionServ__CompareVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:SetRevisionReadFlagResponse"))
		{	*type = SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse;
			return soap_in__VersionServ__SetRevisionReadFlagResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:SetRevisionReadFlag"))
		{	*type = SOAP_TYPE__VersionServ__SetRevisionReadFlag;
			return soap_in__VersionServ__SetRevisionReadFlag(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:GetUpdateVerByCurVerResponse"))
		{	*type = SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse;
			return soap_in__VersionServ__GetUpdateVerByCurVerResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:GetUpdateVerByCurVer"))
		{	*type = SOAP_TYPE__VersionServ__GetUpdateVerByCurVer;
			return soap_in__VersionServ__GetUpdateVerByCurVer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:LoginByByteArrResponse"))
		{	*type = SOAP_TYPE__VersionServ__LoginByByteArrResponse;
			return soap_in__VersionServ__LoginByByteArrResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:LoginByByteArr"))
		{	*type = SOAP_TYPE__VersionServ__LoginByByteArr;
			return soap_in__VersionServ__LoginByByteArr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:LoginResponse"))
		{	*type = SOAP_TYPE__VersionServ__LoginResponse;
			return soap_in__VersionServ__LoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "VersionServ:Login"))
		{	*type = SOAP_TYPE__VersionServ__Login;
			return soap_in__VersionServ__Login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:CloseFileObjectDataProviderResponse"))
		{	*type = SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse;
			return soap_in__TMSServ__CloseFileObjectDataProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:CloseFileObjectDataProvider"))
		{	*type = SOAP_TYPE__TMSServ__CloseFileObjectDataProvider;
			return soap_in__TMSServ__CloseFileObjectDataProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:DownloadFileObjectResponse"))
		{	*type = SOAP_TYPE__TMSServ__DownloadFileObjectResponse;
			return soap_in__TMSServ__DownloadFileObjectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:DownloadFileObject"))
		{	*type = SOAP_TYPE__TMSServ__DownloadFileObject;
			return soap_in__TMSServ__DownloadFileObject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:OpenServerObjectDataProviderResponse"))
		{	*type = SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse;
			return soap_in__TMSServ__OpenServerObjectDataProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:OpenServerObjectDataProvider"))
		{	*type = SOAP_TYPE__TMSServ__OpenServerObjectDataProvider;
			return soap_in__TMSServ__OpenServerObjectDataProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:OpenTapModelDataProviderResponse"))
		{	*type = SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse;
			return soap_in__TMSServ__OpenTapModelDataProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:OpenTapModelDataProvider"))
		{	*type = SOAP_TYPE__TMSServ__OpenTapModelDataProvider;
			return soap_in__TMSServ__OpenTapModelDataProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:OpenFileObjectDataProviderResponse"))
		{	*type = SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse;
			return soap_in__TMSServ__OpenFileObjectDataProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:OpenFileObjectDataProvider"))
		{	*type = SOAP_TYPE__TMSServ__OpenFileObjectDataProvider;
			return soap_in__TMSServ__OpenFileObjectDataProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:FinalizeFileObjectDataResponse"))
		{	*type = SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse;
			return soap_in__TMSServ__FinalizeFileObjectDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:FinalizeFileObjectData"))
		{	*type = SOAP_TYPE__TMSServ__FinalizeFileObjectData;
			return soap_in__TMSServ__FinalizeFileObjectData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:UploadFileObjectResponse"))
		{	*type = SOAP_TYPE__TMSServ__UploadFileObjectResponse;
			return soap_in__TMSServ__UploadFileObjectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:UploadFileObject"))
		{	*type = SOAP_TYPE__TMSServ__UploadFileObject;
			return soap_in__TMSServ__UploadFileObject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:DownloadFileByIdResponse"))
		{	*type = SOAP_TYPE__TMSServ__DownloadFileByIdResponse;
			return soap_in__TMSServ__DownloadFileByIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:DownloadFileById"))
		{	*type = SOAP_TYPE__TMSServ__DownloadFileById;
			return soap_in__TMSServ__DownloadFileById(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:DeleteObjectResponse"))
		{	*type = SOAP_TYPE__TMSServ__DeleteObjectResponse;
			return soap_in__TMSServ__DeleteObjectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:DeleteObject"))
		{	*type = SOAP_TYPE__TMSServ__DeleteObject;
			return soap_in__TMSServ__DeleteObject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:SaveOrUpdateObjectsResponse"))
		{	*type = SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse;
			return soap_in__TMSServ__SaveOrUpdateObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:SaveOrUpdateObjects"))
		{	*type = SOAP_TYPE__TMSServ__SaveOrUpdateObjects;
			return soap_in__TMSServ__SaveOrUpdateObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:MatchTowerPartsResponse"))
		{	*type = SOAP_TYPE__TMSServ__MatchTowerPartsResponse;
			return soap_in__TMSServ__MatchTowerPartsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:MatchTowerParts"))
		{	*type = SOAP_TYPE__TMSServ__MatchTowerParts;
			return soap_in__TMSServ__MatchTowerParts(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:GetTowerPartsLabelAndVersionSerialResponse"))
		{	*type = SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse;
			return soap_in__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:GetTowerPartsLabelAndVersionSerial"))
		{	*type = SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial;
			return soap_in__TMSServ__GetTowerPartsLabelAndVersionSerial(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:GetObjectsVersionResponse"))
		{	*type = SOAP_TYPE__TMSServ__GetObjectsVersionResponse;
			return soap_in__TMSServ__GetObjectsVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:GetObjectsVersion"))
		{	*type = SOAP_TYPE__TMSServ__GetObjectsVersion;
			return soap_in__TMSServ__GetObjectsVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:DownloadObjectsResponse"))
		{	*type = SOAP_TYPE__TMSServ__DownloadObjectsResponse;
			return soap_in__TMSServ__DownloadObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:DownloadObjects"))
		{	*type = SOAP_TYPE__TMSServ__DownloadObjects;
			return soap_in__TMSServ__DownloadObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:QueryObjectsResponse"))
		{	*type = SOAP_TYPE__TMSServ__QueryObjectsResponse;
			return soap_in__TMSServ__QueryObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:QueryObjects"))
		{	*type = SOAP_TYPE__TMSServ__QueryObjects;
			return soap_in__TMSServ__QueryObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:logoutUserResponse"))
		{	*type = SOAP_TYPE__TMSServ__logoutUserResponse;
			return soap_in__TMSServ__logoutUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:logoutUser"))
		{	*type = SOAP_TYPE__TMSServ__logoutUser;
			return soap_in__TMSServ__logoutUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:loginUserByByteArrResponse"))
		{	*type = SOAP_TYPE__TMSServ__loginUserByByteArrResponse;
			return soap_in__TMSServ__loginUserByByteArrResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:loginUserByByteArr"))
		{	*type = SOAP_TYPE__TMSServ__loginUserByByteArr;
			return soap_in__TMSServ__loginUserByByteArr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:loginUserResponse"))
		{	*type = SOAP_TYPE__TMSServ__loginUserResponse;
			return soap_in__TMSServ__loginUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "TMSServ:loginUser"))
		{	*type = SOAP_TYPE__TMSServ__loginUser;
			return soap_in__TMSServ__loginUser(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse:
		return ((_VersionServ__SaveOrUpdateObjectsResponse *)ptr)->soap_out(soap, "VersionServ:SaveOrUpdateObjectsResponse", id, NULL);
	case SOAP_TYPE__VersionServ__SaveOrUpdateObjects:
		return ((_VersionServ__SaveOrUpdateObjects *)ptr)->soap_out(soap, "VersionServ:SaveOrUpdateObjects", id, NULL);
	case SOAP_TYPE__VersionServ__DownloadObjectsResponse:
		return ((_VersionServ__DownloadObjectsResponse *)ptr)->soap_out(soap, "VersionServ:DownloadObjectsResponse", id, NULL);
	case SOAP_TYPE__VersionServ__DownloadObjects:
		return ((_VersionServ__DownloadObjects *)ptr)->soap_out(soap, "VersionServ:DownloadObjects", id, NULL);
	case SOAP_TYPE__VersionServ__QueryObjectsResponse:
		return ((_VersionServ__QueryObjectsResponse *)ptr)->soap_out(soap, "VersionServ:QueryObjectsResponse", id, NULL);
	case SOAP_TYPE__VersionServ__QueryObjects:
		return ((_VersionServ__QueryObjects *)ptr)->soap_out(soap, "VersionServ:QueryObjects", id, NULL);
	case SOAP_TYPE__VersionServ__GetFileHeaderResponse:
		return ((_VersionServ__GetFileHeaderResponse *)ptr)->soap_out(soap, "VersionServ:GetFileHeaderResponse", id, NULL);
	case SOAP_TYPE__VersionServ__GetFileHeader:
		return ((_VersionServ__GetFileHeader *)ptr)->soap_out(soap, "VersionServ:GetFileHeader", id, NULL);
	case SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse:
		return ((_VersionServ__QueryDownLoadItemArrByProductIdResponse *)ptr)->soap_out(soap, "VersionServ:QueryDownLoadItemArrByProductIdResponse", id, NULL);
	case SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId:
		return ((_VersionServ__QueryDownLoadItemArrByProductId *)ptr)->soap_out(soap, "VersionServ:QueryDownLoadItemArrByProductId", id, NULL);
	case SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse:
		return ((_VersionServ__GetDogAccessHistoryResponse *)ptr)->soap_out(soap, "VersionServ:GetDogAccessHistoryResponse", id, NULL);
	case SOAP_TYPE__VersionServ__GetDogAccessHistory:
		return ((_VersionServ__GetDogAccessHistory *)ptr)->soap_out(soap, "VersionServ:GetDogAccessHistory", id, NULL);
	case SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse:
		return ((_VersionServ__GetVersionReleaseNotesResponse *)ptr)->soap_out(soap, "VersionServ:GetVersionReleaseNotesResponse", id, NULL);
	case SOAP_TYPE__VersionServ__GetVersionReleaseNotes:
		return ((_VersionServ__GetVersionReleaseNotes *)ptr)->soap_out(soap, "VersionServ:GetVersionReleaseNotes", id, NULL);
	case SOAP_TYPE__VersionServ__CompareVersionResponse:
		return ((_VersionServ__CompareVersionResponse *)ptr)->soap_out(soap, "VersionServ:CompareVersionResponse", id, NULL);
	case SOAP_TYPE__VersionServ__CompareVersion:
		return ((_VersionServ__CompareVersion *)ptr)->soap_out(soap, "VersionServ:CompareVersion", id, NULL);
	case SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse:
		return ((_VersionServ__SetRevisionReadFlagResponse *)ptr)->soap_out(soap, "VersionServ:SetRevisionReadFlagResponse", id, NULL);
	case SOAP_TYPE__VersionServ__SetRevisionReadFlag:
		return ((_VersionServ__SetRevisionReadFlag *)ptr)->soap_out(soap, "VersionServ:SetRevisionReadFlag", id, NULL);
	case SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse:
		return ((_VersionServ__GetUpdateVerByCurVerResponse *)ptr)->soap_out(soap, "VersionServ:GetUpdateVerByCurVerResponse", id, NULL);
	case SOAP_TYPE__VersionServ__GetUpdateVerByCurVer:
		return ((_VersionServ__GetUpdateVerByCurVer *)ptr)->soap_out(soap, "VersionServ:GetUpdateVerByCurVer", id, NULL);
	case SOAP_TYPE__VersionServ__LoginByByteArrResponse:
		return ((_VersionServ__LoginByByteArrResponse *)ptr)->soap_out(soap, "VersionServ:LoginByByteArrResponse", id, NULL);
	case SOAP_TYPE__VersionServ__LoginByByteArr:
		return ((_VersionServ__LoginByByteArr *)ptr)->soap_out(soap, "VersionServ:LoginByByteArr", id, NULL);
	case SOAP_TYPE__VersionServ__LoginResponse:
		return ((_VersionServ__LoginResponse *)ptr)->soap_out(soap, "VersionServ:LoginResponse", id, NULL);
	case SOAP_TYPE__VersionServ__Login:
		return ((_VersionServ__Login *)ptr)->soap_out(soap, "VersionServ:Login", id, NULL);
	case SOAP_TYPE_VersionServ__FileHeader:
		return ((VersionServ__FileHeader *)ptr)->soap_out(soap, tag, id, "VersionServ:FileHeader");
	case SOAP_TYPE_VersionServ__DownLoadItem:
		return ((VersionServ__DownLoadItem *)ptr)->soap_out(soap, tag, id, "VersionServ:DownLoadItem");
	case SOAP_TYPE_VersionServ__ArrayOfDownLoadItem:
		return ((VersionServ__ArrayOfDownLoadItem *)ptr)->soap_out(soap, tag, id, "VersionServ:ArrayOfDownLoadItem");
	case SOAP_TYPE_VersionServ__ObjectV:
		return ((VersionServ__ObjectV *)ptr)->soap_out(soap, tag, id, "VersionServ:ObjectV");
	case SOAP_TYPE_VersionServ__DogAccessHistory:
		return ((VersionServ__DogAccessHistory *)ptr)->soap_out(soap, tag, id, "VersionServ:DogAccessHistory");
	case SOAP_TYPE_VersionServ__VersionRevision:
		return ((VersionServ__VersionRevision *)ptr)->soap_out(soap, tag, id, "VersionServ:VersionRevision");
	case SOAP_TYPE_VersionServ__ArrayOfVersionRevision:
		return ((VersionServ__ArrayOfVersionRevision *)ptr)->soap_out(soap, tag, id, "VersionServ:ArrayOfVersionRevision");
	case SOAP_TYPE_VersionServ__ArrayOfInt:
		return ((VersionServ__ArrayOfInt *)ptr)->soap_out(soap, tag, id, "VersionServ:ArrayOfInt");
	case SOAP_TYPE_VersionServ__ProductVersion:
		return ((VersionServ__ProductVersion *)ptr)->soap_out(soap, tag, id, "VersionServ:ProductVersion");
	case SOAP_TYPE_VersionServ__ArrayOfProductVersion:
		return ((VersionServ__ArrayOfProductVersion *)ptr)->soap_out(soap, tag, id, "VersionServ:ArrayOfProductVersion");
	case SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse:
		return ((_TMSServ__CloseFileObjectDataProviderResponse *)ptr)->soap_out(soap, "TMSServ:CloseFileObjectDataProviderResponse", id, NULL);
	case SOAP_TYPE__TMSServ__CloseFileObjectDataProvider:
		return ((_TMSServ__CloseFileObjectDataProvider *)ptr)->soap_out(soap, "TMSServ:CloseFileObjectDataProvider", id, NULL);
	case SOAP_TYPE__TMSServ__DownloadFileObjectResponse:
		return ((_TMSServ__DownloadFileObjectResponse *)ptr)->soap_out(soap, "TMSServ:DownloadFileObjectResponse", id, NULL);
	case SOAP_TYPE__TMSServ__DownloadFileObject:
		return ((_TMSServ__DownloadFileObject *)ptr)->soap_out(soap, "TMSServ:DownloadFileObject", id, NULL);
	case SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse:
		return ((_TMSServ__OpenServerObjectDataProviderResponse *)ptr)->soap_out(soap, "TMSServ:OpenServerObjectDataProviderResponse", id, NULL);
	case SOAP_TYPE__TMSServ__OpenServerObjectDataProvider:
		return ((_TMSServ__OpenServerObjectDataProvider *)ptr)->soap_out(soap, "TMSServ:OpenServerObjectDataProvider", id, NULL);
	case SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse:
		return ((_TMSServ__OpenTapModelDataProviderResponse *)ptr)->soap_out(soap, "TMSServ:OpenTapModelDataProviderResponse", id, NULL);
	case SOAP_TYPE__TMSServ__OpenTapModelDataProvider:
		return ((_TMSServ__OpenTapModelDataProvider *)ptr)->soap_out(soap, "TMSServ:OpenTapModelDataProvider", id, NULL);
	case SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse:
		return ((_TMSServ__OpenFileObjectDataProviderResponse *)ptr)->soap_out(soap, "TMSServ:OpenFileObjectDataProviderResponse", id, NULL);
	case SOAP_TYPE__TMSServ__OpenFileObjectDataProvider:
		return ((_TMSServ__OpenFileObjectDataProvider *)ptr)->soap_out(soap, "TMSServ:OpenFileObjectDataProvider", id, NULL);
	case SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse:
		return ((_TMSServ__FinalizeFileObjectDataResponse *)ptr)->soap_out(soap, "TMSServ:FinalizeFileObjectDataResponse", id, NULL);
	case SOAP_TYPE__TMSServ__FinalizeFileObjectData:
		return ((_TMSServ__FinalizeFileObjectData *)ptr)->soap_out(soap, "TMSServ:FinalizeFileObjectData", id, NULL);
	case SOAP_TYPE__TMSServ__UploadFileObjectResponse:
		return ((_TMSServ__UploadFileObjectResponse *)ptr)->soap_out(soap, "TMSServ:UploadFileObjectResponse", id, NULL);
	case SOAP_TYPE__TMSServ__UploadFileObject:
		return ((_TMSServ__UploadFileObject *)ptr)->soap_out(soap, "TMSServ:UploadFileObject", id, NULL);
	case SOAP_TYPE__TMSServ__DownloadFileByIdResponse:
		return ((_TMSServ__DownloadFileByIdResponse *)ptr)->soap_out(soap, "TMSServ:DownloadFileByIdResponse", id, NULL);
	case SOAP_TYPE__TMSServ__DownloadFileById:
		return ((_TMSServ__DownloadFileById *)ptr)->soap_out(soap, "TMSServ:DownloadFileById", id, NULL);
	case SOAP_TYPE__TMSServ__DeleteObjectResponse:
		return ((_TMSServ__DeleteObjectResponse *)ptr)->soap_out(soap, "TMSServ:DeleteObjectResponse", id, NULL);
	case SOAP_TYPE__TMSServ__DeleteObject:
		return ((_TMSServ__DeleteObject *)ptr)->soap_out(soap, "TMSServ:DeleteObject", id, NULL);
	case SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse:
		return ((_TMSServ__SaveOrUpdateObjectsResponse *)ptr)->soap_out(soap, "TMSServ:SaveOrUpdateObjectsResponse", id, NULL);
	case SOAP_TYPE__TMSServ__SaveOrUpdateObjects:
		return ((_TMSServ__SaveOrUpdateObjects *)ptr)->soap_out(soap, "TMSServ:SaveOrUpdateObjects", id, NULL);
	case SOAP_TYPE__TMSServ__MatchTowerPartsResponse:
		return ((_TMSServ__MatchTowerPartsResponse *)ptr)->soap_out(soap, "TMSServ:MatchTowerPartsResponse", id, NULL);
	case SOAP_TYPE__TMSServ__MatchTowerParts:
		return ((_TMSServ__MatchTowerParts *)ptr)->soap_out(soap, "TMSServ:MatchTowerParts", id, NULL);
	case SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse:
		return ((_TMSServ__GetTowerPartsLabelAndVersionSerialResponse *)ptr)->soap_out(soap, "TMSServ:GetTowerPartsLabelAndVersionSerialResponse", id, NULL);
	case SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial:
		return ((_TMSServ__GetTowerPartsLabelAndVersionSerial *)ptr)->soap_out(soap, "TMSServ:GetTowerPartsLabelAndVersionSerial", id, NULL);
	case SOAP_TYPE__TMSServ__GetObjectsVersionResponse:
		return ((_TMSServ__GetObjectsVersionResponse *)ptr)->soap_out(soap, "TMSServ:GetObjectsVersionResponse", id, NULL);
	case SOAP_TYPE__TMSServ__GetObjectsVersion:
		return ((_TMSServ__GetObjectsVersion *)ptr)->soap_out(soap, "TMSServ:GetObjectsVersion", id, NULL);
	case SOAP_TYPE__TMSServ__DownloadObjectsResponse:
		return ((_TMSServ__DownloadObjectsResponse *)ptr)->soap_out(soap, "TMSServ:DownloadObjectsResponse", id, NULL);
	case SOAP_TYPE__TMSServ__DownloadObjects:
		return ((_TMSServ__DownloadObjects *)ptr)->soap_out(soap, "TMSServ:DownloadObjects", id, NULL);
	case SOAP_TYPE__TMSServ__QueryObjectsResponse:
		return ((_TMSServ__QueryObjectsResponse *)ptr)->soap_out(soap, "TMSServ:QueryObjectsResponse", id, NULL);
	case SOAP_TYPE__TMSServ__QueryObjects:
		return ((_TMSServ__QueryObjects *)ptr)->soap_out(soap, "TMSServ:QueryObjects", id, NULL);
	case SOAP_TYPE__TMSServ__logoutUserResponse:
		return ((_TMSServ__logoutUserResponse *)ptr)->soap_out(soap, "TMSServ:logoutUserResponse", id, NULL);
	case SOAP_TYPE__TMSServ__logoutUser:
		return ((_TMSServ__logoutUser *)ptr)->soap_out(soap, "TMSServ:logoutUser", id, NULL);
	case SOAP_TYPE__TMSServ__loginUserByByteArrResponse:
		return ((_TMSServ__loginUserByByteArrResponse *)ptr)->soap_out(soap, "TMSServ:loginUserByByteArrResponse", id, NULL);
	case SOAP_TYPE__TMSServ__loginUserByByteArr:
		return ((_TMSServ__loginUserByByteArr *)ptr)->soap_out(soap, "TMSServ:loginUserByByteArr", id, NULL);
	case SOAP_TYPE__TMSServ__loginUserResponse:
		return ((_TMSServ__loginUserResponse *)ptr)->soap_out(soap, "TMSServ:loginUserResponse", id, NULL);
	case SOAP_TYPE__TMSServ__loginUser:
		return ((_TMSServ__loginUser *)ptr)->soap_out(soap, "TMSServ:loginUser", id, NULL);
	case SOAP_TYPE_TMSServ__ArrayOfUnsignedInt:
		return ((TMSServ__ArrayOfUnsignedInt *)ptr)->soap_out(soap, tag, id, "TMSServ:ArrayOfUnsignedInt");
	case SOAP_TYPE_TMSServ__ArrayOfInt:
		return ((TMSServ__ArrayOfInt *)ptr)->soap_out(soap, tag, id, "TMSServ:ArrayOfInt");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_VersionServ__SaveOrUpdateObjects:
		return soap_out_PointerTo_VersionServ__SaveOrUpdateObjects(soap, tag, id, (_VersionServ__SaveOrUpdateObjects *const*)ptr, "VersionServ:SaveOrUpdateObjects");
	case SOAP_TYPE_PointerTo_VersionServ__DownloadObjects:
		return soap_out_PointerTo_VersionServ__DownloadObjects(soap, tag, id, (_VersionServ__DownloadObjects *const*)ptr, "VersionServ:DownloadObjects");
	case SOAP_TYPE_PointerTo_VersionServ__QueryObjects:
		return soap_out_PointerTo_VersionServ__QueryObjects(soap, tag, id, (_VersionServ__QueryObjects *const*)ptr, "VersionServ:QueryObjects");
	case SOAP_TYPE_PointerTo_VersionServ__GetFileHeader:
		return soap_out_PointerTo_VersionServ__GetFileHeader(soap, tag, id, (_VersionServ__GetFileHeader *const*)ptr, "VersionServ:GetFileHeader");
	case SOAP_TYPE_PointerTo_VersionServ__QueryDownLoadItemArrByProductId:
		return soap_out_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, tag, id, (_VersionServ__QueryDownLoadItemArrByProductId *const*)ptr, "VersionServ:QueryDownLoadItemArrByProductId");
	case SOAP_TYPE_PointerTo_VersionServ__GetDogAccessHistory:
		return soap_out_PointerTo_VersionServ__GetDogAccessHistory(soap, tag, id, (_VersionServ__GetDogAccessHistory *const*)ptr, "VersionServ:GetDogAccessHistory");
	case SOAP_TYPE_PointerTo_VersionServ__GetVersionReleaseNotes:
		return soap_out_PointerTo_VersionServ__GetVersionReleaseNotes(soap, tag, id, (_VersionServ__GetVersionReleaseNotes *const*)ptr, "VersionServ:GetVersionReleaseNotes");
	case SOAP_TYPE_PointerTo_VersionServ__CompareVersion:
		return soap_out_PointerTo_VersionServ__CompareVersion(soap, tag, id, (_VersionServ__CompareVersion *const*)ptr, "VersionServ:CompareVersion");
	case SOAP_TYPE_PointerTo_VersionServ__SetRevisionReadFlag:
		return soap_out_PointerTo_VersionServ__SetRevisionReadFlag(soap, tag, id, (_VersionServ__SetRevisionReadFlag *const*)ptr, "VersionServ:SetRevisionReadFlag");
	case SOAP_TYPE_PointerTo_VersionServ__GetUpdateVerByCurVer:
		return soap_out_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, tag, id, (_VersionServ__GetUpdateVerByCurVer *const*)ptr, "VersionServ:GetUpdateVerByCurVer");
	case SOAP_TYPE_PointerTo_VersionServ__LoginByByteArr:
		return soap_out_PointerTo_VersionServ__LoginByByteArr(soap, tag, id, (_VersionServ__LoginByByteArr *const*)ptr, "VersionServ:LoginByByteArr");
	case SOAP_TYPE_PointerTo_VersionServ__Login:
		return soap_out_PointerTo_VersionServ__Login(soap, tag, id, (_VersionServ__Login *const*)ptr, "VersionServ:Login");
	case SOAP_TYPE_PointerToVersionServ__FileHeader:
		return soap_out_PointerToVersionServ__FileHeader(soap, tag, id, (VersionServ__FileHeader *const*)ptr, "VersionServ:FileHeader");
	case SOAP_TYPE_PointerToVersionServ__ArrayOfDownLoadItem:
		return soap_out_PointerToVersionServ__ArrayOfDownLoadItem(soap, tag, id, (VersionServ__ArrayOfDownLoadItem *const*)ptr, "VersionServ:ArrayOfDownLoadItem");
	case SOAP_TYPE_PointerToVersionServ__DogAccessHistory:
		return soap_out_PointerToVersionServ__DogAccessHistory(soap, tag, id, (VersionServ__DogAccessHistory *const*)ptr, "VersionServ:DogAccessHistory");
	case SOAP_TYPE_PointerToVersionServ__ArrayOfVersionRevision:
		return soap_out_PointerToVersionServ__ArrayOfVersionRevision(soap, tag, id, (VersionServ__ArrayOfVersionRevision *const*)ptr, "VersionServ:ArrayOfVersionRevision");
	case SOAP_TYPE_PointerToVersionServ__ArrayOfInt:
		return soap_out_PointerToVersionServ__ArrayOfInt(soap, tag, id, (VersionServ__ArrayOfInt *const*)ptr, "VersionServ:ArrayOfInt");
	case SOAP_TYPE_PointerToVersionServ__ArrayOfProductVersion:
		return soap_out_PointerToVersionServ__ArrayOfProductVersion(soap, tag, id, (VersionServ__ArrayOfProductVersion *const*)ptr, "VersionServ:ArrayOfProductVersion");
	case SOAP_TYPE_PointerToPointerToVersionServ__DownLoadItem:
		return soap_out_PointerToPointerToVersionServ__DownLoadItem(soap, tag, id, (VersionServ__DownLoadItem **const*)ptr, "VersionServ:DownLoadItem");
	case SOAP_TYPE_PointerToVersionServ__DownLoadItem:
		return soap_out_PointerToVersionServ__DownLoadItem(soap, tag, id, (VersionServ__DownLoadItem *const*)ptr, "VersionServ:DownLoadItem");
	case SOAP_TYPE_PointerToPointerToVersionServ__VersionRevision:
		return soap_out_PointerToPointerToVersionServ__VersionRevision(soap, tag, id, (VersionServ__VersionRevision **const*)ptr, "VersionServ:VersionRevision");
	case SOAP_TYPE_PointerToVersionServ__VersionRevision:
		return soap_out_PointerToVersionServ__VersionRevision(soap, tag, id, (VersionServ__VersionRevision *const*)ptr, "VersionServ:VersionRevision");
	case SOAP_TYPE_PointerToPointerToVersionServ__ProductVersion:
		return soap_out_PointerToPointerToVersionServ__ProductVersion(soap, tag, id, (VersionServ__ProductVersion **const*)ptr, "VersionServ:ProductVersion");
	case SOAP_TYPE_PointerToVersionServ__ProductVersion:
		return soap_out_PointerToVersionServ__ProductVersion(soap, tag, id, (VersionServ__ProductVersion *const*)ptr, "VersionServ:ProductVersion");
	case SOAP_TYPE_PointerTo_TMSServ__CloseFileObjectDataProvider:
		return soap_out_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, tag, id, (_TMSServ__CloseFileObjectDataProvider *const*)ptr, "TMSServ:CloseFileObjectDataProvider");
	case SOAP_TYPE_PointerTo_TMSServ__DownloadFileObject:
		return soap_out_PointerTo_TMSServ__DownloadFileObject(soap, tag, id, (_TMSServ__DownloadFileObject *const*)ptr, "TMSServ:DownloadFileObject");
	case SOAP_TYPE_PointerTo_TMSServ__OpenServerObjectDataProvider:
		return soap_out_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, tag, id, (_TMSServ__OpenServerObjectDataProvider *const*)ptr, "TMSServ:OpenServerObjectDataProvider");
	case SOAP_TYPE_PointerTo_TMSServ__OpenTapModelDataProvider:
		return soap_out_PointerTo_TMSServ__OpenTapModelDataProvider(soap, tag, id, (_TMSServ__OpenTapModelDataProvider *const*)ptr, "TMSServ:OpenTapModelDataProvider");
	case SOAP_TYPE_PointerTo_TMSServ__OpenFileObjectDataProvider:
		return soap_out_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, tag, id, (_TMSServ__OpenFileObjectDataProvider *const*)ptr, "TMSServ:OpenFileObjectDataProvider");
	case SOAP_TYPE_PointerTo_TMSServ__FinalizeFileObjectData:
		return soap_out_PointerTo_TMSServ__FinalizeFileObjectData(soap, tag, id, (_TMSServ__FinalizeFileObjectData *const*)ptr, "TMSServ:FinalizeFileObjectData");
	case SOAP_TYPE_PointerTo_TMSServ__UploadFileObject:
		return soap_out_PointerTo_TMSServ__UploadFileObject(soap, tag, id, (_TMSServ__UploadFileObject *const*)ptr, "TMSServ:UploadFileObject");
	case SOAP_TYPE_PointerTo_TMSServ__DownloadFileById:
		return soap_out_PointerTo_TMSServ__DownloadFileById(soap, tag, id, (_TMSServ__DownloadFileById *const*)ptr, "TMSServ:DownloadFileById");
	case SOAP_TYPE_PointerTo_TMSServ__DeleteObject:
		return soap_out_PointerTo_TMSServ__DeleteObject(soap, tag, id, (_TMSServ__DeleteObject *const*)ptr, "TMSServ:DeleteObject");
	case SOAP_TYPE_PointerTo_TMSServ__SaveOrUpdateObjects:
		return soap_out_PointerTo_TMSServ__SaveOrUpdateObjects(soap, tag, id, (_TMSServ__SaveOrUpdateObjects *const*)ptr, "TMSServ:SaveOrUpdateObjects");
	case SOAP_TYPE_PointerTo_TMSServ__MatchTowerParts:
		return soap_out_PointerTo_TMSServ__MatchTowerParts(soap, tag, id, (_TMSServ__MatchTowerParts *const*)ptr, "TMSServ:MatchTowerParts");
	case SOAP_TYPE_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial:
		return soap_out_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, tag, id, (_TMSServ__GetTowerPartsLabelAndVersionSerial *const*)ptr, "TMSServ:GetTowerPartsLabelAndVersionSerial");
	case SOAP_TYPE_PointerTo_TMSServ__GetObjectsVersion:
		return soap_out_PointerTo_TMSServ__GetObjectsVersion(soap, tag, id, (_TMSServ__GetObjectsVersion *const*)ptr, "TMSServ:GetObjectsVersion");
	case SOAP_TYPE_PointerTo_TMSServ__DownloadObjects:
		return soap_out_PointerTo_TMSServ__DownloadObjects(soap, tag, id, (_TMSServ__DownloadObjects *const*)ptr, "TMSServ:DownloadObjects");
	case SOAP_TYPE_PointerTo_TMSServ__QueryObjects:
		return soap_out_PointerTo_TMSServ__QueryObjects(soap, tag, id, (_TMSServ__QueryObjects *const*)ptr, "TMSServ:QueryObjects");
	case SOAP_TYPE_PointerTo_TMSServ__logoutUser:
		return soap_out_PointerTo_TMSServ__logoutUser(soap, tag, id, (_TMSServ__logoutUser *const*)ptr, "TMSServ:logoutUser");
	case SOAP_TYPE_PointerTo_TMSServ__loginUserByByteArr:
		return soap_out_PointerTo_TMSServ__loginUserByByteArr(soap, tag, id, (_TMSServ__loginUserByByteArr *const*)ptr, "TMSServ:loginUserByByteArr");
	case SOAP_TYPE_PointerTo_TMSServ__loginUser:
		return soap_out_PointerTo_TMSServ__loginUser(soap, tag, id, (_TMSServ__loginUser *const*)ptr, "TMSServ:loginUser");
	case SOAP_TYPE_PointerToTMSServ__ArrayOfUnsignedInt:
		return soap_out_PointerToTMSServ__ArrayOfUnsignedInt(soap, tag, id, (TMSServ__ArrayOfUnsignedInt *const*)ptr, "TMSServ:ArrayOfUnsignedInt");
	case SOAP_TYPE_PointerToTMSServ__ArrayOfInt:
		return soap_out_PointerToTMSServ__ArrayOfInt(soap, tag, id, (TMSServ__ArrayOfInt *const*)ptr, "TMSServ:ArrayOfInt");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_out_PointerTounsignedInt(soap, tag, id, (unsigned int *const*)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse:
		((_VersionServ__SaveOrUpdateObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__SaveOrUpdateObjects:
		((_VersionServ__SaveOrUpdateObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__DownloadObjectsResponse:
		((_VersionServ__DownloadObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__DownloadObjects:
		((_VersionServ__DownloadObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__QueryObjectsResponse:
		((_VersionServ__QueryObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__QueryObjects:
		((_VersionServ__QueryObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__GetFileHeaderResponse:
		((_VersionServ__GetFileHeaderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__GetFileHeader:
		((_VersionServ__GetFileHeader *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse:
		((_VersionServ__QueryDownLoadItemArrByProductIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId:
		((_VersionServ__QueryDownLoadItemArrByProductId *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse:
		((_VersionServ__GetDogAccessHistoryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__GetDogAccessHistory:
		((_VersionServ__GetDogAccessHistory *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse:
		((_VersionServ__GetVersionReleaseNotesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__GetVersionReleaseNotes:
		((_VersionServ__GetVersionReleaseNotes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__CompareVersionResponse:
		((_VersionServ__CompareVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__CompareVersion:
		((_VersionServ__CompareVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse:
		((_VersionServ__SetRevisionReadFlagResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__SetRevisionReadFlag:
		((_VersionServ__SetRevisionReadFlag *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse:
		((_VersionServ__GetUpdateVerByCurVerResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__GetUpdateVerByCurVer:
		((_VersionServ__GetUpdateVerByCurVer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__LoginByByteArrResponse:
		((_VersionServ__LoginByByteArrResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__LoginByByteArr:
		((_VersionServ__LoginByByteArr *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__LoginResponse:
		((_VersionServ__LoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__VersionServ__Login:
		((_VersionServ__Login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__FileHeader:
		((VersionServ__FileHeader *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__DownLoadItem:
		((VersionServ__DownLoadItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__ArrayOfDownLoadItem:
		((VersionServ__ArrayOfDownLoadItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__ObjectV:
		((VersionServ__ObjectV *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__DogAccessHistory:
		((VersionServ__DogAccessHistory *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__VersionRevision:
		((VersionServ__VersionRevision *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__ArrayOfVersionRevision:
		((VersionServ__ArrayOfVersionRevision *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__ArrayOfInt:
		((VersionServ__ArrayOfInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__ProductVersion:
		((VersionServ__ProductVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_VersionServ__ArrayOfProductVersion:
		((VersionServ__ArrayOfProductVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse:
		((_TMSServ__CloseFileObjectDataProviderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__CloseFileObjectDataProvider:
		((_TMSServ__CloseFileObjectDataProvider *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__DownloadFileObjectResponse:
		((_TMSServ__DownloadFileObjectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__DownloadFileObject:
		((_TMSServ__DownloadFileObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse:
		((_TMSServ__OpenServerObjectDataProviderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__OpenServerObjectDataProvider:
		((_TMSServ__OpenServerObjectDataProvider *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse:
		((_TMSServ__OpenTapModelDataProviderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__OpenTapModelDataProvider:
		((_TMSServ__OpenTapModelDataProvider *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse:
		((_TMSServ__OpenFileObjectDataProviderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__OpenFileObjectDataProvider:
		((_TMSServ__OpenFileObjectDataProvider *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse:
		((_TMSServ__FinalizeFileObjectDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__FinalizeFileObjectData:
		((_TMSServ__FinalizeFileObjectData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__UploadFileObjectResponse:
		((_TMSServ__UploadFileObjectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__UploadFileObject:
		((_TMSServ__UploadFileObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__DownloadFileByIdResponse:
		((_TMSServ__DownloadFileByIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__DownloadFileById:
		((_TMSServ__DownloadFileById *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__DeleteObjectResponse:
		((_TMSServ__DeleteObjectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__DeleteObject:
		((_TMSServ__DeleteObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse:
		((_TMSServ__SaveOrUpdateObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__SaveOrUpdateObjects:
		((_TMSServ__SaveOrUpdateObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__MatchTowerPartsResponse:
		((_TMSServ__MatchTowerPartsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__MatchTowerParts:
		((_TMSServ__MatchTowerParts *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse:
		((_TMSServ__GetTowerPartsLabelAndVersionSerialResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial:
		((_TMSServ__GetTowerPartsLabelAndVersionSerial *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__GetObjectsVersionResponse:
		((_TMSServ__GetObjectsVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__GetObjectsVersion:
		((_TMSServ__GetObjectsVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__DownloadObjectsResponse:
		((_TMSServ__DownloadObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__DownloadObjects:
		((_TMSServ__DownloadObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__QueryObjectsResponse:
		((_TMSServ__QueryObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__QueryObjects:
		((_TMSServ__QueryObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__logoutUserResponse:
		((_TMSServ__logoutUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__logoutUser:
		((_TMSServ__logoutUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__loginUserByByteArrResponse:
		((_TMSServ__loginUserByByteArrResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__loginUserByByteArr:
		((_TMSServ__loginUserByByteArr *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__loginUserResponse:
		((_TMSServ__loginUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__TMSServ__loginUser:
		((_TMSServ__loginUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_TMSServ__ArrayOfUnsignedInt:
		((TMSServ__ArrayOfUnsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_TMSServ__ArrayOfInt:
		((TMSServ__ArrayOfInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___VersionServ3__SaveOrUpdateObjects:
		soap_serialize___VersionServ3__SaveOrUpdateObjects(soap, (const struct __VersionServ3__SaveOrUpdateObjects *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__DownloadObjects:
		soap_serialize___VersionServ3__DownloadObjects(soap, (const struct __VersionServ3__DownloadObjects *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__QueryObjects:
		soap_serialize___VersionServ3__QueryObjects(soap, (const struct __VersionServ3__QueryObjects *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__GetFileHeader:
		soap_serialize___VersionServ3__GetFileHeader(soap, (const struct __VersionServ3__GetFileHeader *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__QueryDownLoadItemArrByProductId:
		soap_serialize___VersionServ3__QueryDownLoadItemArrByProductId(soap, (const struct __VersionServ3__QueryDownLoadItemArrByProductId *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__GetDogAccessHistory:
		soap_serialize___VersionServ3__GetDogAccessHistory(soap, (const struct __VersionServ3__GetDogAccessHistory *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__GetVersionReleaseNotes:
		soap_serialize___VersionServ3__GetVersionReleaseNotes(soap, (const struct __VersionServ3__GetVersionReleaseNotes *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__CompareVersion:
		soap_serialize___VersionServ3__CompareVersion(soap, (const struct __VersionServ3__CompareVersion *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__SetRevisionReadFlag:
		soap_serialize___VersionServ3__SetRevisionReadFlag(soap, (const struct __VersionServ3__SetRevisionReadFlag *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__GetUpdateVerByCurVer:
		soap_serialize___VersionServ3__GetUpdateVerByCurVer(soap, (const struct __VersionServ3__GetUpdateVerByCurVer *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__LoginByByteArr:
		soap_serialize___VersionServ3__LoginByByteArr(soap, (const struct __VersionServ3__LoginByByteArr *)ptr);
		break;
	case SOAP_TYPE___VersionServ3__Login:
		soap_serialize___VersionServ3__Login(soap, (const struct __VersionServ3__Login *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__SaveOrUpdateObjects:
		soap_serialize___VersionServ2__SaveOrUpdateObjects(soap, (const struct __VersionServ2__SaveOrUpdateObjects *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__DownloadObjects:
		soap_serialize___VersionServ2__DownloadObjects(soap, (const struct __VersionServ2__DownloadObjects *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__QueryObjects:
		soap_serialize___VersionServ2__QueryObjects(soap, (const struct __VersionServ2__QueryObjects *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__GetFileHeader:
		soap_serialize___VersionServ2__GetFileHeader(soap, (const struct __VersionServ2__GetFileHeader *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__QueryDownLoadItemArrByProductId:
		soap_serialize___VersionServ2__QueryDownLoadItemArrByProductId(soap, (const struct __VersionServ2__QueryDownLoadItemArrByProductId *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__GetDogAccessHistory:
		soap_serialize___VersionServ2__GetDogAccessHistory(soap, (const struct __VersionServ2__GetDogAccessHistory *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__GetVersionReleaseNotes:
		soap_serialize___VersionServ2__GetVersionReleaseNotes(soap, (const struct __VersionServ2__GetVersionReleaseNotes *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__CompareVersion:
		soap_serialize___VersionServ2__CompareVersion(soap, (const struct __VersionServ2__CompareVersion *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__SetRevisionReadFlag:
		soap_serialize___VersionServ2__SetRevisionReadFlag(soap, (const struct __VersionServ2__SetRevisionReadFlag *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__GetUpdateVerByCurVer:
		soap_serialize___VersionServ2__GetUpdateVerByCurVer(soap, (const struct __VersionServ2__GetUpdateVerByCurVer *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__LoginByByteArr:
		soap_serialize___VersionServ2__LoginByByteArr(soap, (const struct __VersionServ2__LoginByByteArr *)ptr);
		break;
	case SOAP_TYPE___VersionServ2__Login:
		soap_serialize___VersionServ2__Login(soap, (const struct __VersionServ2__Login *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__CloseFileObjectDataProvider:
		soap_serialize___TMSServ3__CloseFileObjectDataProvider(soap, (const struct __TMSServ3__CloseFileObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__DownloadFileObject:
		soap_serialize___TMSServ3__DownloadFileObject(soap, (const struct __TMSServ3__DownloadFileObject *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__OpenServerObjectDataProvider:
		soap_serialize___TMSServ3__OpenServerObjectDataProvider(soap, (const struct __TMSServ3__OpenServerObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__OpenTapModelDataProvider:
		soap_serialize___TMSServ3__OpenTapModelDataProvider(soap, (const struct __TMSServ3__OpenTapModelDataProvider *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__OpenFileObjectDataProvider:
		soap_serialize___TMSServ3__OpenFileObjectDataProvider(soap, (const struct __TMSServ3__OpenFileObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__FinalizeFileObjectData:
		soap_serialize___TMSServ3__FinalizeFileObjectData(soap, (const struct __TMSServ3__FinalizeFileObjectData *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__UploadFileObject:
		soap_serialize___TMSServ3__UploadFileObject(soap, (const struct __TMSServ3__UploadFileObject *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__DownloadFileById:
		soap_serialize___TMSServ3__DownloadFileById(soap, (const struct __TMSServ3__DownloadFileById *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__DeleteObject:
		soap_serialize___TMSServ3__DeleteObject(soap, (const struct __TMSServ3__DeleteObject *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__SaveOrUpdateObjects:
		soap_serialize___TMSServ3__SaveOrUpdateObjects(soap, (const struct __TMSServ3__SaveOrUpdateObjects *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__MatchTowerParts:
		soap_serialize___TMSServ3__MatchTowerParts(soap, (const struct __TMSServ3__MatchTowerParts *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__GetTowerPartsLabelAndVersionSerial:
		soap_serialize___TMSServ3__GetTowerPartsLabelAndVersionSerial(soap, (const struct __TMSServ3__GetTowerPartsLabelAndVersionSerial *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__GetObjectsVersion:
		soap_serialize___TMSServ3__GetObjectsVersion(soap, (const struct __TMSServ3__GetObjectsVersion *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__DownloadObjects:
		soap_serialize___TMSServ3__DownloadObjects(soap, (const struct __TMSServ3__DownloadObjects *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__QueryObjects:
		soap_serialize___TMSServ3__QueryObjects(soap, (const struct __TMSServ3__QueryObjects *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__logoutUser:
		soap_serialize___TMSServ3__logoutUser(soap, (const struct __TMSServ3__logoutUser *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__loginUserByByteArr:
		soap_serialize___TMSServ3__loginUserByByteArr(soap, (const struct __TMSServ3__loginUserByByteArr *)ptr);
		break;
	case SOAP_TYPE___TMSServ3__loginUser:
		soap_serialize___TMSServ3__loginUser(soap, (const struct __TMSServ3__loginUser *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__CloseFileObjectDataProvider:
		soap_serialize___TMSServ2__CloseFileObjectDataProvider(soap, (const struct __TMSServ2__CloseFileObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__DownloadFileObject:
		soap_serialize___TMSServ2__DownloadFileObject(soap, (const struct __TMSServ2__DownloadFileObject *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__OpenServerObjectDataProvider:
		soap_serialize___TMSServ2__OpenServerObjectDataProvider(soap, (const struct __TMSServ2__OpenServerObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__OpenTapModelDataProvider:
		soap_serialize___TMSServ2__OpenTapModelDataProvider(soap, (const struct __TMSServ2__OpenTapModelDataProvider *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__OpenFileObjectDataProvider:
		soap_serialize___TMSServ2__OpenFileObjectDataProvider(soap, (const struct __TMSServ2__OpenFileObjectDataProvider *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__FinalizeFileObjectData:
		soap_serialize___TMSServ2__FinalizeFileObjectData(soap, (const struct __TMSServ2__FinalizeFileObjectData *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__UploadFileObject:
		soap_serialize___TMSServ2__UploadFileObject(soap, (const struct __TMSServ2__UploadFileObject *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__DownloadFileById:
		soap_serialize___TMSServ2__DownloadFileById(soap, (const struct __TMSServ2__DownloadFileById *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__DeleteObject:
		soap_serialize___TMSServ2__DeleteObject(soap, (const struct __TMSServ2__DeleteObject *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__SaveOrUpdateObjects:
		soap_serialize___TMSServ2__SaveOrUpdateObjects(soap, (const struct __TMSServ2__SaveOrUpdateObjects *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__MatchTowerParts:
		soap_serialize___TMSServ2__MatchTowerParts(soap, (const struct __TMSServ2__MatchTowerParts *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__GetTowerPartsLabelAndVersionSerial:
		soap_serialize___TMSServ2__GetTowerPartsLabelAndVersionSerial(soap, (const struct __TMSServ2__GetTowerPartsLabelAndVersionSerial *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__GetObjectsVersion:
		soap_serialize___TMSServ2__GetObjectsVersion(soap, (const struct __TMSServ2__GetObjectsVersion *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__DownloadObjects:
		soap_serialize___TMSServ2__DownloadObjects(soap, (const struct __TMSServ2__DownloadObjects *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__QueryObjects:
		soap_serialize___TMSServ2__QueryObjects(soap, (const struct __TMSServ2__QueryObjects *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__logoutUser:
		soap_serialize___TMSServ2__logoutUser(soap, (const struct __TMSServ2__logoutUser *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__loginUserByByteArr:
		soap_serialize___TMSServ2__loginUserByByteArr(soap, (const struct __TMSServ2__loginUserByByteArr *)ptr);
		break;
	case SOAP_TYPE___TMSServ2__loginUser:
		soap_serialize___TMSServ2__loginUser(soap, (const struct __TMSServ2__loginUser *)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__SaveOrUpdateObjects:
		soap_serialize_PointerTo_VersionServ__SaveOrUpdateObjects(soap, (_VersionServ__SaveOrUpdateObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__DownloadObjects:
		soap_serialize_PointerTo_VersionServ__DownloadObjects(soap, (_VersionServ__DownloadObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__QueryObjects:
		soap_serialize_PointerTo_VersionServ__QueryObjects(soap, (_VersionServ__QueryObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__GetFileHeader:
		soap_serialize_PointerTo_VersionServ__GetFileHeader(soap, (_VersionServ__GetFileHeader *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__QueryDownLoadItemArrByProductId:
		soap_serialize_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, (_VersionServ__QueryDownLoadItemArrByProductId *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__GetDogAccessHistory:
		soap_serialize_PointerTo_VersionServ__GetDogAccessHistory(soap, (_VersionServ__GetDogAccessHistory *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__GetVersionReleaseNotes:
		soap_serialize_PointerTo_VersionServ__GetVersionReleaseNotes(soap, (_VersionServ__GetVersionReleaseNotes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__CompareVersion:
		soap_serialize_PointerTo_VersionServ__CompareVersion(soap, (_VersionServ__CompareVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__SetRevisionReadFlag:
		soap_serialize_PointerTo_VersionServ__SetRevisionReadFlag(soap, (_VersionServ__SetRevisionReadFlag *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__GetUpdateVerByCurVer:
		soap_serialize_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, (_VersionServ__GetUpdateVerByCurVer *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__LoginByByteArr:
		soap_serialize_PointerTo_VersionServ__LoginByByteArr(soap, (_VersionServ__LoginByByteArr *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_VersionServ__Login:
		soap_serialize_PointerTo_VersionServ__Login(soap, (_VersionServ__Login *const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__FileHeader:
		soap_serialize_PointerToVersionServ__FileHeader(soap, (VersionServ__FileHeader *const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__ArrayOfDownLoadItem:
		soap_serialize_PointerToVersionServ__ArrayOfDownLoadItem(soap, (VersionServ__ArrayOfDownLoadItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__DogAccessHistory:
		soap_serialize_PointerToVersionServ__DogAccessHistory(soap, (VersionServ__DogAccessHistory *const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__ArrayOfVersionRevision:
		soap_serialize_PointerToVersionServ__ArrayOfVersionRevision(soap, (VersionServ__ArrayOfVersionRevision *const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__ArrayOfInt:
		soap_serialize_PointerToVersionServ__ArrayOfInt(soap, (VersionServ__ArrayOfInt *const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__ArrayOfProductVersion:
		soap_serialize_PointerToVersionServ__ArrayOfProductVersion(soap, (VersionServ__ArrayOfProductVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToVersionServ__DownLoadItem:
		soap_serialize_PointerToPointerToVersionServ__DownLoadItem(soap, (VersionServ__DownLoadItem **const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__DownLoadItem:
		soap_serialize_PointerToVersionServ__DownLoadItem(soap, (VersionServ__DownLoadItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToVersionServ__VersionRevision:
		soap_serialize_PointerToPointerToVersionServ__VersionRevision(soap, (VersionServ__VersionRevision **const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__VersionRevision:
		soap_serialize_PointerToVersionServ__VersionRevision(soap, (VersionServ__VersionRevision *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToVersionServ__ProductVersion:
		soap_serialize_PointerToPointerToVersionServ__ProductVersion(soap, (VersionServ__ProductVersion **const*)ptr);
		break;
	case SOAP_TYPE_PointerToVersionServ__ProductVersion:
		soap_serialize_PointerToVersionServ__ProductVersion(soap, (VersionServ__ProductVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__CloseFileObjectDataProvider:
		soap_serialize_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, (_TMSServ__CloseFileObjectDataProvider *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__DownloadFileObject:
		soap_serialize_PointerTo_TMSServ__DownloadFileObject(soap, (_TMSServ__DownloadFileObject *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__OpenServerObjectDataProvider:
		soap_serialize_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, (_TMSServ__OpenServerObjectDataProvider *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__OpenTapModelDataProvider:
		soap_serialize_PointerTo_TMSServ__OpenTapModelDataProvider(soap, (_TMSServ__OpenTapModelDataProvider *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__OpenFileObjectDataProvider:
		soap_serialize_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, (_TMSServ__OpenFileObjectDataProvider *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__FinalizeFileObjectData:
		soap_serialize_PointerTo_TMSServ__FinalizeFileObjectData(soap, (_TMSServ__FinalizeFileObjectData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__UploadFileObject:
		soap_serialize_PointerTo_TMSServ__UploadFileObject(soap, (_TMSServ__UploadFileObject *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__DownloadFileById:
		soap_serialize_PointerTo_TMSServ__DownloadFileById(soap, (_TMSServ__DownloadFileById *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__DeleteObject:
		soap_serialize_PointerTo_TMSServ__DeleteObject(soap, (_TMSServ__DeleteObject *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__SaveOrUpdateObjects:
		soap_serialize_PointerTo_TMSServ__SaveOrUpdateObjects(soap, (_TMSServ__SaveOrUpdateObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__MatchTowerParts:
		soap_serialize_PointerTo_TMSServ__MatchTowerParts(soap, (_TMSServ__MatchTowerParts *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial:
		soap_serialize_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, (_TMSServ__GetTowerPartsLabelAndVersionSerial *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__GetObjectsVersion:
		soap_serialize_PointerTo_TMSServ__GetObjectsVersion(soap, (_TMSServ__GetObjectsVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__DownloadObjects:
		soap_serialize_PointerTo_TMSServ__DownloadObjects(soap, (_TMSServ__DownloadObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__QueryObjects:
		soap_serialize_PointerTo_TMSServ__QueryObjects(soap, (_TMSServ__QueryObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__logoutUser:
		soap_serialize_PointerTo_TMSServ__logoutUser(soap, (_TMSServ__logoutUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__loginUserByByteArr:
		soap_serialize_PointerTo_TMSServ__loginUserByByteArr(soap, (_TMSServ__loginUserByByteArr *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_TMSServ__loginUser:
		soap_serialize_PointerTo_TMSServ__loginUser(soap, (_TMSServ__loginUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerToTMSServ__ArrayOfUnsignedInt:
		soap_serialize_PointerToTMSServ__ArrayOfUnsignedInt(soap, (TMSServ__ArrayOfUnsignedInt *const*)ptr);
		break;
	case SOAP_TYPE_PointerToTMSServ__ArrayOfInt:
		soap_serialize_PointerToTMSServ__ArrayOfInt(soap, (TMSServ__ArrayOfInt *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedInt:
		soap_serialize_PointerTounsignedInt(soap, (unsigned int *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_TMSServ__ArrayOfInt:
		return (void*)soap_instantiate_TMSServ__ArrayOfInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_TMSServ__ArrayOfUnsignedInt:
		return (void*)soap_instantiate_TMSServ__ArrayOfUnsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__loginUser:
		return (void*)soap_instantiate__TMSServ__loginUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__loginUserResponse:
		return (void*)soap_instantiate__TMSServ__loginUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__loginUserByByteArr:
		return (void*)soap_instantiate__TMSServ__loginUserByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__loginUserByByteArrResponse:
		return (void*)soap_instantiate__TMSServ__loginUserByByteArrResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__logoutUser:
		return (void*)soap_instantiate__TMSServ__logoutUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__logoutUserResponse:
		return (void*)soap_instantiate__TMSServ__logoutUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__QueryObjects:
		return (void*)soap_instantiate__TMSServ__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__QueryObjectsResponse:
		return (void*)soap_instantiate__TMSServ__QueryObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__DownloadObjects:
		return (void*)soap_instantiate__TMSServ__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__DownloadObjectsResponse:
		return (void*)soap_instantiate__TMSServ__DownloadObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__GetObjectsVersion:
		return (void*)soap_instantiate__TMSServ__GetObjectsVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__GetObjectsVersionResponse:
		return (void*)soap_instantiate__TMSServ__GetObjectsVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial:
		return (void*)soap_instantiate__TMSServ__GetTowerPartsLabelAndVersionSerial(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse:
		return (void*)soap_instantiate__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__MatchTowerParts:
		return (void*)soap_instantiate__TMSServ__MatchTowerParts(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__MatchTowerPartsResponse:
		return (void*)soap_instantiate__TMSServ__MatchTowerPartsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__SaveOrUpdateObjects:
		return (void*)soap_instantiate__TMSServ__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse:
		return (void*)soap_instantiate__TMSServ__SaveOrUpdateObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__DeleteObject:
		return (void*)soap_instantiate__TMSServ__DeleteObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__DeleteObjectResponse:
		return (void*)soap_instantiate__TMSServ__DeleteObjectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__DownloadFileById:
		return (void*)soap_instantiate__TMSServ__DownloadFileById(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__DownloadFileByIdResponse:
		return (void*)soap_instantiate__TMSServ__DownloadFileByIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__UploadFileObject:
		return (void*)soap_instantiate__TMSServ__UploadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__UploadFileObjectResponse:
		return (void*)soap_instantiate__TMSServ__UploadFileObjectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__FinalizeFileObjectData:
		return (void*)soap_instantiate__TMSServ__FinalizeFileObjectData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse:
		return (void*)soap_instantiate__TMSServ__FinalizeFileObjectDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__OpenFileObjectDataProvider:
		return (void*)soap_instantiate__TMSServ__OpenFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse:
		return (void*)soap_instantiate__TMSServ__OpenFileObjectDataProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__OpenTapModelDataProvider:
		return (void*)soap_instantiate__TMSServ__OpenTapModelDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse:
		return (void*)soap_instantiate__TMSServ__OpenTapModelDataProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__OpenServerObjectDataProvider:
		return (void*)soap_instantiate__TMSServ__OpenServerObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse:
		return (void*)soap_instantiate__TMSServ__OpenServerObjectDataProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__DownloadFileObject:
		return (void*)soap_instantiate__TMSServ__DownloadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__DownloadFileObjectResponse:
		return (void*)soap_instantiate__TMSServ__DownloadFileObjectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__CloseFileObjectDataProvider:
		return (void*)soap_instantiate__TMSServ__CloseFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse:
		return (void*)soap_instantiate__TMSServ__CloseFileObjectDataProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__loginUser:
		return (void*)soap_instantiate___TMSServ2__loginUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__loginUserByByteArr:
		return (void*)soap_instantiate___TMSServ2__loginUserByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__logoutUser:
		return (void*)soap_instantiate___TMSServ2__logoutUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__QueryObjects:
		return (void*)soap_instantiate___TMSServ2__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__DownloadObjects:
		return (void*)soap_instantiate___TMSServ2__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__GetObjectsVersion:
		return (void*)soap_instantiate___TMSServ2__GetObjectsVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__GetTowerPartsLabelAndVersionSerial:
		return (void*)soap_instantiate___TMSServ2__GetTowerPartsLabelAndVersionSerial(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__MatchTowerParts:
		return (void*)soap_instantiate___TMSServ2__MatchTowerParts(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__SaveOrUpdateObjects:
		return (void*)soap_instantiate___TMSServ2__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__DeleteObject:
		return (void*)soap_instantiate___TMSServ2__DeleteObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__DownloadFileById:
		return (void*)soap_instantiate___TMSServ2__DownloadFileById(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__UploadFileObject:
		return (void*)soap_instantiate___TMSServ2__UploadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__FinalizeFileObjectData:
		return (void*)soap_instantiate___TMSServ2__FinalizeFileObjectData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__OpenFileObjectDataProvider:
		return (void*)soap_instantiate___TMSServ2__OpenFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__OpenTapModelDataProvider:
		return (void*)soap_instantiate___TMSServ2__OpenTapModelDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__OpenServerObjectDataProvider:
		return (void*)soap_instantiate___TMSServ2__OpenServerObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__DownloadFileObject:
		return (void*)soap_instantiate___TMSServ2__DownloadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ2__CloseFileObjectDataProvider:
		return (void*)soap_instantiate___TMSServ2__CloseFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__loginUser:
		return (void*)soap_instantiate___TMSServ3__loginUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__loginUserByByteArr:
		return (void*)soap_instantiate___TMSServ3__loginUserByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__logoutUser:
		return (void*)soap_instantiate___TMSServ3__logoutUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__QueryObjects:
		return (void*)soap_instantiate___TMSServ3__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__DownloadObjects:
		return (void*)soap_instantiate___TMSServ3__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__GetObjectsVersion:
		return (void*)soap_instantiate___TMSServ3__GetObjectsVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__GetTowerPartsLabelAndVersionSerial:
		return (void*)soap_instantiate___TMSServ3__GetTowerPartsLabelAndVersionSerial(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__MatchTowerParts:
		return (void*)soap_instantiate___TMSServ3__MatchTowerParts(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__SaveOrUpdateObjects:
		return (void*)soap_instantiate___TMSServ3__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__DeleteObject:
		return (void*)soap_instantiate___TMSServ3__DeleteObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__DownloadFileById:
		return (void*)soap_instantiate___TMSServ3__DownloadFileById(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__UploadFileObject:
		return (void*)soap_instantiate___TMSServ3__UploadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__FinalizeFileObjectData:
		return (void*)soap_instantiate___TMSServ3__FinalizeFileObjectData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__OpenFileObjectDataProvider:
		return (void*)soap_instantiate___TMSServ3__OpenFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__OpenTapModelDataProvider:
		return (void*)soap_instantiate___TMSServ3__OpenTapModelDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__OpenServerObjectDataProvider:
		return (void*)soap_instantiate___TMSServ3__OpenServerObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__DownloadFileObject:
		return (void*)soap_instantiate___TMSServ3__DownloadFileObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___TMSServ3__CloseFileObjectDataProvider:
		return (void*)soap_instantiate___TMSServ3__CloseFileObjectDataProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__ArrayOfProductVersion:
		return (void*)soap_instantiate_VersionServ__ArrayOfProductVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__ProductVersion:
		return (void*)soap_instantiate_VersionServ__ProductVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__ArrayOfInt:
		return (void*)soap_instantiate_VersionServ__ArrayOfInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__ArrayOfVersionRevision:
		return (void*)soap_instantiate_VersionServ__ArrayOfVersionRevision(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__VersionRevision:
		return (void*)soap_instantiate_VersionServ__VersionRevision(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__ObjectV:
		return (void*)soap_instantiate_VersionServ__ObjectV(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__ArrayOfDownLoadItem:
		return (void*)soap_instantiate_VersionServ__ArrayOfDownLoadItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__Login:
		return (void*)soap_instantiate__VersionServ__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__LoginResponse:
		return (void*)soap_instantiate__VersionServ__LoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__LoginByByteArr:
		return (void*)soap_instantiate__VersionServ__LoginByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__LoginByByteArrResponse:
		return (void*)soap_instantiate__VersionServ__LoginByByteArrResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__GetUpdateVerByCurVer:
		return (void*)soap_instantiate__VersionServ__GetUpdateVerByCurVer(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse:
		return (void*)soap_instantiate__VersionServ__GetUpdateVerByCurVerResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__SetRevisionReadFlag:
		return (void*)soap_instantiate__VersionServ__SetRevisionReadFlag(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse:
		return (void*)soap_instantiate__VersionServ__SetRevisionReadFlagResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__CompareVersion:
		return (void*)soap_instantiate__VersionServ__CompareVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__CompareVersionResponse:
		return (void*)soap_instantiate__VersionServ__CompareVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__GetVersionReleaseNotes:
		return (void*)soap_instantiate__VersionServ__GetVersionReleaseNotes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse:
		return (void*)soap_instantiate__VersionServ__GetVersionReleaseNotesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__GetDogAccessHistory:
		return (void*)soap_instantiate__VersionServ__GetDogAccessHistory(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse:
		return (void*)soap_instantiate__VersionServ__GetDogAccessHistoryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId:
		return (void*)soap_instantiate__VersionServ__QueryDownLoadItemArrByProductId(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse:
		return (void*)soap_instantiate__VersionServ__QueryDownLoadItemArrByProductIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__GetFileHeader:
		return (void*)soap_instantiate__VersionServ__GetFileHeader(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__GetFileHeaderResponse:
		return (void*)soap_instantiate__VersionServ__GetFileHeaderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__QueryObjects:
		return (void*)soap_instantiate__VersionServ__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__QueryObjectsResponse:
		return (void*)soap_instantiate__VersionServ__QueryObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__DownloadObjects:
		return (void*)soap_instantiate__VersionServ__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__DownloadObjectsResponse:
		return (void*)soap_instantiate__VersionServ__DownloadObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__SaveOrUpdateObjects:
		return (void*)soap_instantiate__VersionServ__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse:
		return (void*)soap_instantiate__VersionServ__SaveOrUpdateObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__DogAccessHistory:
		return (void*)soap_instantiate_VersionServ__DogAccessHistory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__DownLoadItem:
		return (void*)soap_instantiate_VersionServ__DownLoadItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_VersionServ__FileHeader:
		return (void*)soap_instantiate_VersionServ__FileHeader(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__Login:
		return (void*)soap_instantiate___VersionServ2__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__LoginByByteArr:
		return (void*)soap_instantiate___VersionServ2__LoginByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__GetUpdateVerByCurVer:
		return (void*)soap_instantiate___VersionServ2__GetUpdateVerByCurVer(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__SetRevisionReadFlag:
		return (void*)soap_instantiate___VersionServ2__SetRevisionReadFlag(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__CompareVersion:
		return (void*)soap_instantiate___VersionServ2__CompareVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__GetVersionReleaseNotes:
		return (void*)soap_instantiate___VersionServ2__GetVersionReleaseNotes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__GetDogAccessHistory:
		return (void*)soap_instantiate___VersionServ2__GetDogAccessHistory(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__QueryDownLoadItemArrByProductId:
		return (void*)soap_instantiate___VersionServ2__QueryDownLoadItemArrByProductId(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__GetFileHeader:
		return (void*)soap_instantiate___VersionServ2__GetFileHeader(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__QueryObjects:
		return (void*)soap_instantiate___VersionServ2__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__DownloadObjects:
		return (void*)soap_instantiate___VersionServ2__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ2__SaveOrUpdateObjects:
		return (void*)soap_instantiate___VersionServ2__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__Login:
		return (void*)soap_instantiate___VersionServ3__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__LoginByByteArr:
		return (void*)soap_instantiate___VersionServ3__LoginByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__GetUpdateVerByCurVer:
		return (void*)soap_instantiate___VersionServ3__GetUpdateVerByCurVer(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__SetRevisionReadFlag:
		return (void*)soap_instantiate___VersionServ3__SetRevisionReadFlag(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__CompareVersion:
		return (void*)soap_instantiate___VersionServ3__CompareVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__GetVersionReleaseNotes:
		return (void*)soap_instantiate___VersionServ3__GetVersionReleaseNotes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__GetDogAccessHistory:
		return (void*)soap_instantiate___VersionServ3__GetDogAccessHistory(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__QueryDownLoadItemArrByProductId:
		return (void*)soap_instantiate___VersionServ3__QueryDownLoadItemArrByProductId(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__GetFileHeader:
		return (void*)soap_instantiate___VersionServ3__GetFileHeader(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__QueryObjects:
		return (void*)soap_instantiate___VersionServ3__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__DownloadObjects:
		return (void*)soap_instantiate___VersionServ3__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___VersionServ3__SaveOrUpdateObjects:
		return (void*)soap_instantiate___VersionServ3__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_TMSServ__ArrayOfInt:
		if (p->size < 0)
			SOAP_DELETE((TMSServ__ArrayOfInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((TMSServ__ArrayOfInt*)p->ptr);
		break;
	case SOAP_TYPE_TMSServ__ArrayOfUnsignedInt:
		if (p->size < 0)
			SOAP_DELETE((TMSServ__ArrayOfUnsignedInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((TMSServ__ArrayOfUnsignedInt*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__loginUser:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__loginUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__loginUser*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__loginUserResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__loginUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__loginUserResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__loginUserByByteArr:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__loginUserByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__loginUserByByteArr*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__loginUserByByteArrResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__loginUserByByteArrResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__loginUserByByteArrResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__logoutUser:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__logoutUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__logoutUser*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__logoutUserResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__logoutUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__logoutUserResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__QueryObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__QueryObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__QueryObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__DownloadObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__DownloadObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__DownloadObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__GetObjectsVersion:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__GetObjectsVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__GetObjectsVersion*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__GetObjectsVersionResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__GetObjectsVersionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__GetObjectsVersionResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__GetTowerPartsLabelAndVersionSerialResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__GetTowerPartsLabelAndVersionSerialResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__MatchTowerParts:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__MatchTowerParts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__MatchTowerParts*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__MatchTowerPartsResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__MatchTowerPartsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__MatchTowerPartsResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__SaveOrUpdateObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__SaveOrUpdateObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__DeleteObject:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__DeleteObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__DeleteObject*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__DeleteObjectResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__DeleteObjectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__DeleteObjectResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__DownloadFileById:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__DownloadFileById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__DownloadFileById*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__DownloadFileByIdResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__DownloadFileByIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__DownloadFileByIdResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__UploadFileObject:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__UploadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__UploadFileObject*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__UploadFileObjectResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__UploadFileObjectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__UploadFileObjectResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__FinalizeFileObjectData:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__FinalizeFileObjectData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__FinalizeFileObjectData*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__FinalizeFileObjectDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__FinalizeFileObjectDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__OpenFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__OpenFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__OpenFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__OpenFileObjectDataProviderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__OpenFileObjectDataProviderResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__OpenTapModelDataProvider:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__OpenTapModelDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__OpenTapModelDataProvider*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__OpenTapModelDataProviderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__OpenTapModelDataProviderResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__OpenServerObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__OpenServerObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__OpenServerObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__OpenServerObjectDataProviderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__OpenServerObjectDataProviderResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__DownloadFileObject:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__DownloadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__DownloadFileObject*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__DownloadFileObjectResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__DownloadFileObjectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__DownloadFileObjectResponse*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__CloseFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__CloseFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__CloseFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse:
		if (p->size < 0)
			SOAP_DELETE((_TMSServ__CloseFileObjectDataProviderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_TMSServ__CloseFileObjectDataProviderResponse*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__loginUser:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__loginUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__loginUser*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__loginUserByByteArr:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__loginUserByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__loginUserByByteArr*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__logoutUser:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__logoutUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__logoutUser*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__GetObjectsVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__GetObjectsVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__GetObjectsVersion*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__GetTowerPartsLabelAndVersionSerial:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__MatchTowerParts:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__MatchTowerParts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__MatchTowerParts*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__DeleteObject:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__DeleteObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__DeleteObject*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__DownloadFileById:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__DownloadFileById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__DownloadFileById*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__UploadFileObject:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__UploadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__UploadFileObject*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__FinalizeFileObjectData:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__FinalizeFileObjectData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__FinalizeFileObjectData*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__OpenFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__OpenFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__OpenFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__OpenTapModelDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__OpenTapModelDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__OpenTapModelDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__OpenServerObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__OpenServerObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__OpenServerObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__DownloadFileObject:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__DownloadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__DownloadFileObject*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ2__CloseFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ2__CloseFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ2__CloseFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__loginUser:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__loginUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__loginUser*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__loginUserByByteArr:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__loginUserByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__loginUserByByteArr*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__logoutUser:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__logoutUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__logoutUser*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__GetObjectsVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__GetObjectsVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__GetObjectsVersion*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__GetTowerPartsLabelAndVersionSerial:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__GetTowerPartsLabelAndVersionSerial*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__MatchTowerParts:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__MatchTowerParts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__MatchTowerParts*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__DeleteObject:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__DeleteObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__DeleteObject*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__DownloadFileById:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__DownloadFileById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__DownloadFileById*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__UploadFileObject:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__UploadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__UploadFileObject*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__FinalizeFileObjectData:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__FinalizeFileObjectData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__FinalizeFileObjectData*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__OpenFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__OpenFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__OpenFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__OpenTapModelDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__OpenTapModelDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__OpenTapModelDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__OpenServerObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__OpenServerObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__OpenServerObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__DownloadFileObject:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__DownloadFileObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__DownloadFileObject*)p->ptr);
		break;
	case SOAP_TYPE___TMSServ3__CloseFileObjectDataProvider:
		if (p->size < 0)
			SOAP_DELETE((struct __TMSServ3__CloseFileObjectDataProvider*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __TMSServ3__CloseFileObjectDataProvider*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__ArrayOfProductVersion:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__ArrayOfProductVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__ArrayOfProductVersion*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__ProductVersion:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__ProductVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__ProductVersion*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__ArrayOfInt:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__ArrayOfInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__ArrayOfInt*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__ArrayOfVersionRevision:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__ArrayOfVersionRevision*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__ArrayOfVersionRevision*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__VersionRevision:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__VersionRevision*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__VersionRevision*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__ObjectV:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__ObjectV*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__ObjectV*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__ArrayOfDownLoadItem:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__ArrayOfDownLoadItem*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__ArrayOfDownLoadItem*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__Login:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__Login*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__LoginResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__LoginResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__LoginResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__LoginByByteArr:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__LoginByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__LoginByByteArr*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__LoginByByteArrResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__LoginByByteArrResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__LoginByByteArrResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__GetUpdateVerByCurVer:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__GetUpdateVerByCurVer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__GetUpdateVerByCurVer*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__GetUpdateVerByCurVerResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__GetUpdateVerByCurVerResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__SetRevisionReadFlag:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__SetRevisionReadFlag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__SetRevisionReadFlag*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__SetRevisionReadFlagResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__SetRevisionReadFlagResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__CompareVersion:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__CompareVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__CompareVersion*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__CompareVersionResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__CompareVersionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__CompareVersionResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__GetVersionReleaseNotes:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__GetVersionReleaseNotes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__GetVersionReleaseNotes*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__GetVersionReleaseNotesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__GetVersionReleaseNotesResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__GetDogAccessHistory:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__GetDogAccessHistory*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__GetDogAccessHistory*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__GetDogAccessHistoryResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__GetDogAccessHistoryResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__QueryDownLoadItemArrByProductId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__QueryDownLoadItemArrByProductId*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__QueryDownLoadItemArrByProductIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__QueryDownLoadItemArrByProductIdResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__GetFileHeader:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__GetFileHeader*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__GetFileHeader*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__GetFileHeaderResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__GetFileHeaderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__GetFileHeaderResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__QueryObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__QueryObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__QueryObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__DownloadObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__DownloadObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__DownloadObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_VersionServ__SaveOrUpdateObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_VersionServ__SaveOrUpdateObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__DogAccessHistory:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__DogAccessHistory*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__DogAccessHistory*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__DownLoadItem:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__DownLoadItem*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__DownLoadItem*)p->ptr);
		break;
	case SOAP_TYPE_VersionServ__FileHeader:
		if (p->size < 0)
			SOAP_DELETE((VersionServ__FileHeader*)p->ptr);
		else
			SOAP_DELETE_ARRAY((VersionServ__FileHeader*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__Login:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__Login*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__LoginByByteArr:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__LoginByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__LoginByByteArr*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__GetUpdateVerByCurVer:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__GetUpdateVerByCurVer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__GetUpdateVerByCurVer*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__SetRevisionReadFlag:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__SetRevisionReadFlag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__SetRevisionReadFlag*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__CompareVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__CompareVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__CompareVersion*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__GetVersionReleaseNotes:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__GetVersionReleaseNotes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__GetVersionReleaseNotes*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__GetDogAccessHistory:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__GetDogAccessHistory*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__GetDogAccessHistory*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__QueryDownLoadItemArrByProductId:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__QueryDownLoadItemArrByProductId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__QueryDownLoadItemArrByProductId*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__GetFileHeader:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__GetFileHeader*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__GetFileHeader*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ2__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ2__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ2__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__Login:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__Login*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__LoginByByteArr:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__LoginByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__LoginByByteArr*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__GetUpdateVerByCurVer:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__GetUpdateVerByCurVer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__GetUpdateVerByCurVer*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__SetRevisionReadFlag:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__SetRevisionReadFlag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__SetRevisionReadFlag*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__CompareVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__CompareVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__CompareVersion*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__GetVersionReleaseNotes:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__GetVersionReleaseNotes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__GetVersionReleaseNotes*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__GetDogAccessHistory:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__GetDogAccessHistory*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__GetDogAccessHistory*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__QueryDownLoadItemArrByProductId:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__QueryDownLoadItemArrByProductId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__QueryDownLoadItemArrByProductId*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__GetFileHeader:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__GetFileHeader*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__GetFileHeader*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE___VersionServ3__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __VersionServ3__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __VersionServ3__SaveOrUpdateObjects*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__byte);
	if (soap_out_xsd__byte(soap, tag?tag:"xsd:byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _VersionServ__SaveOrUpdateObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_VersionServ__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult);
	/* transient soap skipped */
}

void _VersionServ__SaveOrUpdateObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_VersionServ__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__SaveOrUpdateObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__SaveOrUpdateObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__SaveOrUpdateObjectsResponse(struct soap *soap, const char *tag, int id, const _VersionServ__SaveOrUpdateObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse), type))
		return soap->error;
	if (a->SaveOrUpdateObjectsResult)
		soap_element_result(soap, "VersionServ:SaveOrUpdateObjectsResult");
	if (soap_out_string(soap, "VersionServ:SaveOrUpdateObjectsResult", -1, &(a->_VersionServ__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__SaveOrUpdateObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__SaveOrUpdateObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__SaveOrUpdateObjectsResponse * SOAP_FMAC4 soap_in__VersionServ__SaveOrUpdateObjectsResponse(struct soap *soap, const char *tag, _VersionServ__SaveOrUpdateObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__SaveOrUpdateObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse, sizeof(_VersionServ__SaveOrUpdateObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__SaveOrUpdateObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SaveOrUpdateObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SaveOrUpdateObjectsResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:SaveOrUpdateObjectsResult", &(a->_VersionServ__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult), "xsd:string"))
				{	soap_flag_SaveOrUpdateObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:SaveOrUpdateObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__SaveOrUpdateObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse, 0, sizeof(_VersionServ__SaveOrUpdateObjectsResponse), 0, soap_copy__VersionServ__SaveOrUpdateObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__SaveOrUpdateObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:SaveOrUpdateObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__SaveOrUpdateObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__SaveOrUpdateObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__SaveOrUpdateObjectsResponse * SOAP_FMAC4 soap_get__VersionServ__SaveOrUpdateObjectsResponse(struct soap *soap, _VersionServ__SaveOrUpdateObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__SaveOrUpdateObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__SaveOrUpdateObjectsResponse * SOAP_FMAC2 soap_instantiate__VersionServ__SaveOrUpdateObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__SaveOrUpdateObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__SaveOrUpdateObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__SaveOrUpdateObjectsResponse);
		if (size)
			*size = sizeof(_VersionServ__SaveOrUpdateObjectsResponse);
		((_VersionServ__SaveOrUpdateObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__SaveOrUpdateObjectsResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__SaveOrUpdateObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__SaveOrUpdateObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__SaveOrUpdateObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__SaveOrUpdateObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__SaveOrUpdateObjectsResponse %p -> %p\n", q, p));
	*(_VersionServ__SaveOrUpdateObjectsResponse*)p = *(_VersionServ__SaveOrUpdateObjectsResponse*)q;
}

void _VersionServ__SaveOrUpdateObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_VersionServ__SaveOrUpdateObjects::sessionId);
	soap_default_string(soap, &this->_VersionServ__SaveOrUpdateObjects::clsName);
	soap_default_string(soap, &this->_VersionServ__SaveOrUpdateObjects::xmlformat);
	this->_VersionServ__SaveOrUpdateObjects::byteArr = NULL;
	/* transient soap skipped */
}

void _VersionServ__SaveOrUpdateObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__SaveOrUpdateObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_VersionServ__SaveOrUpdateObjects::clsName);
	soap_serialize_string(soap, &this->_VersionServ__SaveOrUpdateObjects::xmlformat);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_VersionServ__SaveOrUpdateObjects::byteArr);
	/* transient soap skipped */
#endif
}

int _VersionServ__SaveOrUpdateObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__SaveOrUpdateObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const _VersionServ__SaveOrUpdateObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__SaveOrUpdateObjects), type))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:sessionId", -1, &(a->_VersionServ__SaveOrUpdateObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:clsName", -1, &(a->_VersionServ__SaveOrUpdateObjects::clsName), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:xmlformat", -1, &(a->_VersionServ__SaveOrUpdateObjects::xmlformat), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "VersionServ:byteArr", -1, &(a->_VersionServ__SaveOrUpdateObjects::byteArr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__SaveOrUpdateObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__SaveOrUpdateObjects(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__SaveOrUpdateObjects * SOAP_FMAC4 soap_in__VersionServ__SaveOrUpdateObjects(struct soap *soap, const char *tag, _VersionServ__SaveOrUpdateObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__SaveOrUpdateObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__SaveOrUpdateObjects, sizeof(_VersionServ__SaveOrUpdateObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__SaveOrUpdateObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__SaveOrUpdateObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_xmlformat1 = 1;
	size_t soap_flag_byteArr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:sessionId", &(a->_VersionServ__SaveOrUpdateObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:clsName", &(a->_VersionServ__SaveOrUpdateObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_xmlformat1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:xmlformat", &(a->_VersionServ__SaveOrUpdateObjects::xmlformat), "xsd:string"))
				{	soap_flag_xmlformat1--;
					continue;
				}
			if (soap_flag_byteArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "VersionServ:byteArr", &(a->_VersionServ__SaveOrUpdateObjects::byteArr), "xsd:base64Binary"))
				{	soap_flag_byteArr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__SaveOrUpdateObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__SaveOrUpdateObjects, 0, sizeof(_VersionServ__SaveOrUpdateObjects), 0, soap_copy__VersionServ__SaveOrUpdateObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__SaveOrUpdateObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__SaveOrUpdateObjects);
	if (this->soap_out(soap, tag?tag:"VersionServ:SaveOrUpdateObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__SaveOrUpdateObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__SaveOrUpdateObjects(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__SaveOrUpdateObjects * SOAP_FMAC4 soap_get__VersionServ__SaveOrUpdateObjects(struct soap *soap, _VersionServ__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate__VersionServ__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(_VersionServ__SaveOrUpdateObjects);
		((_VersionServ__SaveOrUpdateObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(_VersionServ__SaveOrUpdateObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__SaveOrUpdateObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(_VersionServ__SaveOrUpdateObjects*)p = *(_VersionServ__SaveOrUpdateObjects*)q;
}

void _VersionServ__DownloadObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__DownloadObjectsResponse::DownloadObjectsResult = NULL;
	/* transient soap skipped */
}

void _VersionServ__DownloadObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_VersionServ__DownloadObjectsResponse::DownloadObjectsResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__DownloadObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__DownloadObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__DownloadObjectsResponse(struct soap *soap, const char *tag, int id, const _VersionServ__DownloadObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__DownloadObjectsResponse), type))
		return soap->error;
	if (a->DownloadObjectsResult)
		soap_element_result(soap, "VersionServ:DownloadObjectsResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "VersionServ:DownloadObjectsResult", -1, &(a->_VersionServ__DownloadObjectsResponse::DownloadObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__DownloadObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__DownloadObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__DownloadObjectsResponse * SOAP_FMAC4 soap_in__VersionServ__DownloadObjectsResponse(struct soap *soap, const char *tag, _VersionServ__DownloadObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__DownloadObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__DownloadObjectsResponse, sizeof(_VersionServ__DownloadObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__DownloadObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__DownloadObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DownloadObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadObjectsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "VersionServ:DownloadObjectsResult", &(a->_VersionServ__DownloadObjectsResponse::DownloadObjectsResult), "xsd:base64Binary"))
				{	soap_flag_DownloadObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:DownloadObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__DownloadObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__DownloadObjectsResponse, 0, sizeof(_VersionServ__DownloadObjectsResponse), 0, soap_copy__VersionServ__DownloadObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__DownloadObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__DownloadObjectsResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:DownloadObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__DownloadObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__DownloadObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__DownloadObjectsResponse * SOAP_FMAC4 soap_get__VersionServ__DownloadObjectsResponse(struct soap *soap, _VersionServ__DownloadObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__DownloadObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__DownloadObjectsResponse * SOAP_FMAC2 soap_instantiate__VersionServ__DownloadObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__DownloadObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__DownloadObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__DownloadObjectsResponse);
		if (size)
			*size = sizeof(_VersionServ__DownloadObjectsResponse);
		((_VersionServ__DownloadObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__DownloadObjectsResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__DownloadObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__DownloadObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__DownloadObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__DownloadObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__DownloadObjectsResponse %p -> %p\n", q, p));
	*(_VersionServ__DownloadObjectsResponse*)p = *(_VersionServ__DownloadObjectsResponse*)q;
}

void _VersionServ__DownloadObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_VersionServ__DownloadObjects::sessionId);
	soap_default_string(soap, &this->_VersionServ__DownloadObjects::clsName);
	this->_VersionServ__DownloadObjects::idarr = NULL;
	soap_default_unsignedInt(soap, &this->_VersionServ__DownloadObjects::serialize);
	/* transient soap skipped */
}

void _VersionServ__DownloadObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__DownloadObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_VersionServ__DownloadObjects::clsName);
	soap_serialize_PointerToVersionServ__ArrayOfInt(soap, &this->_VersionServ__DownloadObjects::idarr);
	soap_embedded(soap, &this->_VersionServ__DownloadObjects::serialize, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _VersionServ__DownloadObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__DownloadObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__DownloadObjects(struct soap *soap, const char *tag, int id, const _VersionServ__DownloadObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__DownloadObjects), type))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:sessionId", -1, &(a->_VersionServ__DownloadObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:clsName", -1, &(a->_VersionServ__DownloadObjects::clsName), ""))
		return soap->error;
	if (soap_out_PointerToVersionServ__ArrayOfInt(soap, "VersionServ:idarr", -1, &(a->_VersionServ__DownloadObjects::idarr), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:serialize", -1, &(a->_VersionServ__DownloadObjects::serialize), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__DownloadObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__DownloadObjects(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__DownloadObjects * SOAP_FMAC4 soap_in__VersionServ__DownloadObjects(struct soap *soap, const char *tag, _VersionServ__DownloadObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__DownloadObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__DownloadObjects, sizeof(_VersionServ__DownloadObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__DownloadObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__DownloadObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_idarr1 = 1;
	size_t soap_flag_serialize1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:sessionId", &(a->_VersionServ__DownloadObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:clsName", &(a->_VersionServ__DownloadObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_idarr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToVersionServ__ArrayOfInt(soap, "VersionServ:idarr", &(a->_VersionServ__DownloadObjects::idarr), "VersionServ:ArrayOfInt"))
				{	soap_flag_idarr1--;
					continue;
				}
			if (soap_flag_serialize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:serialize", &(a->_VersionServ__DownloadObjects::serialize), "xsd:unsignedInt"))
				{	soap_flag_serialize1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__DownloadObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__DownloadObjects, 0, sizeof(_VersionServ__DownloadObjects), 0, soap_copy__VersionServ__DownloadObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_serialize1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__DownloadObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__DownloadObjects);
	if (this->soap_out(soap, tag?tag:"VersionServ:DownloadObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__DownloadObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__DownloadObjects(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__DownloadObjects * SOAP_FMAC4 soap_get__VersionServ__DownloadObjects(struct soap *soap, _VersionServ__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__DownloadObjects * SOAP_FMAC2 soap_instantiate__VersionServ__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__DownloadObjects);
		if (size)
			*size = sizeof(_VersionServ__DownloadObjects);
		((_VersionServ__DownloadObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__DownloadObjects, n);
		if (size)
			*size = n * sizeof(_VersionServ__DownloadObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__DownloadObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__DownloadObjects %p -> %p\n", q, p));
	*(_VersionServ__DownloadObjects*)p = *(_VersionServ__DownloadObjects*)q;
}

void _VersionServ__QueryObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__QueryObjectsResponse::QueryObjectsResult = NULL;
	/* transient soap skipped */
}

void _VersionServ__QueryObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_VersionServ__QueryObjectsResponse::QueryObjectsResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__QueryObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__QueryObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__QueryObjectsResponse(struct soap *soap, const char *tag, int id, const _VersionServ__QueryObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__QueryObjectsResponse), type))
		return soap->error;
	if (a->QueryObjectsResult)
		soap_element_result(soap, "VersionServ:QueryObjectsResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "VersionServ:QueryObjectsResult", -1, &(a->_VersionServ__QueryObjectsResponse::QueryObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__QueryObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__QueryObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__QueryObjectsResponse * SOAP_FMAC4 soap_in__VersionServ__QueryObjectsResponse(struct soap *soap, const char *tag, _VersionServ__QueryObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__QueryObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__QueryObjectsResponse, sizeof(_VersionServ__QueryObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__QueryObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__QueryObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_QueryObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_QueryObjectsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "VersionServ:QueryObjectsResult", &(a->_VersionServ__QueryObjectsResponse::QueryObjectsResult), "xsd:base64Binary"))
				{	soap_flag_QueryObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:QueryObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__QueryObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__QueryObjectsResponse, 0, sizeof(_VersionServ__QueryObjectsResponse), 0, soap_copy__VersionServ__QueryObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__QueryObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__QueryObjectsResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:QueryObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__QueryObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__QueryObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__QueryObjectsResponse * SOAP_FMAC4 soap_get__VersionServ__QueryObjectsResponse(struct soap *soap, _VersionServ__QueryObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__QueryObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__QueryObjectsResponse * SOAP_FMAC2 soap_instantiate__VersionServ__QueryObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__QueryObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__QueryObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__QueryObjectsResponse);
		if (size)
			*size = sizeof(_VersionServ__QueryObjectsResponse);
		((_VersionServ__QueryObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__QueryObjectsResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__QueryObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__QueryObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__QueryObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__QueryObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__QueryObjectsResponse %p -> %p\n", q, p));
	*(_VersionServ__QueryObjectsResponse*)p = *(_VersionServ__QueryObjectsResponse*)q;
}

void _VersionServ__QueryObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_VersionServ__QueryObjects::sessionId);
	soap_default_string(soap, &this->_VersionServ__QueryObjects::clsName);
	soap_default_string(soap, &this->_VersionServ__QueryObjects::xmlScope);
	/* transient soap skipped */
}

void _VersionServ__QueryObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__QueryObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_VersionServ__QueryObjects::clsName);
	soap_serialize_string(soap, &this->_VersionServ__QueryObjects::xmlScope);
	/* transient soap skipped */
#endif
}

int _VersionServ__QueryObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__QueryObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__QueryObjects(struct soap *soap, const char *tag, int id, const _VersionServ__QueryObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__QueryObjects), type))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:sessionId", -1, &(a->_VersionServ__QueryObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:clsName", -1, &(a->_VersionServ__QueryObjects::clsName), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:xmlScope", -1, &(a->_VersionServ__QueryObjects::xmlScope), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__QueryObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__QueryObjects(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__QueryObjects * SOAP_FMAC4 soap_in__VersionServ__QueryObjects(struct soap *soap, const char *tag, _VersionServ__QueryObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__QueryObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__QueryObjects, sizeof(_VersionServ__QueryObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__QueryObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__QueryObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_xmlScope1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:sessionId", &(a->_VersionServ__QueryObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:clsName", &(a->_VersionServ__QueryObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_xmlScope1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:xmlScope", &(a->_VersionServ__QueryObjects::xmlScope), "xsd:string"))
				{	soap_flag_xmlScope1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__QueryObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__QueryObjects, 0, sizeof(_VersionServ__QueryObjects), 0, soap_copy__VersionServ__QueryObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__QueryObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__QueryObjects);
	if (this->soap_out(soap, tag?tag:"VersionServ:QueryObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__QueryObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__QueryObjects(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__QueryObjects * SOAP_FMAC4 soap_get__VersionServ__QueryObjects(struct soap *soap, _VersionServ__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__QueryObjects * SOAP_FMAC2 soap_instantiate__VersionServ__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__QueryObjects);
		if (size)
			*size = sizeof(_VersionServ__QueryObjects);
		((_VersionServ__QueryObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__QueryObjects, n);
		if (size)
			*size = n * sizeof(_VersionServ__QueryObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__QueryObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__QueryObjects %p -> %p\n", q, p));
	*(_VersionServ__QueryObjects*)p = *(_VersionServ__QueryObjects*)q;
}

void _VersionServ__GetFileHeaderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__GetFileHeaderResponse::GetFileHeaderResult = NULL;
	/* transient soap skipped */
}

void _VersionServ__GetFileHeaderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToVersionServ__FileHeader(soap, &this->_VersionServ__GetFileHeaderResponse::GetFileHeaderResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__GetFileHeaderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__GetFileHeaderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__GetFileHeaderResponse(struct soap *soap, const char *tag, int id, const _VersionServ__GetFileHeaderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__GetFileHeaderResponse), type))
		return soap->error;
	if (a->GetFileHeaderResult)
		soap_element_result(soap, "VersionServ:GetFileHeaderResult");
	if (soap_out_PointerToVersionServ__FileHeader(soap, "VersionServ:GetFileHeaderResult", -1, &(a->_VersionServ__GetFileHeaderResponse::GetFileHeaderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__GetFileHeaderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__GetFileHeaderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__GetFileHeaderResponse * SOAP_FMAC4 soap_in__VersionServ__GetFileHeaderResponse(struct soap *soap, const char *tag, _VersionServ__GetFileHeaderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__GetFileHeaderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__GetFileHeaderResponse, sizeof(_VersionServ__GetFileHeaderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__GetFileHeaderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__GetFileHeaderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetFileHeaderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetFileHeaderResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToVersionServ__FileHeader(soap, "VersionServ:GetFileHeaderResult", &(a->_VersionServ__GetFileHeaderResponse::GetFileHeaderResult), "VersionServ:FileHeader"))
				{	soap_flag_GetFileHeaderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:GetFileHeaderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__GetFileHeaderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__GetFileHeaderResponse, 0, sizeof(_VersionServ__GetFileHeaderResponse), 0, soap_copy__VersionServ__GetFileHeaderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__GetFileHeaderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__GetFileHeaderResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:GetFileHeaderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__GetFileHeaderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__GetFileHeaderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__GetFileHeaderResponse * SOAP_FMAC4 soap_get__VersionServ__GetFileHeaderResponse(struct soap *soap, _VersionServ__GetFileHeaderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__GetFileHeaderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__GetFileHeaderResponse * SOAP_FMAC2 soap_instantiate__VersionServ__GetFileHeaderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__GetFileHeaderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__GetFileHeaderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__GetFileHeaderResponse);
		if (size)
			*size = sizeof(_VersionServ__GetFileHeaderResponse);
		((_VersionServ__GetFileHeaderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__GetFileHeaderResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__GetFileHeaderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__GetFileHeaderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__GetFileHeaderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__GetFileHeaderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__GetFileHeaderResponse %p -> %p\n", q, p));
	*(_VersionServ__GetFileHeaderResponse*)p = *(_VersionServ__GetFileHeaderResponse*)q;
}

void _VersionServ__GetFileHeader::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_VersionServ__GetFileHeader::downLoadItemId);
	/* transient soap skipped */
}

void _VersionServ__GetFileHeader::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__GetFileHeader::downLoadItemId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _VersionServ__GetFileHeader::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__GetFileHeader(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__GetFileHeader(struct soap *soap, const char *tag, int id, const _VersionServ__GetFileHeader *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__GetFileHeader), type))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:downLoadItemId", -1, &(a->_VersionServ__GetFileHeader::downLoadItemId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__GetFileHeader::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__GetFileHeader(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__GetFileHeader * SOAP_FMAC4 soap_in__VersionServ__GetFileHeader(struct soap *soap, const char *tag, _VersionServ__GetFileHeader *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__GetFileHeader *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__GetFileHeader, sizeof(_VersionServ__GetFileHeader), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__GetFileHeader)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__GetFileHeader *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_downLoadItemId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_downLoadItemId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:downLoadItemId", &(a->_VersionServ__GetFileHeader::downLoadItemId), "xsd:int"))
				{	soap_flag_downLoadItemId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__GetFileHeader *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__GetFileHeader, 0, sizeof(_VersionServ__GetFileHeader), 0, soap_copy__VersionServ__GetFileHeader);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_downLoadItemId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__GetFileHeader::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__GetFileHeader);
	if (this->soap_out(soap, tag?tag:"VersionServ:GetFileHeader", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__GetFileHeader::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__GetFileHeader(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__GetFileHeader * SOAP_FMAC4 soap_get__VersionServ__GetFileHeader(struct soap *soap, _VersionServ__GetFileHeader *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__GetFileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__GetFileHeader * SOAP_FMAC2 soap_instantiate__VersionServ__GetFileHeader(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__GetFileHeader(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__GetFileHeader, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__GetFileHeader);
		if (size)
			*size = sizeof(_VersionServ__GetFileHeader);
		((_VersionServ__GetFileHeader*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__GetFileHeader, n);
		if (size)
			*size = n * sizeof(_VersionServ__GetFileHeader);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__GetFileHeader*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__GetFileHeader*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__GetFileHeader(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__GetFileHeader %p -> %p\n", q, p));
	*(_VersionServ__GetFileHeader*)p = *(_VersionServ__GetFileHeader*)q;
}

void _VersionServ__QueryDownLoadItemArrByProductIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__QueryDownLoadItemArrByProductIdResponse::QueryDownLoadItemArrByProductIdResult = NULL;
	/* transient soap skipped */
}

void _VersionServ__QueryDownLoadItemArrByProductIdResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToVersionServ__ArrayOfDownLoadItem(soap, &this->_VersionServ__QueryDownLoadItemArrByProductIdResponse::QueryDownLoadItemArrByProductIdResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__QueryDownLoadItemArrByProductIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__QueryDownLoadItemArrByProductIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, const char *tag, int id, const _VersionServ__QueryDownLoadItemArrByProductIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse), type))
		return soap->error;
	if (a->QueryDownLoadItemArrByProductIdResult)
		soap_element_result(soap, "VersionServ:QueryDownLoadItemArrByProductIdResult");
	if (soap_out_PointerToVersionServ__ArrayOfDownLoadItem(soap, "VersionServ:QueryDownLoadItemArrByProductIdResult", -1, &(a->_VersionServ__QueryDownLoadItemArrByProductIdResponse::QueryDownLoadItemArrByProductIdResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__QueryDownLoadItemArrByProductIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__QueryDownLoadItemArrByProductIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__QueryDownLoadItemArrByProductIdResponse * SOAP_FMAC4 soap_in__VersionServ__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, const char *tag, _VersionServ__QueryDownLoadItemArrByProductIdResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__QueryDownLoadItemArrByProductIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse, sizeof(_VersionServ__QueryDownLoadItemArrByProductIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__QueryDownLoadItemArrByProductIdResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_QueryDownLoadItemArrByProductIdResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_QueryDownLoadItemArrByProductIdResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToVersionServ__ArrayOfDownLoadItem(soap, "VersionServ:QueryDownLoadItemArrByProductIdResult", &(a->_VersionServ__QueryDownLoadItemArrByProductIdResponse::QueryDownLoadItemArrByProductIdResult), "VersionServ:ArrayOfDownLoadItem"))
				{	soap_flag_QueryDownLoadItemArrByProductIdResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:QueryDownLoadItemArrByProductIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__QueryDownLoadItemArrByProductIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse, 0, sizeof(_VersionServ__QueryDownLoadItemArrByProductIdResponse), 0, soap_copy__VersionServ__QueryDownLoadItemArrByProductIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__QueryDownLoadItemArrByProductIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:QueryDownLoadItemArrByProductIdResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__QueryDownLoadItemArrByProductIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__QueryDownLoadItemArrByProductIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__QueryDownLoadItemArrByProductIdResponse * SOAP_FMAC4 soap_get__VersionServ__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, _VersionServ__QueryDownLoadItemArrByProductIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__QueryDownLoadItemArrByProductIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__QueryDownLoadItemArrByProductIdResponse * SOAP_FMAC2 soap_instantiate__VersionServ__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__QueryDownLoadItemArrByProductIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductIdResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__QueryDownLoadItemArrByProductIdResponse);
		if (size)
			*size = sizeof(_VersionServ__QueryDownLoadItemArrByProductIdResponse);
		((_VersionServ__QueryDownLoadItemArrByProductIdResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__QueryDownLoadItemArrByProductIdResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__QueryDownLoadItemArrByProductIdResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__QueryDownLoadItemArrByProductIdResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__QueryDownLoadItemArrByProductIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__QueryDownLoadItemArrByProductIdResponse %p -> %p\n", q, p));
	*(_VersionServ__QueryDownLoadItemArrByProductIdResponse*)p = *(_VersionServ__QueryDownLoadItemArrByProductIdResponse*)q;
}

void _VersionServ__QueryDownLoadItemArrByProductId::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_VersionServ__QueryDownLoadItemArrByProductId::dogNo);
	soap_default_int(soap, &this->_VersionServ__QueryDownLoadItemArrByProductId::productId);
	/* transient soap skipped */
}

void _VersionServ__QueryDownLoadItemArrByProductId::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_VersionServ__QueryDownLoadItemArrByProductId::dogNo);
	soap_embedded(soap, &this->_VersionServ__QueryDownLoadItemArrByProductId::productId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _VersionServ__QueryDownLoadItemArrByProductId::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__QueryDownLoadItemArrByProductId(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, int id, const _VersionServ__QueryDownLoadItemArrByProductId *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId), type))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:dogNo", -1, &(a->_VersionServ__QueryDownLoadItemArrByProductId::dogNo), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:productId", -1, &(a->_VersionServ__QueryDownLoadItemArrByProductId::productId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__QueryDownLoadItemArrByProductId::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__QueryDownLoadItemArrByProductId(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_in__VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, _VersionServ__QueryDownLoadItemArrByProductId *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__QueryDownLoadItemArrByProductId *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId, sizeof(_VersionServ__QueryDownLoadItemArrByProductId), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__QueryDownLoadItemArrByProductId *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_dogNo1 = 1;
	size_t soap_flag_productId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dogNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:dogNo", &(a->_VersionServ__QueryDownLoadItemArrByProductId::dogNo), "xsd:string"))
				{	soap_flag_dogNo1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:productId", &(a->_VersionServ__QueryDownLoadItemArrByProductId::productId), "xsd:int"))
				{	soap_flag_productId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__QueryDownLoadItemArrByProductId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId, 0, sizeof(_VersionServ__QueryDownLoadItemArrByProductId), 0, soap_copy__VersionServ__QueryDownLoadItemArrByProductId);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_productId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__QueryDownLoadItemArrByProductId::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId);
	if (this->soap_out(soap, tag?tag:"VersionServ:QueryDownLoadItemArrByProductId", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__QueryDownLoadItemArrByProductId::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__QueryDownLoadItemArrByProductId(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_get__VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, _VersionServ__QueryDownLoadItemArrByProductId *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__QueryDownLoadItemArrByProductId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__QueryDownLoadItemArrByProductId * SOAP_FMAC2 soap_instantiate__VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__QueryDownLoadItemArrByProductId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__QueryDownLoadItemArrByProductId);
		if (size)
			*size = sizeof(_VersionServ__QueryDownLoadItemArrByProductId);
		((_VersionServ__QueryDownLoadItemArrByProductId*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__QueryDownLoadItemArrByProductId, n);
		if (size)
			*size = n * sizeof(_VersionServ__QueryDownLoadItemArrByProductId);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__QueryDownLoadItemArrByProductId*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__QueryDownLoadItemArrByProductId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__QueryDownLoadItemArrByProductId %p -> %p\n", q, p));
	*(_VersionServ__QueryDownLoadItemArrByProductId*)p = *(_VersionServ__QueryDownLoadItemArrByProductId*)q;
}

void _VersionServ__GetDogAccessHistoryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__GetDogAccessHistoryResponse::GetDogAccessHistoryResult = NULL;
	/* transient soap skipped */
}

void _VersionServ__GetDogAccessHistoryResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToVersionServ__DogAccessHistory(soap, &this->_VersionServ__GetDogAccessHistoryResponse::GetDogAccessHistoryResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__GetDogAccessHistoryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__GetDogAccessHistoryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__GetDogAccessHistoryResponse(struct soap *soap, const char *tag, int id, const _VersionServ__GetDogAccessHistoryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse), type))
		return soap->error;
	if (a->GetDogAccessHistoryResult)
		soap_element_result(soap, "VersionServ:GetDogAccessHistoryResult");
	if (soap_out_PointerToVersionServ__DogAccessHistory(soap, "VersionServ:GetDogAccessHistoryResult", -1, &(a->_VersionServ__GetDogAccessHistoryResponse::GetDogAccessHistoryResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__GetDogAccessHistoryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__GetDogAccessHistoryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__GetDogAccessHistoryResponse * SOAP_FMAC4 soap_in__VersionServ__GetDogAccessHistoryResponse(struct soap *soap, const char *tag, _VersionServ__GetDogAccessHistoryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__GetDogAccessHistoryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse, sizeof(_VersionServ__GetDogAccessHistoryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__GetDogAccessHistoryResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDogAccessHistoryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDogAccessHistoryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToVersionServ__DogAccessHistory(soap, "VersionServ:GetDogAccessHistoryResult", &(a->_VersionServ__GetDogAccessHistoryResponse::GetDogAccessHistoryResult), "VersionServ:DogAccessHistory"))
				{	soap_flag_GetDogAccessHistoryResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:GetDogAccessHistoryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__GetDogAccessHistoryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse, 0, sizeof(_VersionServ__GetDogAccessHistoryResponse), 0, soap_copy__VersionServ__GetDogAccessHistoryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__GetDogAccessHistoryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:GetDogAccessHistoryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__GetDogAccessHistoryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__GetDogAccessHistoryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__GetDogAccessHistoryResponse * SOAP_FMAC4 soap_get__VersionServ__GetDogAccessHistoryResponse(struct soap *soap, _VersionServ__GetDogAccessHistoryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__GetDogAccessHistoryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__GetDogAccessHistoryResponse * SOAP_FMAC2 soap_instantiate__VersionServ__GetDogAccessHistoryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__GetDogAccessHistoryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__GetDogAccessHistoryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__GetDogAccessHistoryResponse);
		if (size)
			*size = sizeof(_VersionServ__GetDogAccessHistoryResponse);
		((_VersionServ__GetDogAccessHistoryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__GetDogAccessHistoryResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__GetDogAccessHistoryResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__GetDogAccessHistoryResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__GetDogAccessHistoryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__GetDogAccessHistoryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__GetDogAccessHistoryResponse %p -> %p\n", q, p));
	*(_VersionServ__GetDogAccessHistoryResponse*)p = *(_VersionServ__GetDogAccessHistoryResponse*)q;
}

void _VersionServ__GetDogAccessHistory::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _VersionServ__GetDogAccessHistory::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _VersionServ__GetDogAccessHistory::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__GetDogAccessHistory(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__GetDogAccessHistory(struct soap *soap, const char *tag, int id, const _VersionServ__GetDogAccessHistory *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__GetDogAccessHistory), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__GetDogAccessHistory::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__GetDogAccessHistory(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__GetDogAccessHistory * SOAP_FMAC4 soap_in__VersionServ__GetDogAccessHistory(struct soap *soap, const char *tag, _VersionServ__GetDogAccessHistory *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__GetDogAccessHistory *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__GetDogAccessHistory, sizeof(_VersionServ__GetDogAccessHistory), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__GetDogAccessHistory)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__GetDogAccessHistory *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__GetDogAccessHistory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__GetDogAccessHistory, 0, sizeof(_VersionServ__GetDogAccessHistory), 0, soap_copy__VersionServ__GetDogAccessHistory);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__GetDogAccessHistory::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__GetDogAccessHistory);
	if (this->soap_out(soap, tag?tag:"VersionServ:GetDogAccessHistory", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__GetDogAccessHistory::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__GetDogAccessHistory(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__GetDogAccessHistory * SOAP_FMAC4 soap_get__VersionServ__GetDogAccessHistory(struct soap *soap, _VersionServ__GetDogAccessHistory *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__GetDogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__GetDogAccessHistory * SOAP_FMAC2 soap_instantiate__VersionServ__GetDogAccessHistory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__GetDogAccessHistory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__GetDogAccessHistory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__GetDogAccessHistory);
		if (size)
			*size = sizeof(_VersionServ__GetDogAccessHistory);
		((_VersionServ__GetDogAccessHistory*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__GetDogAccessHistory, n);
		if (size)
			*size = n * sizeof(_VersionServ__GetDogAccessHistory);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__GetDogAccessHistory*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__GetDogAccessHistory*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__GetDogAccessHistory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__GetDogAccessHistory %p -> %p\n", q, p));
	*(_VersionServ__GetDogAccessHistory*)p = *(_VersionServ__GetDogAccessHistory*)q;
}

void _VersionServ__GetVersionReleaseNotesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__GetVersionReleaseNotesResponse::GetVersionReleaseNotesResult = NULL;
	/* transient soap skipped */
}

void _VersionServ__GetVersionReleaseNotesResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToVersionServ__ArrayOfVersionRevision(soap, &this->_VersionServ__GetVersionReleaseNotesResponse::GetVersionReleaseNotesResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__GetVersionReleaseNotesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__GetVersionReleaseNotesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__GetVersionReleaseNotesResponse(struct soap *soap, const char *tag, int id, const _VersionServ__GetVersionReleaseNotesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse), type))
		return soap->error;
	if (a->GetVersionReleaseNotesResult)
		soap_element_result(soap, "VersionServ:GetVersionReleaseNotesResult");
	if (soap_out_PointerToVersionServ__ArrayOfVersionRevision(soap, "VersionServ:GetVersionReleaseNotesResult", -1, &(a->_VersionServ__GetVersionReleaseNotesResponse::GetVersionReleaseNotesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__GetVersionReleaseNotesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__GetVersionReleaseNotesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__GetVersionReleaseNotesResponse * SOAP_FMAC4 soap_in__VersionServ__GetVersionReleaseNotesResponse(struct soap *soap, const char *tag, _VersionServ__GetVersionReleaseNotesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__GetVersionReleaseNotesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse, sizeof(_VersionServ__GetVersionReleaseNotesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__GetVersionReleaseNotesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetVersionReleaseNotesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetVersionReleaseNotesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToVersionServ__ArrayOfVersionRevision(soap, "VersionServ:GetVersionReleaseNotesResult", &(a->_VersionServ__GetVersionReleaseNotesResponse::GetVersionReleaseNotesResult), "VersionServ:ArrayOfVersionRevision"))
				{	soap_flag_GetVersionReleaseNotesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:GetVersionReleaseNotesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__GetVersionReleaseNotesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse, 0, sizeof(_VersionServ__GetVersionReleaseNotesResponse), 0, soap_copy__VersionServ__GetVersionReleaseNotesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__GetVersionReleaseNotesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:GetVersionReleaseNotesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__GetVersionReleaseNotesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__GetVersionReleaseNotesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__GetVersionReleaseNotesResponse * SOAP_FMAC4 soap_get__VersionServ__GetVersionReleaseNotesResponse(struct soap *soap, _VersionServ__GetVersionReleaseNotesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__GetVersionReleaseNotesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__GetVersionReleaseNotesResponse * SOAP_FMAC2 soap_instantiate__VersionServ__GetVersionReleaseNotesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__GetVersionReleaseNotesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__GetVersionReleaseNotesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__GetVersionReleaseNotesResponse);
		if (size)
			*size = sizeof(_VersionServ__GetVersionReleaseNotesResponse);
		((_VersionServ__GetVersionReleaseNotesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__GetVersionReleaseNotesResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__GetVersionReleaseNotesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__GetVersionReleaseNotesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__GetVersionReleaseNotesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__GetVersionReleaseNotesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__GetVersionReleaseNotesResponse %p -> %p\n", q, p));
	*(_VersionServ__GetVersionReleaseNotesResponse*)p = *(_VersionServ__GetVersionReleaseNotesResponse*)q;
}

void _VersionServ__GetVersionReleaseNotes::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_VersionServ__GetVersionReleaseNotes::product_USCOREid);
	soap_default_unsignedInt(soap, &this->_VersionServ__GetVersionReleaseNotes::uCurVersion);
	/* transient soap skipped */
}

void _VersionServ__GetVersionReleaseNotes::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__GetVersionReleaseNotes::product_USCOREid, SOAP_TYPE_unsignedInt);
	soap_embedded(soap, &this->_VersionServ__GetVersionReleaseNotes::uCurVersion, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _VersionServ__GetVersionReleaseNotes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__GetVersionReleaseNotes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__GetVersionReleaseNotes(struct soap *soap, const char *tag, int id, const _VersionServ__GetVersionReleaseNotes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__GetVersionReleaseNotes), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:product_id", -1, &(a->_VersionServ__GetVersionReleaseNotes::product_USCOREid), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:uCurVersion", -1, &(a->_VersionServ__GetVersionReleaseNotes::uCurVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__GetVersionReleaseNotes::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__GetVersionReleaseNotes(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__GetVersionReleaseNotes * SOAP_FMAC4 soap_in__VersionServ__GetVersionReleaseNotes(struct soap *soap, const char *tag, _VersionServ__GetVersionReleaseNotes *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__GetVersionReleaseNotes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__GetVersionReleaseNotes, sizeof(_VersionServ__GetVersionReleaseNotes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__GetVersionReleaseNotes)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__GetVersionReleaseNotes *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_product_USCOREid1 = 1;
	size_t soap_flag_uCurVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_product_USCOREid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:product_id", &(a->_VersionServ__GetVersionReleaseNotes::product_USCOREid), "xsd:unsignedInt"))
				{	soap_flag_product_USCOREid1--;
					continue;
				}
			if (soap_flag_uCurVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:uCurVersion", &(a->_VersionServ__GetVersionReleaseNotes::uCurVersion), "xsd:unsignedInt"))
				{	soap_flag_uCurVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__GetVersionReleaseNotes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__GetVersionReleaseNotes, 0, sizeof(_VersionServ__GetVersionReleaseNotes), 0, soap_copy__VersionServ__GetVersionReleaseNotes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_product_USCOREid1 > 0 || soap_flag_uCurVersion1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__GetVersionReleaseNotes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__GetVersionReleaseNotes);
	if (this->soap_out(soap, tag?tag:"VersionServ:GetVersionReleaseNotes", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__GetVersionReleaseNotes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__GetVersionReleaseNotes(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__GetVersionReleaseNotes * SOAP_FMAC4 soap_get__VersionServ__GetVersionReleaseNotes(struct soap *soap, _VersionServ__GetVersionReleaseNotes *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__GetVersionReleaseNotes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__GetVersionReleaseNotes * SOAP_FMAC2 soap_instantiate__VersionServ__GetVersionReleaseNotes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__GetVersionReleaseNotes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__GetVersionReleaseNotes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__GetVersionReleaseNotes);
		if (size)
			*size = sizeof(_VersionServ__GetVersionReleaseNotes);
		((_VersionServ__GetVersionReleaseNotes*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__GetVersionReleaseNotes, n);
		if (size)
			*size = n * sizeof(_VersionServ__GetVersionReleaseNotes);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__GetVersionReleaseNotes*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__GetVersionReleaseNotes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__GetVersionReleaseNotes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__GetVersionReleaseNotes %p -> %p\n", q, p));
	*(_VersionServ__GetVersionReleaseNotes*)p = *(_VersionServ__GetVersionReleaseNotes*)q;
}

void _VersionServ__CompareVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__CompareVersionResponse::CompareVersionResult = NULL;
	/* transient soap skipped */
}

void _VersionServ__CompareVersionResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToVersionServ__ArrayOfVersionRevision(soap, &this->_VersionServ__CompareVersionResponse::CompareVersionResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__CompareVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__CompareVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__CompareVersionResponse(struct soap *soap, const char *tag, int id, const _VersionServ__CompareVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__CompareVersionResponse), type))
		return soap->error;
	if (a->CompareVersionResult)
		soap_element_result(soap, "VersionServ:CompareVersionResult");
	if (soap_out_PointerToVersionServ__ArrayOfVersionRevision(soap, "VersionServ:CompareVersionResult", -1, &(a->_VersionServ__CompareVersionResponse::CompareVersionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__CompareVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__CompareVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__CompareVersionResponse * SOAP_FMAC4 soap_in__VersionServ__CompareVersionResponse(struct soap *soap, const char *tag, _VersionServ__CompareVersionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__CompareVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__CompareVersionResponse, sizeof(_VersionServ__CompareVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__CompareVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__CompareVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CompareVersionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CompareVersionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToVersionServ__ArrayOfVersionRevision(soap, "VersionServ:CompareVersionResult", &(a->_VersionServ__CompareVersionResponse::CompareVersionResult), "VersionServ:ArrayOfVersionRevision"))
				{	soap_flag_CompareVersionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:CompareVersionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__CompareVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__CompareVersionResponse, 0, sizeof(_VersionServ__CompareVersionResponse), 0, soap_copy__VersionServ__CompareVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__CompareVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__CompareVersionResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:CompareVersionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__CompareVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__CompareVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__CompareVersionResponse * SOAP_FMAC4 soap_get__VersionServ__CompareVersionResponse(struct soap *soap, _VersionServ__CompareVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__CompareVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__CompareVersionResponse * SOAP_FMAC2 soap_instantiate__VersionServ__CompareVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__CompareVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__CompareVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__CompareVersionResponse);
		if (size)
			*size = sizeof(_VersionServ__CompareVersionResponse);
		((_VersionServ__CompareVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__CompareVersionResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__CompareVersionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__CompareVersionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__CompareVersionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__CompareVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__CompareVersionResponse %p -> %p\n", q, p));
	*(_VersionServ__CompareVersionResponse*)p = *(_VersionServ__CompareVersionResponse*)q;
}

void _VersionServ__CompareVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_VersionServ__CompareVersion::userId);
	soap_default_unsignedInt(soap, &this->_VersionServ__CompareVersion::product_USCOREid);
	soap_default_unsignedInt(soap, &this->_VersionServ__CompareVersion::uCurVersion);
	soap_default_unsignedInt(soap, &this->_VersionServ__CompareVersion::uUpdateVersion);
	soap_default_bool(soap, &this->_VersionServ__CompareVersion::bLoadOnHasNew);
	/* transient soap skipped */
}

void _VersionServ__CompareVersion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__CompareVersion::userId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_VersionServ__CompareVersion::product_USCOREid, SOAP_TYPE_unsignedInt);
	soap_embedded(soap, &this->_VersionServ__CompareVersion::uCurVersion, SOAP_TYPE_unsignedInt);
	soap_embedded(soap, &this->_VersionServ__CompareVersion::uUpdateVersion, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _VersionServ__CompareVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__CompareVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__CompareVersion(struct soap *soap, const char *tag, int id, const _VersionServ__CompareVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__CompareVersion), type))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:userId", -1, &(a->_VersionServ__CompareVersion::userId), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:product_id", -1, &(a->_VersionServ__CompareVersion::product_USCOREid), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:uCurVersion", -1, &(a->_VersionServ__CompareVersion::uCurVersion), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:uUpdateVersion", -1, &(a->_VersionServ__CompareVersion::uUpdateVersion), ""))
		return soap->error;
	if (soap_out_bool(soap, "VersionServ:bLoadOnHasNew", -1, &(a->_VersionServ__CompareVersion::bLoadOnHasNew), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__CompareVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__CompareVersion(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__CompareVersion * SOAP_FMAC4 soap_in__VersionServ__CompareVersion(struct soap *soap, const char *tag, _VersionServ__CompareVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__CompareVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__CompareVersion, sizeof(_VersionServ__CompareVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__CompareVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__CompareVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_product_USCOREid1 = 1;
	size_t soap_flag_uCurVersion1 = 1;
	size_t soap_flag_uUpdateVersion1 = 1;
	size_t soap_flag_bLoadOnHasNew1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:userId", &(a->_VersionServ__CompareVersion::userId), "xsd:int"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_product_USCOREid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:product_id", &(a->_VersionServ__CompareVersion::product_USCOREid), "xsd:unsignedInt"))
				{	soap_flag_product_USCOREid1--;
					continue;
				}
			if (soap_flag_uCurVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:uCurVersion", &(a->_VersionServ__CompareVersion::uCurVersion), "xsd:unsignedInt"))
				{	soap_flag_uCurVersion1--;
					continue;
				}
			if (soap_flag_uUpdateVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:uUpdateVersion", &(a->_VersionServ__CompareVersion::uUpdateVersion), "xsd:unsignedInt"))
				{	soap_flag_uUpdateVersion1--;
					continue;
				}
			if (soap_flag_bLoadOnHasNew1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "VersionServ:bLoadOnHasNew", &(a->_VersionServ__CompareVersion::bLoadOnHasNew), "xsd:boolean"))
				{	soap_flag_bLoadOnHasNew1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__CompareVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__CompareVersion, 0, sizeof(_VersionServ__CompareVersion), 0, soap_copy__VersionServ__CompareVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0 || soap_flag_product_USCOREid1 > 0 || soap_flag_uCurVersion1 > 0 || soap_flag_uUpdateVersion1 > 0 || soap_flag_bLoadOnHasNew1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__CompareVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__CompareVersion);
	if (this->soap_out(soap, tag?tag:"VersionServ:CompareVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__CompareVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__CompareVersion(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__CompareVersion * SOAP_FMAC4 soap_get__VersionServ__CompareVersion(struct soap *soap, _VersionServ__CompareVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__CompareVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__CompareVersion * SOAP_FMAC2 soap_instantiate__VersionServ__CompareVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__CompareVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__CompareVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__CompareVersion);
		if (size)
			*size = sizeof(_VersionServ__CompareVersion);
		((_VersionServ__CompareVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__CompareVersion, n);
		if (size)
			*size = n * sizeof(_VersionServ__CompareVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__CompareVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__CompareVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__CompareVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__CompareVersion %p -> %p\n", q, p));
	*(_VersionServ__CompareVersion*)p = *(_VersionServ__CompareVersion*)q;
}

void _VersionServ__SetRevisionReadFlagResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _VersionServ__SetRevisionReadFlagResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _VersionServ__SetRevisionReadFlagResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__SetRevisionReadFlagResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__SetRevisionReadFlagResponse(struct soap *soap, const char *tag, int id, const _VersionServ__SetRevisionReadFlagResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__SetRevisionReadFlagResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__SetRevisionReadFlagResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__SetRevisionReadFlagResponse * SOAP_FMAC4 soap_in__VersionServ__SetRevisionReadFlagResponse(struct soap *soap, const char *tag, _VersionServ__SetRevisionReadFlagResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__SetRevisionReadFlagResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse, sizeof(_VersionServ__SetRevisionReadFlagResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__SetRevisionReadFlagResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__SetRevisionReadFlagResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse, 0, sizeof(_VersionServ__SetRevisionReadFlagResponse), 0, soap_copy__VersionServ__SetRevisionReadFlagResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__SetRevisionReadFlagResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:SetRevisionReadFlagResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__SetRevisionReadFlagResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__SetRevisionReadFlagResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__SetRevisionReadFlagResponse * SOAP_FMAC4 soap_get__VersionServ__SetRevisionReadFlagResponse(struct soap *soap, _VersionServ__SetRevisionReadFlagResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__SetRevisionReadFlagResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__SetRevisionReadFlagResponse * SOAP_FMAC2 soap_instantiate__VersionServ__SetRevisionReadFlagResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__SetRevisionReadFlagResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__SetRevisionReadFlagResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__SetRevisionReadFlagResponse);
		if (size)
			*size = sizeof(_VersionServ__SetRevisionReadFlagResponse);
		((_VersionServ__SetRevisionReadFlagResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__SetRevisionReadFlagResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__SetRevisionReadFlagResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__SetRevisionReadFlagResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__SetRevisionReadFlagResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__SetRevisionReadFlagResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__SetRevisionReadFlagResponse %p -> %p\n", q, p));
	*(_VersionServ__SetRevisionReadFlagResponse*)p = *(_VersionServ__SetRevisionReadFlagResponse*)q;
}

void _VersionServ__SetRevisionReadFlag::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_VersionServ__SetRevisionReadFlag::userId);
	this->_VersionServ__SetRevisionReadFlag::revisionIdArr = NULL;
	/* transient soap skipped */
}

void _VersionServ__SetRevisionReadFlag::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__SetRevisionReadFlag::userId, SOAP_TYPE_int);
	soap_serialize_PointerToVersionServ__ArrayOfInt(soap, &this->_VersionServ__SetRevisionReadFlag::revisionIdArr);
	/* transient soap skipped */
#endif
}

int _VersionServ__SetRevisionReadFlag::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__SetRevisionReadFlag(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__SetRevisionReadFlag(struct soap *soap, const char *tag, int id, const _VersionServ__SetRevisionReadFlag *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__SetRevisionReadFlag), type))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:userId", -1, &(a->_VersionServ__SetRevisionReadFlag::userId), ""))
		return soap->error;
	if (soap_out_PointerToVersionServ__ArrayOfInt(soap, "VersionServ:revisionIdArr", -1, &(a->_VersionServ__SetRevisionReadFlag::revisionIdArr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__SetRevisionReadFlag::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__SetRevisionReadFlag(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__SetRevisionReadFlag * SOAP_FMAC4 soap_in__VersionServ__SetRevisionReadFlag(struct soap *soap, const char *tag, _VersionServ__SetRevisionReadFlag *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__SetRevisionReadFlag *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__SetRevisionReadFlag, sizeof(_VersionServ__SetRevisionReadFlag), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__SetRevisionReadFlag)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__SetRevisionReadFlag *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_revisionIdArr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:userId", &(a->_VersionServ__SetRevisionReadFlag::userId), "xsd:int"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_revisionIdArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToVersionServ__ArrayOfInt(soap, "VersionServ:revisionIdArr", &(a->_VersionServ__SetRevisionReadFlag::revisionIdArr), "VersionServ:ArrayOfInt"))
				{	soap_flag_revisionIdArr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__SetRevisionReadFlag *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__SetRevisionReadFlag, 0, sizeof(_VersionServ__SetRevisionReadFlag), 0, soap_copy__VersionServ__SetRevisionReadFlag);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__SetRevisionReadFlag::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__SetRevisionReadFlag);
	if (this->soap_out(soap, tag?tag:"VersionServ:SetRevisionReadFlag", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__SetRevisionReadFlag::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__SetRevisionReadFlag(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__SetRevisionReadFlag * SOAP_FMAC4 soap_get__VersionServ__SetRevisionReadFlag(struct soap *soap, _VersionServ__SetRevisionReadFlag *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__SetRevisionReadFlag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__SetRevisionReadFlag * SOAP_FMAC2 soap_instantiate__VersionServ__SetRevisionReadFlag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__SetRevisionReadFlag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__SetRevisionReadFlag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__SetRevisionReadFlag);
		if (size)
			*size = sizeof(_VersionServ__SetRevisionReadFlag);
		((_VersionServ__SetRevisionReadFlag*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__SetRevisionReadFlag, n);
		if (size)
			*size = n * sizeof(_VersionServ__SetRevisionReadFlag);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__SetRevisionReadFlag*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__SetRevisionReadFlag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__SetRevisionReadFlag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__SetRevisionReadFlag %p -> %p\n", q, p));
	*(_VersionServ__SetRevisionReadFlag*)p = *(_VersionServ__SetRevisionReadFlag*)q;
}

void _VersionServ__GetUpdateVerByCurVerResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__GetUpdateVerByCurVerResponse::GetUpdateVerByCurVerResult = NULL;
	/* transient soap skipped */
}

void _VersionServ__GetUpdateVerByCurVerResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToVersionServ__ArrayOfProductVersion(soap, &this->_VersionServ__GetUpdateVerByCurVerResponse::GetUpdateVerByCurVerResult);
	/* transient soap skipped */
#endif
}

int _VersionServ__GetUpdateVerByCurVerResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__GetUpdateVerByCurVerResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__GetUpdateVerByCurVerResponse(struct soap *soap, const char *tag, int id, const _VersionServ__GetUpdateVerByCurVerResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse), type))
		return soap->error;
	if (a->GetUpdateVerByCurVerResult)
		soap_element_result(soap, "VersionServ:GetUpdateVerByCurVerResult");
	if (soap_out_PointerToVersionServ__ArrayOfProductVersion(soap, "VersionServ:GetUpdateVerByCurVerResult", -1, &(a->_VersionServ__GetUpdateVerByCurVerResponse::GetUpdateVerByCurVerResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__GetUpdateVerByCurVerResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__GetUpdateVerByCurVerResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__GetUpdateVerByCurVerResponse * SOAP_FMAC4 soap_in__VersionServ__GetUpdateVerByCurVerResponse(struct soap *soap, const char *tag, _VersionServ__GetUpdateVerByCurVerResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__GetUpdateVerByCurVerResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse, sizeof(_VersionServ__GetUpdateVerByCurVerResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__GetUpdateVerByCurVerResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetUpdateVerByCurVerResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetUpdateVerByCurVerResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToVersionServ__ArrayOfProductVersion(soap, "VersionServ:GetUpdateVerByCurVerResult", &(a->_VersionServ__GetUpdateVerByCurVerResponse::GetUpdateVerByCurVerResult), "VersionServ:ArrayOfProductVersion"))
				{	soap_flag_GetUpdateVerByCurVerResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:GetUpdateVerByCurVerResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__GetUpdateVerByCurVerResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse, 0, sizeof(_VersionServ__GetUpdateVerByCurVerResponse), 0, soap_copy__VersionServ__GetUpdateVerByCurVerResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__GetUpdateVerByCurVerResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:GetUpdateVerByCurVerResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__GetUpdateVerByCurVerResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__GetUpdateVerByCurVerResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__GetUpdateVerByCurVerResponse * SOAP_FMAC4 soap_get__VersionServ__GetUpdateVerByCurVerResponse(struct soap *soap, _VersionServ__GetUpdateVerByCurVerResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__GetUpdateVerByCurVerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__GetUpdateVerByCurVerResponse * SOAP_FMAC2 soap_instantiate__VersionServ__GetUpdateVerByCurVerResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__GetUpdateVerByCurVerResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__GetUpdateVerByCurVerResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__GetUpdateVerByCurVerResponse);
		if (size)
			*size = sizeof(_VersionServ__GetUpdateVerByCurVerResponse);
		((_VersionServ__GetUpdateVerByCurVerResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__GetUpdateVerByCurVerResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__GetUpdateVerByCurVerResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__GetUpdateVerByCurVerResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__GetUpdateVerByCurVerResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__GetUpdateVerByCurVerResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__GetUpdateVerByCurVerResponse %p -> %p\n", q, p));
	*(_VersionServ__GetUpdateVerByCurVerResponse*)p = *(_VersionServ__GetUpdateVerByCurVerResponse*)q;
}

void _VersionServ__GetUpdateVerByCurVer::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_VersionServ__GetUpdateVerByCurVer::userId);
	soap_default_unsignedInt(soap, &this->_VersionServ__GetUpdateVerByCurVer::product_USCOREid);
	soap_default_unsignedInt(soap, &this->_VersionServ__GetUpdateVerByCurVer::uCurVersion);
	/* transient soap skipped */
}

void _VersionServ__GetUpdateVerByCurVer::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__GetUpdateVerByCurVer::userId, SOAP_TYPE_unsignedInt);
	soap_embedded(soap, &this->_VersionServ__GetUpdateVerByCurVer::product_USCOREid, SOAP_TYPE_unsignedInt);
	soap_embedded(soap, &this->_VersionServ__GetUpdateVerByCurVer::uCurVersion, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _VersionServ__GetUpdateVerByCurVer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__GetUpdateVerByCurVer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__GetUpdateVerByCurVer(struct soap *soap, const char *tag, int id, const _VersionServ__GetUpdateVerByCurVer *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__GetUpdateVerByCurVer), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:userId", -1, &(a->_VersionServ__GetUpdateVerByCurVer::userId), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:product_id", -1, &(a->_VersionServ__GetUpdateVerByCurVer::product_USCOREid), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:uCurVersion", -1, &(a->_VersionServ__GetUpdateVerByCurVer::uCurVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__GetUpdateVerByCurVer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__GetUpdateVerByCurVer(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__GetUpdateVerByCurVer * SOAP_FMAC4 soap_in__VersionServ__GetUpdateVerByCurVer(struct soap *soap, const char *tag, _VersionServ__GetUpdateVerByCurVer *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__GetUpdateVerByCurVer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__GetUpdateVerByCurVer, sizeof(_VersionServ__GetUpdateVerByCurVer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__GetUpdateVerByCurVer)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__GetUpdateVerByCurVer *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_product_USCOREid1 = 1;
	size_t soap_flag_uCurVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:userId", &(a->_VersionServ__GetUpdateVerByCurVer::userId), "xsd:unsignedInt"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_product_USCOREid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:product_id", &(a->_VersionServ__GetUpdateVerByCurVer::product_USCOREid), "xsd:unsignedInt"))
				{	soap_flag_product_USCOREid1--;
					continue;
				}
			if (soap_flag_uCurVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:uCurVersion", &(a->_VersionServ__GetUpdateVerByCurVer::uCurVersion), "xsd:unsignedInt"))
				{	soap_flag_uCurVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__GetUpdateVerByCurVer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__GetUpdateVerByCurVer, 0, sizeof(_VersionServ__GetUpdateVerByCurVer), 0, soap_copy__VersionServ__GetUpdateVerByCurVer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0 || soap_flag_product_USCOREid1 > 0 || soap_flag_uCurVersion1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__GetUpdateVerByCurVer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__GetUpdateVerByCurVer);
	if (this->soap_out(soap, tag?tag:"VersionServ:GetUpdateVerByCurVer", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__GetUpdateVerByCurVer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__GetUpdateVerByCurVer(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__GetUpdateVerByCurVer * SOAP_FMAC4 soap_get__VersionServ__GetUpdateVerByCurVer(struct soap *soap, _VersionServ__GetUpdateVerByCurVer *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__GetUpdateVerByCurVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__GetUpdateVerByCurVer * SOAP_FMAC2 soap_instantiate__VersionServ__GetUpdateVerByCurVer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__GetUpdateVerByCurVer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__GetUpdateVerByCurVer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__GetUpdateVerByCurVer);
		if (size)
			*size = sizeof(_VersionServ__GetUpdateVerByCurVer);
		((_VersionServ__GetUpdateVerByCurVer*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__GetUpdateVerByCurVer, n);
		if (size)
			*size = n * sizeof(_VersionServ__GetUpdateVerByCurVer);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__GetUpdateVerByCurVer*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__GetUpdateVerByCurVer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__GetUpdateVerByCurVer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__GetUpdateVerByCurVer %p -> %p\n", q, p));
	*(_VersionServ__GetUpdateVerByCurVer*)p = *(_VersionServ__GetUpdateVerByCurVer*)q;
}

void _VersionServ__LoginByByteArrResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_VersionServ__LoginByByteArrResponse::LoginByByteArrResult);
	/* transient soap skipped */
}

void _VersionServ__LoginByByteArrResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__LoginByByteArrResponse::LoginByByteArrResult, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _VersionServ__LoginByByteArrResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__LoginByByteArrResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__LoginByByteArrResponse(struct soap *soap, const char *tag, int id, const _VersionServ__LoginByByteArrResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__LoginByByteArrResponse), type))
		return soap->error;
	soap_element_result(soap, "VersionServ:LoginByByteArrResult");
	if (soap_out_unsignedInt(soap, "VersionServ:LoginByByteArrResult", -1, &(a->_VersionServ__LoginByByteArrResponse::LoginByByteArrResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__LoginByByteArrResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__LoginByByteArrResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__LoginByByteArrResponse * SOAP_FMAC4 soap_in__VersionServ__LoginByByteArrResponse(struct soap *soap, const char *tag, _VersionServ__LoginByByteArrResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__LoginByByteArrResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__LoginByByteArrResponse, sizeof(_VersionServ__LoginByByteArrResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__LoginByByteArrResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__LoginByByteArrResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LoginByByteArrResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginByByteArrResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:LoginByByteArrResult", &(a->_VersionServ__LoginByByteArrResponse::LoginByByteArrResult), "xsd:unsignedInt"))
				{	soap_flag_LoginByByteArrResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:LoginByByteArrResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__LoginByByteArrResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__LoginByByteArrResponse, 0, sizeof(_VersionServ__LoginByByteArrResponse), 0, soap_copy__VersionServ__LoginByByteArrResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LoginByByteArrResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__LoginByByteArrResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__LoginByByteArrResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:LoginByByteArrResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__LoginByByteArrResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__LoginByByteArrResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__LoginByByteArrResponse * SOAP_FMAC4 soap_get__VersionServ__LoginByByteArrResponse(struct soap *soap, _VersionServ__LoginByByteArrResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__LoginByByteArrResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__LoginByByteArrResponse * SOAP_FMAC2 soap_instantiate__VersionServ__LoginByByteArrResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__LoginByByteArrResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__LoginByByteArrResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__LoginByByteArrResponse);
		if (size)
			*size = sizeof(_VersionServ__LoginByByteArrResponse);
		((_VersionServ__LoginByByteArrResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__LoginByByteArrResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__LoginByByteArrResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__LoginByByteArrResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__LoginByByteArrResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__LoginByByteArrResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__LoginByByteArrResponse %p -> %p\n", q, p));
	*(_VersionServ__LoginByByteArrResponse*)p = *(_VersionServ__LoginByByteArrResponse*)q;
}

void _VersionServ__LoginByByteArr::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__LoginByByteArr::userInfo = NULL;
	/* transient soap skipped */
}

void _VersionServ__LoginByByteArr::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_VersionServ__LoginByByteArr::userInfo);
	/* transient soap skipped */
#endif
}

int _VersionServ__LoginByByteArr::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__LoginByByteArr(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__LoginByByteArr(struct soap *soap, const char *tag, int id, const _VersionServ__LoginByByteArr *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__LoginByByteArr), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "VersionServ:userInfo", -1, &(a->_VersionServ__LoginByByteArr::userInfo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__LoginByByteArr::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__LoginByByteArr(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__LoginByByteArr * SOAP_FMAC4 soap_in__VersionServ__LoginByByteArr(struct soap *soap, const char *tag, _VersionServ__LoginByByteArr *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__LoginByByteArr *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__LoginByByteArr, sizeof(_VersionServ__LoginByByteArr), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__LoginByByteArr)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__LoginByByteArr *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "VersionServ:userInfo", &(a->_VersionServ__LoginByByteArr::userInfo), "xsd:base64Binary"))
				{	soap_flag_userInfo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__LoginByByteArr *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__LoginByByteArr, 0, sizeof(_VersionServ__LoginByByteArr), 0, soap_copy__VersionServ__LoginByByteArr);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _VersionServ__LoginByByteArr::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__LoginByByteArr);
	if (this->soap_out(soap, tag?tag:"VersionServ:LoginByByteArr", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__LoginByByteArr::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__LoginByByteArr(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__LoginByByteArr * SOAP_FMAC4 soap_get__VersionServ__LoginByByteArr(struct soap *soap, _VersionServ__LoginByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__LoginByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__LoginByByteArr * SOAP_FMAC2 soap_instantiate__VersionServ__LoginByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__LoginByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__LoginByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__LoginByByteArr);
		if (size)
			*size = sizeof(_VersionServ__LoginByByteArr);
		((_VersionServ__LoginByByteArr*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__LoginByByteArr, n);
		if (size)
			*size = n * sizeof(_VersionServ__LoginByByteArr);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__LoginByByteArr*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__LoginByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__LoginByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__LoginByByteArr %p -> %p\n", q, p));
	*(_VersionServ__LoginByByteArr*)p = *(_VersionServ__LoginByByteArr*)q;
}

void _VersionServ__LoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_VersionServ__LoginResponse::LoginResult);
	/* transient soap skipped */
}

void _VersionServ__LoginResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_VersionServ__LoginResponse::LoginResult, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _VersionServ__LoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__LoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__LoginResponse(struct soap *soap, const char *tag, int id, const _VersionServ__LoginResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__LoginResponse), type))
		return soap->error;
	soap_element_result(soap, "VersionServ:LoginResult");
	if (soap_out_unsignedInt(soap, "VersionServ:LoginResult", -1, &(a->_VersionServ__LoginResponse::LoginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__LoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__LoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__LoginResponse * SOAP_FMAC4 soap_in__VersionServ__LoginResponse(struct soap *soap, const char *tag, _VersionServ__LoginResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__LoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__LoginResponse, sizeof(_VersionServ__LoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__LoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__LoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:LoginResult", &(a->_VersionServ__LoginResponse::LoginResult), "xsd:unsignedInt"))
				{	soap_flag_LoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "VersionServ:LoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__LoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__LoginResponse, 0, sizeof(_VersionServ__LoginResponse), 0, soap_copy__VersionServ__LoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LoginResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__LoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__LoginResponse);
	if (this->soap_out(soap, tag?tag:"VersionServ:LoginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__LoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__LoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__LoginResponse * SOAP_FMAC4 soap_get__VersionServ__LoginResponse(struct soap *soap, _VersionServ__LoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__LoginResponse * SOAP_FMAC2 soap_instantiate__VersionServ__LoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__LoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__LoginResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__LoginResponse);
		if (size)
			*size = sizeof(_VersionServ__LoginResponse);
		((_VersionServ__LoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__LoginResponse, n);
		if (size)
			*size = n * sizeof(_VersionServ__LoginResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__LoginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__LoginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__LoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__LoginResponse %p -> %p\n", q, p));
	*(_VersionServ__LoginResponse*)p = *(_VersionServ__LoginResponse*)q;
}

void _VersionServ__Login::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_VersionServ__Login::computerMac = NULL;
	this->_VersionServ__Login::computerIp = NULL;
	soap_default_string(soap, &this->_VersionServ__Login::computerName);
	soap_default_unsignedInt(soap, &this->_VersionServ__Login::dogSerial);
	/* transient soap skipped */
}

void _VersionServ__Login::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_VersionServ__Login::computerMac);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_VersionServ__Login::computerIp);
	soap_serialize_string(soap, &this->_VersionServ__Login::computerName);
	soap_embedded(soap, &this->_VersionServ__Login::dogSerial, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _VersionServ__Login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__VersionServ__Login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__VersionServ__Login(struct soap *soap, const char *tag, int id, const _VersionServ__Login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__VersionServ__Login), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "VersionServ:computerMac", -1, &(a->_VersionServ__Login::computerMac), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "VersionServ:computerIp", -1, &(a->_VersionServ__Login::computerIp), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:computerName", -1, &(a->_VersionServ__Login::computerName), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:dogSerial", -1, &(a->_VersionServ__Login::dogSerial), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_VersionServ__Login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__VersionServ__Login(soap, tag, this, type);
}

SOAP_FMAC3 _VersionServ__Login * SOAP_FMAC4 soap_in__VersionServ__Login(struct soap *soap, const char *tag, _VersionServ__Login *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_VersionServ__Login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__VersionServ__Login, sizeof(_VersionServ__Login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__VersionServ__Login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_VersionServ__Login *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_computerMac1 = 1;
	size_t soap_flag_computerIp1 = 1;
	size_t soap_flag_computerName1 = 1;
	size_t soap_flag_dogSerial1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_computerMac1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "VersionServ:computerMac", &(a->_VersionServ__Login::computerMac), "xsd:base64Binary"))
				{	soap_flag_computerMac1--;
					continue;
				}
			if (soap_flag_computerIp1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "VersionServ:computerIp", &(a->_VersionServ__Login::computerIp), "xsd:base64Binary"))
				{	soap_flag_computerIp1--;
					continue;
				}
			if (soap_flag_computerName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:computerName", &(a->_VersionServ__Login::computerName), "xsd:string"))
				{	soap_flag_computerName1--;
					continue;
				}
			if (soap_flag_dogSerial1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:dogSerial", &(a->_VersionServ__Login::dogSerial), "xsd:unsignedInt"))
				{	soap_flag_dogSerial1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_VersionServ__Login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__VersionServ__Login, 0, sizeof(_VersionServ__Login), 0, soap_copy__VersionServ__Login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dogSerial1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _VersionServ__Login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__VersionServ__Login);
	if (this->soap_out(soap, tag?tag:"VersionServ:Login", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_VersionServ__Login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__VersionServ__Login(soap, this, tag, type);
}

SOAP_FMAC3 _VersionServ__Login * SOAP_FMAC4 soap_get__VersionServ__Login(struct soap *soap, _VersionServ__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in__VersionServ__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _VersionServ__Login * SOAP_FMAC2 soap_instantiate__VersionServ__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__VersionServ__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__VersionServ__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_VersionServ__Login);
		if (size)
			*size = sizeof(_VersionServ__Login);
		((_VersionServ__Login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_VersionServ__Login, n);
		if (size)
			*size = n * sizeof(_VersionServ__Login);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_VersionServ__Login*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_VersionServ__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__VersionServ__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _VersionServ__Login %p -> %p\n", q, p));
	*(_VersionServ__Login*)p = *(_VersionServ__Login*)q;
}

void VersionServ__FileHeader::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->VersionServ__ObjectV::soap_default(soap);
	soap_default_string(soap, &this->VersionServ__FileHeader::filePath);
	soap_default_int(soap, &this->VersionServ__FileHeader::fileType);
	soap_default_string(soap, &this->VersionServ__FileHeader::fileName);
	soap_default_string(soap, &this->VersionServ__FileHeader::fileNameServer);
	soap_default_int(soap, &this->VersionServ__FileHeader::hostId);
	soap_default_int(soap, &this->VersionServ__FileHeader::ownerId);
	this->VersionServ__FileHeader::matter = NULL;
	soap_default_string(soap, &this->VersionServ__FileHeader::description);
	soap_default_time(soap, &this->VersionServ__FileHeader::occurDateValue);
	soap_default_int(soap, &this->VersionServ__FileHeader::serialNo);
}

void VersionServ__FileHeader::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->VersionServ__FileHeader::filePath);
	soap_embedded(soap, &this->VersionServ__FileHeader::fileType, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->VersionServ__FileHeader::fileName);
	soap_serialize_string(soap, &this->VersionServ__FileHeader::fileNameServer);
	soap_embedded(soap, &this->VersionServ__FileHeader::hostId, SOAP_TYPE_int);
	soap_embedded(soap, &this->VersionServ__FileHeader::ownerId, SOAP_TYPE_int);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->VersionServ__FileHeader::matter);
	soap_serialize_string(soap, &this->VersionServ__FileHeader::description);
	soap_embedded(soap, &this->VersionServ__FileHeader::serialNo, SOAP_TYPE_int);
	this->VersionServ__ObjectV::soap_serialize(soap);
#endif
}

int VersionServ__FileHeader::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__FileHeader(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__FileHeader(struct soap *soap, const char *tag, int id, const VersionServ__FileHeader *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__FileHeader), "VersionServ:FileHeader"))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:id", -1, &(a->VersionServ__ObjectV::id), ""))
		return soap->error;
	soap_outliteral(soap, "VersionServ:tag", &(a->VersionServ__ObjectV::tag), NULL);
	/* transient soap skipped */
	if (soap_out_string(soap, "VersionServ:filePath", -1, &(a->VersionServ__FileHeader::filePath), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:fileType", -1, &(a->VersionServ__FileHeader::fileType), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:fileName", -1, &(a->VersionServ__FileHeader::fileName), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:fileNameServer", -1, &(a->VersionServ__FileHeader::fileNameServer), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:hostId", -1, &(a->VersionServ__FileHeader::hostId), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:ownerId", -1, &(a->VersionServ__FileHeader::ownerId), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "VersionServ:matter", -1, &(a->VersionServ__FileHeader::matter), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:description", -1, &(a->VersionServ__FileHeader::description), ""))
		return soap->error;
	if (soap_out_time(soap, "VersionServ:occurDateValue", -1, &(a->VersionServ__FileHeader::occurDateValue), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:serialNo", -1, &(a->VersionServ__FileHeader::serialNo), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *VersionServ__FileHeader::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__FileHeader(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__FileHeader * SOAP_FMAC4 soap_in_VersionServ__FileHeader(struct soap *soap, const char *tag, VersionServ__FileHeader *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__FileHeader *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__FileHeader, sizeof(VersionServ__FileHeader), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__FileHeader)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__FileHeader *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_tag2 = 1;
	size_t soap_flag_filePath1 = 1;
	size_t soap_flag_fileType1 = 1;
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_fileNameServer1 = 1;
	size_t soap_flag_hostId1 = 1;
	size_t soap_flag_ownerId1 = 1;
	size_t soap_flag_matter1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_occurDateValue1 = 1;
	size_t soap_flag_serialNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:id", &(a->VersionServ__ObjectV::id), "xsd:int"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_tag2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "VersionServ:tag", &(a->VersionServ__ObjectV::tag)))
				{	soap_flag_tag2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_filePath1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:filePath", &(a->VersionServ__FileHeader::filePath), "xsd:string"))
				{	soap_flag_filePath1--;
					continue;
				}
			if (soap_flag_fileType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:fileType", &(a->VersionServ__FileHeader::fileType), "xsd:int"))
				{	soap_flag_fileType1--;
					continue;
				}
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:fileName", &(a->VersionServ__FileHeader::fileName), "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			if (soap_flag_fileNameServer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:fileNameServer", &(a->VersionServ__FileHeader::fileNameServer), "xsd:string"))
				{	soap_flag_fileNameServer1--;
					continue;
				}
			if (soap_flag_hostId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:hostId", &(a->VersionServ__FileHeader::hostId), "xsd:int"))
				{	soap_flag_hostId1--;
					continue;
				}
			if (soap_flag_ownerId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:ownerId", &(a->VersionServ__FileHeader::ownerId), "xsd:int"))
				{	soap_flag_ownerId1--;
					continue;
				}
			if (soap_flag_matter1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "VersionServ:matter", &(a->VersionServ__FileHeader::matter), "xsd:base64Binary"))
				{	soap_flag_matter1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:description", &(a->VersionServ__FileHeader::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap_flag_occurDateValue1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "VersionServ:occurDateValue", &(a->VersionServ__FileHeader::occurDateValue), "xsd:dateTime"))
				{	soap_flag_occurDateValue1--;
					continue;
				}
			if (soap_flag_serialNo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:serialNo", &(a->VersionServ__FileHeader::serialNo), "xsd:int"))
				{	soap_flag_serialNo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__FileHeader *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__FileHeader, 0, sizeof(VersionServ__FileHeader), 0, soap_copy_VersionServ__FileHeader);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id2 > 0 || soap_flag_fileType1 > 0 || soap_flag_hostId1 > 0 || soap_flag_ownerId1 > 0 || soap_flag_occurDateValue1 > 0 || soap_flag_serialNo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int VersionServ__FileHeader::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__FileHeader);
	if (this->soap_out(soap, tag?tag:"VersionServ:FileHeader", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__FileHeader::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__FileHeader(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__FileHeader * SOAP_FMAC4 soap_get_VersionServ__FileHeader(struct soap *soap, VersionServ__FileHeader *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__FileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__FileHeader * SOAP_FMAC2 soap_instantiate_VersionServ__FileHeader(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__FileHeader(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__FileHeader, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__FileHeader);
		if (size)
			*size = sizeof(VersionServ__FileHeader);
		((VersionServ__FileHeader*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__FileHeader, n);
		if (size)
			*size = n * sizeof(VersionServ__FileHeader);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__FileHeader*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__FileHeader*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__FileHeader(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__FileHeader %p -> %p\n", q, p));
	*(VersionServ__FileHeader*)p = *(VersionServ__FileHeader*)q;
}

void VersionServ__DownLoadItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->VersionServ__ObjectV::soap_default(soap);
	soap_default_string(soap, &this->VersionServ__DownLoadItem::title);
	soap_default_time(soap, &this->VersionServ__DownLoadItem::updateDate);
	soap_default_string(soap, &this->VersionServ__DownLoadItem::notes);
	soap_default_int(soap, &this->VersionServ__DownLoadItem::serialno);
	soap_default_string(soap, &this->VersionServ__DownLoadItem::occurDateValue);
	soap_default_string(soap, &this->VersionServ__DownLoadItem::fileName);
	soap_default_int(soap, &this->VersionServ__DownLoadItem::productId);
}

void VersionServ__DownLoadItem::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->VersionServ__DownLoadItem::title);
	soap_serialize_string(soap, &this->VersionServ__DownLoadItem::notes);
	soap_embedded(soap, &this->VersionServ__DownLoadItem::serialno, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->VersionServ__DownLoadItem::occurDateValue);
	soap_serialize_string(soap, &this->VersionServ__DownLoadItem::fileName);
	soap_embedded(soap, &this->VersionServ__DownLoadItem::productId, SOAP_TYPE_int);
	this->VersionServ__ObjectV::soap_serialize(soap);
#endif
}

int VersionServ__DownLoadItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__DownLoadItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__DownLoadItem(struct soap *soap, const char *tag, int id, const VersionServ__DownLoadItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__DownLoadItem), "VersionServ:DownLoadItem"))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:id", -1, &(a->VersionServ__ObjectV::id), ""))
		return soap->error;
	soap_outliteral(soap, "VersionServ:tag", &(a->VersionServ__ObjectV::tag), NULL);
	/* transient soap skipped */
	if (soap_out_string(soap, "VersionServ:title", -1, &(a->VersionServ__DownLoadItem::title), ""))
		return soap->error;
	if (soap_out_time(soap, "VersionServ:updateDate", -1, &(a->VersionServ__DownLoadItem::updateDate), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:notes", -1, &(a->VersionServ__DownLoadItem::notes), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:serialno", -1, &(a->VersionServ__DownLoadItem::serialno), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:occurDateValue", -1, &(a->VersionServ__DownLoadItem::occurDateValue), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:fileName", -1, &(a->VersionServ__DownLoadItem::fileName), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:productId", -1, &(a->VersionServ__DownLoadItem::productId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *VersionServ__DownLoadItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__DownLoadItem(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__DownLoadItem * SOAP_FMAC4 soap_in_VersionServ__DownLoadItem(struct soap *soap, const char *tag, VersionServ__DownLoadItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__DownLoadItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__DownLoadItem, sizeof(VersionServ__DownLoadItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__DownLoadItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__DownLoadItem *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_tag2 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_updateDate1 = 1;
	size_t soap_flag_notes1 = 1;
	size_t soap_flag_serialno1 = 1;
	size_t soap_flag_occurDateValue1 = 1;
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_productId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:id", &(a->VersionServ__ObjectV::id), "xsd:int"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_tag2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "VersionServ:tag", &(a->VersionServ__ObjectV::tag)))
				{	soap_flag_tag2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:title", &(a->VersionServ__DownLoadItem::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_updateDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "VersionServ:updateDate", &(a->VersionServ__DownLoadItem::updateDate), "xsd:dateTime"))
				{	soap_flag_updateDate1--;
					continue;
				}
			if (soap_flag_notes1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:notes", &(a->VersionServ__DownLoadItem::notes), "xsd:string"))
				{	soap_flag_notes1--;
					continue;
				}
			if (soap_flag_serialno1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:serialno", &(a->VersionServ__DownLoadItem::serialno), "xsd:int"))
				{	soap_flag_serialno1--;
					continue;
				}
			if (soap_flag_occurDateValue1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:occurDateValue", &(a->VersionServ__DownLoadItem::occurDateValue), "xsd:string"))
				{	soap_flag_occurDateValue1--;
					continue;
				}
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:fileName", &(a->VersionServ__DownLoadItem::fileName), "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:productId", &(a->VersionServ__DownLoadItem::productId), "xsd:int"))
				{	soap_flag_productId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__DownLoadItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__DownLoadItem, 0, sizeof(VersionServ__DownLoadItem), 0, soap_copy_VersionServ__DownLoadItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id2 > 0 || soap_flag_updateDate1 > 0 || soap_flag_serialno1 > 0 || soap_flag_productId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int VersionServ__DownLoadItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__DownLoadItem);
	if (this->soap_out(soap, tag?tag:"VersionServ:DownLoadItem", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__DownLoadItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__DownLoadItem(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__DownLoadItem * SOAP_FMAC4 soap_get_VersionServ__DownLoadItem(struct soap *soap, VersionServ__DownLoadItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__DownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__DownLoadItem * SOAP_FMAC2 soap_instantiate_VersionServ__DownLoadItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__DownLoadItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__DownLoadItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__DownLoadItem);
		if (size)
			*size = sizeof(VersionServ__DownLoadItem);
		((VersionServ__DownLoadItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__DownLoadItem, n);
		if (size)
			*size = n * sizeof(VersionServ__DownLoadItem);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__DownLoadItem*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__DownLoadItem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__DownLoadItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__DownLoadItem %p -> %p\n", q, p));
	*(VersionServ__DownLoadItem*)p = *(VersionServ__DownLoadItem*)q;
}

void VersionServ__ArrayOfDownLoadItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->VersionServ__ArrayOfDownLoadItem::__sizeDownLoadItem = 0;
	this->VersionServ__ArrayOfDownLoadItem::DownLoadItem = NULL;
	/* transient soap skipped */
}

void VersionServ__ArrayOfDownLoadItem::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->VersionServ__ArrayOfDownLoadItem::DownLoadItem)
	{	int i;
		for (i = 0; i < this->VersionServ__ArrayOfDownLoadItem::__sizeDownLoadItem; i++)
		{
			soap_serialize_PointerToVersionServ__DownLoadItem(soap, this->VersionServ__ArrayOfDownLoadItem::DownLoadItem + i);
		}
	}
	/* transient soap skipped */
#endif
}

int VersionServ__ArrayOfDownLoadItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__ArrayOfDownLoadItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__ArrayOfDownLoadItem(struct soap *soap, const char *tag, int id, const VersionServ__ArrayOfDownLoadItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__ArrayOfDownLoadItem), type))
		return soap->error;
	if (a->VersionServ__ArrayOfDownLoadItem::DownLoadItem)
	{	int i;
		for (i = 0; i < a->VersionServ__ArrayOfDownLoadItem::__sizeDownLoadItem; i++)
			if (soap_out_PointerToVersionServ__DownLoadItem(soap, "VersionServ:DownLoadItem", -1, a->VersionServ__ArrayOfDownLoadItem::DownLoadItem + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *VersionServ__ArrayOfDownLoadItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__ArrayOfDownLoadItem(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__ArrayOfDownLoadItem * SOAP_FMAC4 soap_in_VersionServ__ArrayOfDownLoadItem(struct soap *soap, const char *tag, VersionServ__ArrayOfDownLoadItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__ArrayOfDownLoadItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__ArrayOfDownLoadItem, sizeof(VersionServ__ArrayOfDownLoadItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__ArrayOfDownLoadItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__ArrayOfDownLoadItem *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_DownLoadItem1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "VersionServ:DownLoadItem", 1, NULL))
			{	if (a->VersionServ__ArrayOfDownLoadItem::DownLoadItem == NULL)
				{	if (soap_blist_DownLoadItem1 == NULL)
						soap_blist_DownLoadItem1 = soap_new_block(soap);
					a->VersionServ__ArrayOfDownLoadItem::DownLoadItem = (VersionServ__DownLoadItem **)soap_push_block(soap, soap_blist_DownLoadItem1, sizeof(VersionServ__DownLoadItem *));
					if (a->VersionServ__ArrayOfDownLoadItem::DownLoadItem == NULL)
						return NULL;
					*a->VersionServ__ArrayOfDownLoadItem::DownLoadItem = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToVersionServ__DownLoadItem(soap, "VersionServ:DownLoadItem", a->VersionServ__ArrayOfDownLoadItem::DownLoadItem, "VersionServ:DownLoadItem"))
				{	a->VersionServ__ArrayOfDownLoadItem::__sizeDownLoadItem++;
					a->VersionServ__ArrayOfDownLoadItem::DownLoadItem = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->VersionServ__ArrayOfDownLoadItem::DownLoadItem)
			soap_pop_block(soap, soap_blist_DownLoadItem1);
		if (a->VersionServ__ArrayOfDownLoadItem::__sizeDownLoadItem)
			a->VersionServ__ArrayOfDownLoadItem::DownLoadItem = (VersionServ__DownLoadItem **)soap_save_block(soap, soap_blist_DownLoadItem1, NULL, 1);
		else
		{	a->VersionServ__ArrayOfDownLoadItem::DownLoadItem = NULL;
			if (soap_blist_DownLoadItem1)
				soap_end_block(soap, soap_blist_DownLoadItem1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__ArrayOfDownLoadItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__ArrayOfDownLoadItem, 0, sizeof(VersionServ__ArrayOfDownLoadItem), 0, soap_copy_VersionServ__ArrayOfDownLoadItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int VersionServ__ArrayOfDownLoadItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__ArrayOfDownLoadItem);
	if (this->soap_out(soap, tag?tag:"VersionServ:ArrayOfDownLoadItem", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__ArrayOfDownLoadItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__ArrayOfDownLoadItem(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__ArrayOfDownLoadItem * SOAP_FMAC4 soap_get_VersionServ__ArrayOfDownLoadItem(struct soap *soap, VersionServ__ArrayOfDownLoadItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__ArrayOfDownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__ArrayOfDownLoadItem * SOAP_FMAC2 soap_instantiate_VersionServ__ArrayOfDownLoadItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__ArrayOfDownLoadItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__ArrayOfDownLoadItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__ArrayOfDownLoadItem);
		if (size)
			*size = sizeof(VersionServ__ArrayOfDownLoadItem);
		((VersionServ__ArrayOfDownLoadItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__ArrayOfDownLoadItem, n);
		if (size)
			*size = n * sizeof(VersionServ__ArrayOfDownLoadItem);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__ArrayOfDownLoadItem*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__ArrayOfDownLoadItem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__ArrayOfDownLoadItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__ArrayOfDownLoadItem %p -> %p\n", q, p));
	*(VersionServ__ArrayOfDownLoadItem*)p = *(VersionServ__ArrayOfDownLoadItem*)q;
}

void VersionServ__ObjectV::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->VersionServ__ObjectV::id);
	this->VersionServ__ObjectV::tag = NULL;
	/* transient soap skipped */
}

void VersionServ__ObjectV::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->VersionServ__ObjectV::id, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int VersionServ__ObjectV::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__ObjectV(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__ObjectV(struct soap *soap, const char *tag, int id, const VersionServ__ObjectV *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__ObjectV), type))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:id", -1, &(a->VersionServ__ObjectV::id), ""))
		return soap->error;
	soap_outliteral(soap, "VersionServ:tag", &(a->VersionServ__ObjectV::tag), NULL);
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *VersionServ__ObjectV::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__ObjectV(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__ObjectV * SOAP_FMAC4 soap_in_VersionServ__ObjectV(struct soap *soap, const char *tag, VersionServ__ObjectV *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__ObjectV *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__ObjectV, sizeof(VersionServ__ObjectV), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__ObjectV)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__ObjectV *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_tag1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:id", &(a->VersionServ__ObjectV::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_tag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "VersionServ:tag", &(a->VersionServ__ObjectV::tag)))
				{	soap_flag_tag1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__ObjectV *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__ObjectV, 0, sizeof(VersionServ__ObjectV), 0, soap_copy_VersionServ__ObjectV);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int VersionServ__ObjectV::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__ObjectV);
	if (this->soap_out(soap, tag?tag:"VersionServ:ObjectV", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__ObjectV::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__ObjectV(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__ObjectV * SOAP_FMAC4 soap_get_VersionServ__ObjectV(struct soap *soap, VersionServ__ObjectV *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__ObjectV(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__ObjectV * SOAP_FMAC2 soap_instantiate_VersionServ__ObjectV(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__ObjectV(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__ObjectV, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "VersionServ:DogAccessHistory"))
	{	cp->type = SOAP_TYPE_VersionServ__DogAccessHistory;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(VersionServ__DogAccessHistory);
			if (size)
				*size = sizeof(VersionServ__DogAccessHistory);
			((VersionServ__DogAccessHistory*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__DogAccessHistory, n);
			if (size)
				*size = n * sizeof(VersionServ__DogAccessHistory);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((VersionServ__DogAccessHistory*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (VersionServ__DogAccessHistory*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "VersionServ:DownLoadItem"))
	{	cp->type = SOAP_TYPE_VersionServ__DownLoadItem;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(VersionServ__DownLoadItem);
			if (size)
				*size = sizeof(VersionServ__DownLoadItem);
			((VersionServ__DownLoadItem*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__DownLoadItem, n);
			if (size)
				*size = n * sizeof(VersionServ__DownLoadItem);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((VersionServ__DownLoadItem*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (VersionServ__DownLoadItem*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "VersionServ:FileHeader"))
	{	cp->type = SOAP_TYPE_VersionServ__FileHeader;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(VersionServ__FileHeader);
			if (size)
				*size = sizeof(VersionServ__FileHeader);
			((VersionServ__FileHeader*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__FileHeader, n);
			if (size)
				*size = n * sizeof(VersionServ__FileHeader);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((VersionServ__FileHeader*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (VersionServ__FileHeader*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__ObjectV);
		if (size)
			*size = sizeof(VersionServ__ObjectV);
		((VersionServ__ObjectV*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__ObjectV, n);
		if (size)
			*size = n * sizeof(VersionServ__ObjectV);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__ObjectV*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__ObjectV*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__ObjectV(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__ObjectV %p -> %p\n", q, p));
	*(VersionServ__ObjectV*)p = *(VersionServ__ObjectV*)q;
}

void VersionServ__DogAccessHistory::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->VersionServ__ObjectV::soap_default(soap);
	soap_default_string(soap, &this->VersionServ__DogAccessHistory::dogserial);
	soap_default_int(soap, &this->VersionServ__DogAccessHistory::endUserId);
	soap_default_int(soap, &this->VersionServ__DogAccessHistory::productId);
	soap_default_int(soap, &this->VersionServ__DogAccessHistory::cycleSerial);
	soap_default_int(soap, &this->VersionServ__DogAccessHistory::accessType);
	soap_default_int(soap, &this->VersionServ__DogAccessHistory::accessOccurDate);
}

void VersionServ__DogAccessHistory::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->VersionServ__DogAccessHistory::dogserial);
	soap_embedded(soap, &this->VersionServ__DogAccessHistory::endUserId, SOAP_TYPE_int);
	soap_embedded(soap, &this->VersionServ__DogAccessHistory::productId, SOAP_TYPE_int);
	soap_embedded(soap, &this->VersionServ__DogAccessHistory::cycleSerial, SOAP_TYPE_int);
	soap_embedded(soap, &this->VersionServ__DogAccessHistory::accessType, SOAP_TYPE_int);
	soap_embedded(soap, &this->VersionServ__DogAccessHistory::accessOccurDate, SOAP_TYPE_int);
	this->VersionServ__ObjectV::soap_serialize(soap);
#endif
}

int VersionServ__DogAccessHistory::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__DogAccessHistory(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__DogAccessHistory(struct soap *soap, const char *tag, int id, const VersionServ__DogAccessHistory *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__DogAccessHistory), "VersionServ:DogAccessHistory"))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:id", -1, &(a->VersionServ__ObjectV::id), ""))
		return soap->error;
	soap_outliteral(soap, "VersionServ:tag", &(a->VersionServ__ObjectV::tag), NULL);
	/* transient soap skipped */
	if (soap_out_string(soap, "VersionServ:dogserial", -1, &(a->VersionServ__DogAccessHistory::dogserial), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:endUserId", -1, &(a->VersionServ__DogAccessHistory::endUserId), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:productId", -1, &(a->VersionServ__DogAccessHistory::productId), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:cycleSerial", -1, &(a->VersionServ__DogAccessHistory::cycleSerial), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:accessType", -1, &(a->VersionServ__DogAccessHistory::accessType), ""))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:accessOccurDate", -1, &(a->VersionServ__DogAccessHistory::accessOccurDate), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *VersionServ__DogAccessHistory::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__DogAccessHistory(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__DogAccessHistory * SOAP_FMAC4 soap_in_VersionServ__DogAccessHistory(struct soap *soap, const char *tag, VersionServ__DogAccessHistory *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__DogAccessHistory *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__DogAccessHistory, sizeof(VersionServ__DogAccessHistory), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__DogAccessHistory)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__DogAccessHistory *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_tag2 = 1;
	size_t soap_flag_dogserial1 = 1;
	size_t soap_flag_endUserId1 = 1;
	size_t soap_flag_productId1 = 1;
	size_t soap_flag_cycleSerial1 = 1;
	size_t soap_flag_accessType1 = 1;
	size_t soap_flag_accessOccurDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:id", &(a->VersionServ__ObjectV::id), "xsd:int"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_tag2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "VersionServ:tag", &(a->VersionServ__ObjectV::tag)))
				{	soap_flag_tag2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_dogserial1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:dogserial", &(a->VersionServ__DogAccessHistory::dogserial), "xsd:string"))
				{	soap_flag_dogserial1--;
					continue;
				}
			if (soap_flag_endUserId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:endUserId", &(a->VersionServ__DogAccessHistory::endUserId), "xsd:int"))
				{	soap_flag_endUserId1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:productId", &(a->VersionServ__DogAccessHistory::productId), "xsd:int"))
				{	soap_flag_productId1--;
					continue;
				}
			if (soap_flag_cycleSerial1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:cycleSerial", &(a->VersionServ__DogAccessHistory::cycleSerial), "xsd:int"))
				{	soap_flag_cycleSerial1--;
					continue;
				}
			if (soap_flag_accessType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:accessType", &(a->VersionServ__DogAccessHistory::accessType), "xsd:int"))
				{	soap_flag_accessType1--;
					continue;
				}
			if (soap_flag_accessOccurDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:accessOccurDate", &(a->VersionServ__DogAccessHistory::accessOccurDate), "xsd:int"))
				{	soap_flag_accessOccurDate1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__DogAccessHistory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__DogAccessHistory, 0, sizeof(VersionServ__DogAccessHistory), 0, soap_copy_VersionServ__DogAccessHistory);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id2 > 0 || soap_flag_endUserId1 > 0 || soap_flag_productId1 > 0 || soap_flag_cycleSerial1 > 0 || soap_flag_accessType1 > 0 || soap_flag_accessOccurDate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int VersionServ__DogAccessHistory::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__DogAccessHistory);
	if (this->soap_out(soap, tag?tag:"VersionServ:DogAccessHistory", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__DogAccessHistory::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__DogAccessHistory(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__DogAccessHistory * SOAP_FMAC4 soap_get_VersionServ__DogAccessHistory(struct soap *soap, VersionServ__DogAccessHistory *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__DogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__DogAccessHistory * SOAP_FMAC2 soap_instantiate_VersionServ__DogAccessHistory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__DogAccessHistory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__DogAccessHistory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__DogAccessHistory);
		if (size)
			*size = sizeof(VersionServ__DogAccessHistory);
		((VersionServ__DogAccessHistory*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__DogAccessHistory, n);
		if (size)
			*size = n * sizeof(VersionServ__DogAccessHistory);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__DogAccessHistory*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__DogAccessHistory*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__DogAccessHistory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__DogAccessHistory %p -> %p\n", q, p));
	*(VersionServ__DogAccessHistory*)p = *(VersionServ__DogAccessHistory*)q;
}

void VersionServ__VersionRevision::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->VersionServ__VersionRevision::Id);
	soap_default_unsignedInt(soap, &this->VersionServ__VersionRevision::productId);
	soap_default_xsd__byte(soap, &this->VersionServ__VersionRevision::revisionType);
	soap_default_xsd__unsignedByte(soap, &this->VersionServ__VersionRevision::important);
	soap_default_bool(soap, &this->VersionServ__VersionRevision::readed);
	soap_default_string(soap, &this->VersionServ__VersionRevision::title);
	soap_default_string(soap, &this->VersionServ__VersionRevision::contents);
	/* transient soap skipped */
}

void VersionServ__VersionRevision::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->VersionServ__VersionRevision::Id, SOAP_TYPE_unsignedInt);
	soap_embedded(soap, &this->VersionServ__VersionRevision::productId, SOAP_TYPE_unsignedInt);
	soap_serialize_string(soap, &this->VersionServ__VersionRevision::title);
	soap_serialize_string(soap, &this->VersionServ__VersionRevision::contents);
	/* transient soap skipped */
#endif
}

int VersionServ__VersionRevision::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__VersionRevision(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__VersionRevision(struct soap *soap, const char *tag, int id, const VersionServ__VersionRevision *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__VersionRevision), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:Id", -1, &(a->VersionServ__VersionRevision::Id), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:productId", -1, &(a->VersionServ__VersionRevision::productId), ""))
		return soap->error;
	if (soap_out_xsd__byte(soap, "VersionServ:revisionType", -1, &(a->VersionServ__VersionRevision::revisionType), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "VersionServ:important", -1, &(a->VersionServ__VersionRevision::important), ""))
		return soap->error;
	if (soap_out_bool(soap, "VersionServ:readed", -1, &(a->VersionServ__VersionRevision::readed), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:title", -1, &(a->VersionServ__VersionRevision::title), ""))
		return soap->error;
	if (soap_out_string(soap, "VersionServ:contents", -1, &(a->VersionServ__VersionRevision::contents), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *VersionServ__VersionRevision::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__VersionRevision(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__VersionRevision * SOAP_FMAC4 soap_in_VersionServ__VersionRevision(struct soap *soap, const char *tag, VersionServ__VersionRevision *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__VersionRevision *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__VersionRevision, sizeof(VersionServ__VersionRevision), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__VersionRevision)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__VersionRevision *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_productId1 = 1;
	size_t soap_flag_revisionType1 = 1;
	size_t soap_flag_important1 = 1;
	size_t soap_flag_readed1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_contents1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:Id", &(a->VersionServ__VersionRevision::Id), "xsd:unsignedInt"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:productId", &(a->VersionServ__VersionRevision::productId), "xsd:unsignedInt"))
				{	soap_flag_productId1--;
					continue;
				}
			if (soap_flag_revisionType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__byte(soap, "VersionServ:revisionType", &(a->VersionServ__VersionRevision::revisionType), "xsd:byte"))
				{	soap_flag_revisionType1--;
					continue;
				}
			if (soap_flag_important1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "VersionServ:important", &(a->VersionServ__VersionRevision::important), "xsd:unsignedByte"))
				{	soap_flag_important1--;
					continue;
				}
			if (soap_flag_readed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "VersionServ:readed", &(a->VersionServ__VersionRevision::readed), "xsd:boolean"))
				{	soap_flag_readed1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:title", &(a->VersionServ__VersionRevision::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_contents1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "VersionServ:contents", &(a->VersionServ__VersionRevision::contents), "xsd:string"))
				{	soap_flag_contents1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__VersionRevision *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__VersionRevision, 0, sizeof(VersionServ__VersionRevision), 0, soap_copy_VersionServ__VersionRevision);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Id1 > 0 || soap_flag_productId1 > 0 || soap_flag_revisionType1 > 0 || soap_flag_important1 > 0 || soap_flag_readed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int VersionServ__VersionRevision::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__VersionRevision);
	if (this->soap_out(soap, tag?tag:"VersionServ:VersionRevision", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__VersionRevision::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__VersionRevision(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__VersionRevision * SOAP_FMAC4 soap_get_VersionServ__VersionRevision(struct soap *soap, VersionServ__VersionRevision *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__VersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__VersionRevision * SOAP_FMAC2 soap_instantiate_VersionServ__VersionRevision(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__VersionRevision(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__VersionRevision, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__VersionRevision);
		if (size)
			*size = sizeof(VersionServ__VersionRevision);
		((VersionServ__VersionRevision*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__VersionRevision, n);
		if (size)
			*size = n * sizeof(VersionServ__VersionRevision);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__VersionRevision*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__VersionRevision*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__VersionRevision(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__VersionRevision %p -> %p\n", q, p));
	*(VersionServ__VersionRevision*)p = *(VersionServ__VersionRevision*)q;
}

void VersionServ__ArrayOfVersionRevision::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->VersionServ__ArrayOfVersionRevision::__sizeVersionRevision = 0;
	this->VersionServ__ArrayOfVersionRevision::VersionRevision = NULL;
	/* transient soap skipped */
}

void VersionServ__ArrayOfVersionRevision::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->VersionServ__ArrayOfVersionRevision::VersionRevision)
	{	int i;
		for (i = 0; i < this->VersionServ__ArrayOfVersionRevision::__sizeVersionRevision; i++)
		{
			soap_serialize_PointerToVersionServ__VersionRevision(soap, this->VersionServ__ArrayOfVersionRevision::VersionRevision + i);
		}
	}
	/* transient soap skipped */
#endif
}

int VersionServ__ArrayOfVersionRevision::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__ArrayOfVersionRevision(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__ArrayOfVersionRevision(struct soap *soap, const char *tag, int id, const VersionServ__ArrayOfVersionRevision *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__ArrayOfVersionRevision), type))
		return soap->error;
	if (a->VersionServ__ArrayOfVersionRevision::VersionRevision)
	{	int i;
		for (i = 0; i < a->VersionServ__ArrayOfVersionRevision::__sizeVersionRevision; i++)
			if (soap_out_PointerToVersionServ__VersionRevision(soap, "VersionServ:VersionRevision", -1, a->VersionServ__ArrayOfVersionRevision::VersionRevision + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *VersionServ__ArrayOfVersionRevision::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__ArrayOfVersionRevision(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__ArrayOfVersionRevision * SOAP_FMAC4 soap_in_VersionServ__ArrayOfVersionRevision(struct soap *soap, const char *tag, VersionServ__ArrayOfVersionRevision *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__ArrayOfVersionRevision *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__ArrayOfVersionRevision, sizeof(VersionServ__ArrayOfVersionRevision), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__ArrayOfVersionRevision)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__ArrayOfVersionRevision *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_VersionRevision1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "VersionServ:VersionRevision", 1, NULL))
			{	if (a->VersionServ__ArrayOfVersionRevision::VersionRevision == NULL)
				{	if (soap_blist_VersionRevision1 == NULL)
						soap_blist_VersionRevision1 = soap_new_block(soap);
					a->VersionServ__ArrayOfVersionRevision::VersionRevision = (VersionServ__VersionRevision **)soap_push_block(soap, soap_blist_VersionRevision1, sizeof(VersionServ__VersionRevision *));
					if (a->VersionServ__ArrayOfVersionRevision::VersionRevision == NULL)
						return NULL;
					*a->VersionServ__ArrayOfVersionRevision::VersionRevision = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToVersionServ__VersionRevision(soap, "VersionServ:VersionRevision", a->VersionServ__ArrayOfVersionRevision::VersionRevision, "VersionServ:VersionRevision"))
				{	a->VersionServ__ArrayOfVersionRevision::__sizeVersionRevision++;
					a->VersionServ__ArrayOfVersionRevision::VersionRevision = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->VersionServ__ArrayOfVersionRevision::VersionRevision)
			soap_pop_block(soap, soap_blist_VersionRevision1);
		if (a->VersionServ__ArrayOfVersionRevision::__sizeVersionRevision)
			a->VersionServ__ArrayOfVersionRevision::VersionRevision = (VersionServ__VersionRevision **)soap_save_block(soap, soap_blist_VersionRevision1, NULL, 1);
		else
		{	a->VersionServ__ArrayOfVersionRevision::VersionRevision = NULL;
			if (soap_blist_VersionRevision1)
				soap_end_block(soap, soap_blist_VersionRevision1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__ArrayOfVersionRevision *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__ArrayOfVersionRevision, 0, sizeof(VersionServ__ArrayOfVersionRevision), 0, soap_copy_VersionServ__ArrayOfVersionRevision);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int VersionServ__ArrayOfVersionRevision::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__ArrayOfVersionRevision);
	if (this->soap_out(soap, tag?tag:"VersionServ:ArrayOfVersionRevision", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__ArrayOfVersionRevision::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__ArrayOfVersionRevision(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__ArrayOfVersionRevision * SOAP_FMAC4 soap_get_VersionServ__ArrayOfVersionRevision(struct soap *soap, VersionServ__ArrayOfVersionRevision *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__ArrayOfVersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__ArrayOfVersionRevision * SOAP_FMAC2 soap_instantiate_VersionServ__ArrayOfVersionRevision(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__ArrayOfVersionRevision(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__ArrayOfVersionRevision, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__ArrayOfVersionRevision);
		if (size)
			*size = sizeof(VersionServ__ArrayOfVersionRevision);
		((VersionServ__ArrayOfVersionRevision*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__ArrayOfVersionRevision, n);
		if (size)
			*size = n * sizeof(VersionServ__ArrayOfVersionRevision);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__ArrayOfVersionRevision*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__ArrayOfVersionRevision*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__ArrayOfVersionRevision(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__ArrayOfVersionRevision %p -> %p\n", q, p));
	*(VersionServ__ArrayOfVersionRevision*)p = *(VersionServ__ArrayOfVersionRevision*)q;
}

void VersionServ__ArrayOfInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->VersionServ__ArrayOfInt::__sizeint_ = 0;
	this->VersionServ__ArrayOfInt::int_ = NULL;
	/* transient soap skipped */
}

void VersionServ__ArrayOfInt::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->VersionServ__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < this->VersionServ__ArrayOfInt::__sizeint_; i++)
		{
			soap_embedded(soap, this->VersionServ__ArrayOfInt::int_ + i, SOAP_TYPE_int);
		}
	}
	/* transient soap skipped */
#endif
}

int VersionServ__ArrayOfInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__ArrayOfInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__ArrayOfInt(struct soap *soap, const char *tag, int id, const VersionServ__ArrayOfInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__ArrayOfInt), type))
		return soap->error;
	if (a->VersionServ__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < a->VersionServ__ArrayOfInt::__sizeint_; i++)
			if (soap_out_int(soap, "VersionServ:int", -1, a->VersionServ__ArrayOfInt::int_ + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *VersionServ__ArrayOfInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__ArrayOfInt(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__ArrayOfInt * SOAP_FMAC4 soap_in_VersionServ__ArrayOfInt(struct soap *soap, const char *tag, VersionServ__ArrayOfInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__ArrayOfInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__ArrayOfInt, sizeof(VersionServ__ArrayOfInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__ArrayOfInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__ArrayOfInt *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_int_1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "VersionServ:int", 1, NULL))
			{	if (a->VersionServ__ArrayOfInt::int_ == NULL)
				{	if (soap_blist_int_1 == NULL)
						soap_blist_int_1 = soap_new_block(soap);
					a->VersionServ__ArrayOfInt::int_ = (int *)soap_push_block(soap, soap_blist_int_1, sizeof(int));
					if (a->VersionServ__ArrayOfInt::int_ == NULL)
						return NULL;
					soap_default_int(soap, a->VersionServ__ArrayOfInt::int_);
				}
				soap_revert(soap);
				if (soap_in_int(soap, "VersionServ:int", a->VersionServ__ArrayOfInt::int_, "xsd:int"))
				{	a->VersionServ__ArrayOfInt::__sizeint_++;
					a->VersionServ__ArrayOfInt::int_ = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->VersionServ__ArrayOfInt::int_)
			soap_pop_block(soap, soap_blist_int_1);
		if (a->VersionServ__ArrayOfInt::__sizeint_)
			a->VersionServ__ArrayOfInt::int_ = (int *)soap_save_block(soap, soap_blist_int_1, NULL, 1);
		else
		{	a->VersionServ__ArrayOfInt::int_ = NULL;
			if (soap_blist_int_1)
				soap_end_block(soap, soap_blist_int_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__ArrayOfInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__ArrayOfInt, 0, sizeof(VersionServ__ArrayOfInt), 0, soap_copy_VersionServ__ArrayOfInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int VersionServ__ArrayOfInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__ArrayOfInt);
	if (this->soap_out(soap, tag?tag:"VersionServ:ArrayOfInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__ArrayOfInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__ArrayOfInt(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__ArrayOfInt * SOAP_FMAC4 soap_get_VersionServ__ArrayOfInt(struct soap *soap, VersionServ__ArrayOfInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__ArrayOfInt * SOAP_FMAC2 soap_instantiate_VersionServ__ArrayOfInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__ArrayOfInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__ArrayOfInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__ArrayOfInt);
		if (size)
			*size = sizeof(VersionServ__ArrayOfInt);
		((VersionServ__ArrayOfInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__ArrayOfInt, n);
		if (size)
			*size = n * sizeof(VersionServ__ArrayOfInt);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__ArrayOfInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__ArrayOfInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__ArrayOfInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__ArrayOfInt %p -> %p\n", q, p));
	*(VersionServ__ArrayOfInt*)p = *(VersionServ__ArrayOfInt*)q;
}

void VersionServ__ProductVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->VersionServ__ProductVersion::id);
	soap_default_unsignedInt(soap, &this->VersionServ__ProductVersion::productId);
	soap_default_unsignedInt(soap, &this->VersionServ__ProductVersion::version);
	soap_default_time(soap, &this->VersionServ__ProductVersion::releaseDate);
	/* transient soap skipped */
}

void VersionServ__ProductVersion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->VersionServ__ProductVersion::id, SOAP_TYPE_int);
	soap_embedded(soap, &this->VersionServ__ProductVersion::productId, SOAP_TYPE_unsignedInt);
	soap_embedded(soap, &this->VersionServ__ProductVersion::version, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int VersionServ__ProductVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__ProductVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__ProductVersion(struct soap *soap, const char *tag, int id, const VersionServ__ProductVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__ProductVersion), type))
		return soap->error;
	if (soap_out_int(soap, "VersionServ:id", -1, &(a->VersionServ__ProductVersion::id), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:productId", -1, &(a->VersionServ__ProductVersion::productId), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "VersionServ:version", -1, &(a->VersionServ__ProductVersion::version), ""))
		return soap->error;
	if (soap_out_time(soap, "VersionServ:releaseDate", -1, &(a->VersionServ__ProductVersion::releaseDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *VersionServ__ProductVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__ProductVersion(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__ProductVersion * SOAP_FMAC4 soap_in_VersionServ__ProductVersion(struct soap *soap, const char *tag, VersionServ__ProductVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__ProductVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__ProductVersion, sizeof(VersionServ__ProductVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__ProductVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__ProductVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_productId1 = 1;
	size_t soap_flag_version1 = 1;
	size_t soap_flag_releaseDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "VersionServ:id", &(a->VersionServ__ProductVersion::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:productId", &(a->VersionServ__ProductVersion::productId), "xsd:unsignedInt"))
				{	soap_flag_productId1--;
					continue;
				}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "VersionServ:version", &(a->VersionServ__ProductVersion::version), "xsd:unsignedInt"))
				{	soap_flag_version1--;
					continue;
				}
			if (soap_flag_releaseDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "VersionServ:releaseDate", &(a->VersionServ__ProductVersion::releaseDate), "xsd:dateTime"))
				{	soap_flag_releaseDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__ProductVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__ProductVersion, 0, sizeof(VersionServ__ProductVersion), 0, soap_copy_VersionServ__ProductVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_productId1 > 0 || soap_flag_version1 > 0 || soap_flag_releaseDate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int VersionServ__ProductVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__ProductVersion);
	if (this->soap_out(soap, tag?tag:"VersionServ:ProductVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__ProductVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__ProductVersion(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__ProductVersion * SOAP_FMAC4 soap_get_VersionServ__ProductVersion(struct soap *soap, VersionServ__ProductVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__ProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__ProductVersion * SOAP_FMAC2 soap_instantiate_VersionServ__ProductVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__ProductVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__ProductVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__ProductVersion);
		if (size)
			*size = sizeof(VersionServ__ProductVersion);
		((VersionServ__ProductVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__ProductVersion, n);
		if (size)
			*size = n * sizeof(VersionServ__ProductVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__ProductVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__ProductVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__ProductVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__ProductVersion %p -> %p\n", q, p));
	*(VersionServ__ProductVersion*)p = *(VersionServ__ProductVersion*)q;
}

void VersionServ__ArrayOfProductVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->VersionServ__ArrayOfProductVersion::__sizeProductVersion = 0;
	this->VersionServ__ArrayOfProductVersion::ProductVersion = NULL;
	/* transient soap skipped */
}

void VersionServ__ArrayOfProductVersion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->VersionServ__ArrayOfProductVersion::ProductVersion)
	{	int i;
		for (i = 0; i < this->VersionServ__ArrayOfProductVersion::__sizeProductVersion; i++)
		{
			soap_serialize_PointerToVersionServ__ProductVersion(soap, this->VersionServ__ArrayOfProductVersion::ProductVersion + i);
		}
	}
	/* transient soap skipped */
#endif
}

int VersionServ__ArrayOfProductVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_VersionServ__ArrayOfProductVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_VersionServ__ArrayOfProductVersion(struct soap *soap, const char *tag, int id, const VersionServ__ArrayOfProductVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_VersionServ__ArrayOfProductVersion), type))
		return soap->error;
	if (a->VersionServ__ArrayOfProductVersion::ProductVersion)
	{	int i;
		for (i = 0; i < a->VersionServ__ArrayOfProductVersion::__sizeProductVersion; i++)
			if (soap_out_PointerToVersionServ__ProductVersion(soap, "VersionServ:ProductVersion", -1, a->VersionServ__ArrayOfProductVersion::ProductVersion + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *VersionServ__ArrayOfProductVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_VersionServ__ArrayOfProductVersion(soap, tag, this, type);
}

SOAP_FMAC3 VersionServ__ArrayOfProductVersion * SOAP_FMAC4 soap_in_VersionServ__ArrayOfProductVersion(struct soap *soap, const char *tag, VersionServ__ArrayOfProductVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (VersionServ__ArrayOfProductVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_VersionServ__ArrayOfProductVersion, sizeof(VersionServ__ArrayOfProductVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_VersionServ__ArrayOfProductVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (VersionServ__ArrayOfProductVersion *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_ProductVersion1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "VersionServ:ProductVersion", 1, NULL))
			{	if (a->VersionServ__ArrayOfProductVersion::ProductVersion == NULL)
				{	if (soap_blist_ProductVersion1 == NULL)
						soap_blist_ProductVersion1 = soap_new_block(soap);
					a->VersionServ__ArrayOfProductVersion::ProductVersion = (VersionServ__ProductVersion **)soap_push_block(soap, soap_blist_ProductVersion1, sizeof(VersionServ__ProductVersion *));
					if (a->VersionServ__ArrayOfProductVersion::ProductVersion == NULL)
						return NULL;
					*a->VersionServ__ArrayOfProductVersion::ProductVersion = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToVersionServ__ProductVersion(soap, "VersionServ:ProductVersion", a->VersionServ__ArrayOfProductVersion::ProductVersion, "VersionServ:ProductVersion"))
				{	a->VersionServ__ArrayOfProductVersion::__sizeProductVersion++;
					a->VersionServ__ArrayOfProductVersion::ProductVersion = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->VersionServ__ArrayOfProductVersion::ProductVersion)
			soap_pop_block(soap, soap_blist_ProductVersion1);
		if (a->VersionServ__ArrayOfProductVersion::__sizeProductVersion)
			a->VersionServ__ArrayOfProductVersion::ProductVersion = (VersionServ__ProductVersion **)soap_save_block(soap, soap_blist_ProductVersion1, NULL, 1);
		else
		{	a->VersionServ__ArrayOfProductVersion::ProductVersion = NULL;
			if (soap_blist_ProductVersion1)
				soap_end_block(soap, soap_blist_ProductVersion1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (VersionServ__ArrayOfProductVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_VersionServ__ArrayOfProductVersion, 0, sizeof(VersionServ__ArrayOfProductVersion), 0, soap_copy_VersionServ__ArrayOfProductVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int VersionServ__ArrayOfProductVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_VersionServ__ArrayOfProductVersion);
	if (this->soap_out(soap, tag?tag:"VersionServ:ArrayOfProductVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *VersionServ__ArrayOfProductVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_VersionServ__ArrayOfProductVersion(soap, this, tag, type);
}

SOAP_FMAC3 VersionServ__ArrayOfProductVersion * SOAP_FMAC4 soap_get_VersionServ__ArrayOfProductVersion(struct soap *soap, VersionServ__ArrayOfProductVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_VersionServ__ArrayOfProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 VersionServ__ArrayOfProductVersion * SOAP_FMAC2 soap_instantiate_VersionServ__ArrayOfProductVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_VersionServ__ArrayOfProductVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_VersionServ__ArrayOfProductVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(VersionServ__ArrayOfProductVersion);
		if (size)
			*size = sizeof(VersionServ__ArrayOfProductVersion);
		((VersionServ__ArrayOfProductVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(VersionServ__ArrayOfProductVersion, n);
		if (size)
			*size = n * sizeof(VersionServ__ArrayOfProductVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((VersionServ__ArrayOfProductVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (VersionServ__ArrayOfProductVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_VersionServ__ArrayOfProductVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying VersionServ__ArrayOfProductVersion %p -> %p\n", q, p));
	*(VersionServ__ArrayOfProductVersion*)p = *(VersionServ__ArrayOfProductVersion*)q;
}

void _TMSServ__CloseFileObjectDataProviderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_TMSServ__CloseFileObjectDataProviderResponse::CloseFileObjectDataProviderResult);
	/* transient soap skipped */
}

void _TMSServ__CloseFileObjectDataProviderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _TMSServ__CloseFileObjectDataProviderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__CloseFileObjectDataProviderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__CloseFileObjectDataProviderResponse(struct soap *soap, const char *tag, int id, const _TMSServ__CloseFileObjectDataProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse), type))
		return soap->error;
	soap_element_result(soap, "TMSServ:CloseFileObjectDataProviderResult");
	if (soap_out_bool(soap, "TMSServ:CloseFileObjectDataProviderResult", -1, &(a->_TMSServ__CloseFileObjectDataProviderResponse::CloseFileObjectDataProviderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__CloseFileObjectDataProviderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__CloseFileObjectDataProviderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__CloseFileObjectDataProviderResponse * SOAP_FMAC4 soap_in__TMSServ__CloseFileObjectDataProviderResponse(struct soap *soap, const char *tag, _TMSServ__CloseFileObjectDataProviderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__CloseFileObjectDataProviderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse, sizeof(_TMSServ__CloseFileObjectDataProviderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__CloseFileObjectDataProviderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CloseFileObjectDataProviderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CloseFileObjectDataProviderResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:CloseFileObjectDataProviderResult", &(a->_TMSServ__CloseFileObjectDataProviderResponse::CloseFileObjectDataProviderResult), "xsd:boolean"))
				{	soap_flag_CloseFileObjectDataProviderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:CloseFileObjectDataProviderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__CloseFileObjectDataProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse, 0, sizeof(_TMSServ__CloseFileObjectDataProviderResponse), 0, soap_copy__TMSServ__CloseFileObjectDataProviderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CloseFileObjectDataProviderResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__CloseFileObjectDataProviderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:CloseFileObjectDataProviderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__CloseFileObjectDataProviderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__CloseFileObjectDataProviderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__CloseFileObjectDataProviderResponse * SOAP_FMAC4 soap_get__TMSServ__CloseFileObjectDataProviderResponse(struct soap *soap, _TMSServ__CloseFileObjectDataProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__CloseFileObjectDataProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__CloseFileObjectDataProviderResponse * SOAP_FMAC2 soap_instantiate__TMSServ__CloseFileObjectDataProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__CloseFileObjectDataProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__CloseFileObjectDataProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__CloseFileObjectDataProviderResponse);
		if (size)
			*size = sizeof(_TMSServ__CloseFileObjectDataProviderResponse);
		((_TMSServ__CloseFileObjectDataProviderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__CloseFileObjectDataProviderResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__CloseFileObjectDataProviderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__CloseFileObjectDataProviderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__CloseFileObjectDataProviderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__CloseFileObjectDataProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__CloseFileObjectDataProviderResponse %p -> %p\n", q, p));
	*(_TMSServ__CloseFileObjectDataProviderResponse*)p = *(_TMSServ__CloseFileObjectDataProviderResponse*)q;
}

void _TMSServ__CloseFileObjectDataProvider::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__CloseFileObjectDataProvider::sessionId);
	soap_default_int(soap, &this->_TMSServ__CloseFileObjectDataProvider::idFileObj);
	/* transient soap skipped */
}

void _TMSServ__CloseFileObjectDataProvider::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__CloseFileObjectDataProvider::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__CloseFileObjectDataProvider::idFileObj, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__CloseFileObjectDataProvider::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__CloseFileObjectDataProvider(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__CloseFileObjectDataProvider(struct soap *soap, const char *tag, int id, const _TMSServ__CloseFileObjectDataProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__CloseFileObjectDataProvider), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__CloseFileObjectDataProvider::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:idFileObj", -1, &(a->_TMSServ__CloseFileObjectDataProvider::idFileObj), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__CloseFileObjectDataProvider::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__CloseFileObjectDataProvider(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__CloseFileObjectDataProvider * SOAP_FMAC4 soap_in__TMSServ__CloseFileObjectDataProvider(struct soap *soap, const char *tag, _TMSServ__CloseFileObjectDataProvider *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__CloseFileObjectDataProvider *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__CloseFileObjectDataProvider, sizeof(_TMSServ__CloseFileObjectDataProvider), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__CloseFileObjectDataProvider)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__CloseFileObjectDataProvider *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__CloseFileObjectDataProvider::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:idFileObj", &(a->_TMSServ__CloseFileObjectDataProvider::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__CloseFileObjectDataProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__CloseFileObjectDataProvider, 0, sizeof(_TMSServ__CloseFileObjectDataProvider), 0, soap_copy__TMSServ__CloseFileObjectDataProvider);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__CloseFileObjectDataProvider::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__CloseFileObjectDataProvider);
	if (this->soap_out(soap, tag?tag:"TMSServ:CloseFileObjectDataProvider", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__CloseFileObjectDataProvider::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__CloseFileObjectDataProvider(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__CloseFileObjectDataProvider * SOAP_FMAC4 soap_get__TMSServ__CloseFileObjectDataProvider(struct soap *soap, _TMSServ__CloseFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__CloseFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__CloseFileObjectDataProvider * SOAP_FMAC2 soap_instantiate__TMSServ__CloseFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__CloseFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__CloseFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__CloseFileObjectDataProvider);
		if (size)
			*size = sizeof(_TMSServ__CloseFileObjectDataProvider);
		((_TMSServ__CloseFileObjectDataProvider*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__CloseFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(_TMSServ__CloseFileObjectDataProvider);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__CloseFileObjectDataProvider*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__CloseFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__CloseFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__CloseFileObjectDataProvider %p -> %p\n", q, p));
	*(_TMSServ__CloseFileObjectDataProvider*)p = *(_TMSServ__CloseFileObjectDataProvider*)q;
}

void _TMSServ__DownloadFileObjectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_TMSServ__DownloadFileObjectResponse::DownloadFileObjectResult = NULL;
	/* transient soap skipped */
}

void _TMSServ__DownloadFileObjectResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__DownloadFileObjectResponse::DownloadFileObjectResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__DownloadFileObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__DownloadFileObjectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__DownloadFileObjectResponse(struct soap *soap, const char *tag, int id, const _TMSServ__DownloadFileObjectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__DownloadFileObjectResponse), type))
		return soap->error;
	if (a->DownloadFileObjectResult)
		soap_element_result(soap, "TMSServ:DownloadFileObjectResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:DownloadFileObjectResult", -1, &(a->_TMSServ__DownloadFileObjectResponse::DownloadFileObjectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__DownloadFileObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__DownloadFileObjectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileObjectResponse * SOAP_FMAC4 soap_in__TMSServ__DownloadFileObjectResponse(struct soap *soap, const char *tag, _TMSServ__DownloadFileObjectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__DownloadFileObjectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__DownloadFileObjectResponse, sizeof(_TMSServ__DownloadFileObjectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__DownloadFileObjectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__DownloadFileObjectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DownloadFileObjectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadFileObjectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:DownloadFileObjectResult", &(a->_TMSServ__DownloadFileObjectResponse::DownloadFileObjectResult), "xsd:base64Binary"))
				{	soap_flag_DownloadFileObjectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:DownloadFileObjectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__DownloadFileObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__DownloadFileObjectResponse, 0, sizeof(_TMSServ__DownloadFileObjectResponse), 0, soap_copy__TMSServ__DownloadFileObjectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__DownloadFileObjectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__DownloadFileObjectResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:DownloadFileObjectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__DownloadFileObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__DownloadFileObjectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileObjectResponse * SOAP_FMAC4 soap_get__TMSServ__DownloadFileObjectResponse(struct soap *soap, _TMSServ__DownloadFileObjectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__DownloadFileObjectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__DownloadFileObjectResponse * SOAP_FMAC2 soap_instantiate__TMSServ__DownloadFileObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__DownloadFileObjectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__DownloadFileObjectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__DownloadFileObjectResponse);
		if (size)
			*size = sizeof(_TMSServ__DownloadFileObjectResponse);
		((_TMSServ__DownloadFileObjectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__DownloadFileObjectResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__DownloadFileObjectResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__DownloadFileObjectResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__DownloadFileObjectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__DownloadFileObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__DownloadFileObjectResponse %p -> %p\n", q, p));
	*(_TMSServ__DownloadFileObjectResponse*)p = *(_TMSServ__DownloadFileObjectResponse*)q;
}

void _TMSServ__DownloadFileObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__DownloadFileObject::sessionId);
	soap_default_int(soap, &this->_TMSServ__DownloadFileObject::idFileObj);
	soap_default_int(soap, &this->_TMSServ__DownloadFileObject::startposition);
	soap_default_int(soap, &this->_TMSServ__DownloadFileObject::download_USCOREsize);
	soap_default_bool(soap, &this->_TMSServ__DownloadFileObject::compressed);
	/* transient soap skipped */
}

void _TMSServ__DownloadFileObject::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__DownloadFileObject::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__DownloadFileObject::idFileObj, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__DownloadFileObject::startposition, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__DownloadFileObject::download_USCOREsize, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__DownloadFileObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__DownloadFileObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__DownloadFileObject(struct soap *soap, const char *tag, int id, const _TMSServ__DownloadFileObject *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__DownloadFileObject), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__DownloadFileObject::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:idFileObj", -1, &(a->_TMSServ__DownloadFileObject::idFileObj), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:startposition", -1, &(a->_TMSServ__DownloadFileObject::startposition), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:download_size", -1, &(a->_TMSServ__DownloadFileObject::download_USCOREsize), ""))
		return soap->error;
	if (soap_out_bool(soap, "TMSServ:compressed", -1, &(a->_TMSServ__DownloadFileObject::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__DownloadFileObject::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__DownloadFileObject(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileObject * SOAP_FMAC4 soap_in__TMSServ__DownloadFileObject(struct soap *soap, const char *tag, _TMSServ__DownloadFileObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__DownloadFileObject *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__DownloadFileObject, sizeof(_TMSServ__DownloadFileObject), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__DownloadFileObject)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__DownloadFileObject *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	size_t soap_flag_startposition1 = 1;
	size_t soap_flag_download_USCOREsize1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__DownloadFileObject::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:idFileObj", &(a->_TMSServ__DownloadFileObject::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			if (soap_flag_startposition1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:startposition", &(a->_TMSServ__DownloadFileObject::startposition), "xsd:int"))
				{	soap_flag_startposition1--;
					continue;
				}
			if (soap_flag_download_USCOREsize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:download_size", &(a->_TMSServ__DownloadFileObject::download_USCOREsize), "xsd:int"))
				{	soap_flag_download_USCOREsize1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:compressed", &(a->_TMSServ__DownloadFileObject::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__DownloadFileObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__DownloadFileObject, 0, sizeof(_TMSServ__DownloadFileObject), 0, soap_copy__TMSServ__DownloadFileObject);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0 || soap_flag_startposition1 > 0 || soap_flag_download_USCOREsize1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__DownloadFileObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__DownloadFileObject);
	if (this->soap_out(soap, tag?tag:"TMSServ:DownloadFileObject", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__DownloadFileObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__DownloadFileObject(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileObject * SOAP_FMAC4 soap_get__TMSServ__DownloadFileObject(struct soap *soap, _TMSServ__DownloadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__DownloadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__DownloadFileObject * SOAP_FMAC2 soap_instantiate__TMSServ__DownloadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__DownloadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__DownloadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__DownloadFileObject);
		if (size)
			*size = sizeof(_TMSServ__DownloadFileObject);
		((_TMSServ__DownloadFileObject*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__DownloadFileObject, n);
		if (size)
			*size = n * sizeof(_TMSServ__DownloadFileObject);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__DownloadFileObject*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__DownloadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__DownloadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__DownloadFileObject %p -> %p\n", q, p));
	*(_TMSServ__DownloadFileObject*)p = *(_TMSServ__DownloadFileObject*)q;
}

void _TMSServ__OpenServerObjectDataProviderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_TMSServ__OpenServerObjectDataProviderResponse::OpenServerObjectDataProviderResult);
	/* transient soap skipped */
}

void _TMSServ__OpenServerObjectDataProviderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_TMSServ__OpenServerObjectDataProviderResponse::OpenServerObjectDataProviderResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__OpenServerObjectDataProviderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__OpenServerObjectDataProviderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__OpenServerObjectDataProviderResponse(struct soap *soap, const char *tag, int id, const _TMSServ__OpenServerObjectDataProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse), type))
		return soap->error;
	if (a->OpenServerObjectDataProviderResult)
		soap_element_result(soap, "TMSServ:OpenServerObjectDataProviderResult");
	if (soap_out_string(soap, "TMSServ:OpenServerObjectDataProviderResult", -1, &(a->_TMSServ__OpenServerObjectDataProviderResponse::OpenServerObjectDataProviderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__OpenServerObjectDataProviderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__OpenServerObjectDataProviderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__OpenServerObjectDataProviderResponse * SOAP_FMAC4 soap_in__TMSServ__OpenServerObjectDataProviderResponse(struct soap *soap, const char *tag, _TMSServ__OpenServerObjectDataProviderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__OpenServerObjectDataProviderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse, sizeof(_TMSServ__OpenServerObjectDataProviderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__OpenServerObjectDataProviderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_OpenServerObjectDataProviderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OpenServerObjectDataProviderResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:OpenServerObjectDataProviderResult", &(a->_TMSServ__OpenServerObjectDataProviderResponse::OpenServerObjectDataProviderResult), "xsd:string"))
				{	soap_flag_OpenServerObjectDataProviderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:OpenServerObjectDataProviderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__OpenServerObjectDataProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse, 0, sizeof(_TMSServ__OpenServerObjectDataProviderResponse), 0, soap_copy__TMSServ__OpenServerObjectDataProviderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__OpenServerObjectDataProviderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:OpenServerObjectDataProviderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__OpenServerObjectDataProviderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__OpenServerObjectDataProviderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__OpenServerObjectDataProviderResponse * SOAP_FMAC4 soap_get__TMSServ__OpenServerObjectDataProviderResponse(struct soap *soap, _TMSServ__OpenServerObjectDataProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__OpenServerObjectDataProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__OpenServerObjectDataProviderResponse * SOAP_FMAC2 soap_instantiate__TMSServ__OpenServerObjectDataProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__OpenServerObjectDataProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__OpenServerObjectDataProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__OpenServerObjectDataProviderResponse);
		if (size)
			*size = sizeof(_TMSServ__OpenServerObjectDataProviderResponse);
		((_TMSServ__OpenServerObjectDataProviderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__OpenServerObjectDataProviderResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__OpenServerObjectDataProviderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__OpenServerObjectDataProviderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__OpenServerObjectDataProviderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__OpenServerObjectDataProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__OpenServerObjectDataProviderResponse %p -> %p\n", q, p));
	*(_TMSServ__OpenServerObjectDataProviderResponse*)p = *(_TMSServ__OpenServerObjectDataProviderResponse*)q;
}

void _TMSServ__OpenServerObjectDataProvider::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__OpenServerObjectDataProvider::sessionId);
	soap_default_int(soap, &this->_TMSServ__OpenServerObjectDataProvider::idObject);
	soap_default_string(soap, &this->_TMSServ__OpenServerObjectDataProvider::cls_USCOREname);
	soap_default_bool(soap, &this->_TMSServ__OpenServerObjectDataProvider::compressed);
	/* transient soap skipped */
}

void _TMSServ__OpenServerObjectDataProvider::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__OpenServerObjectDataProvider::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__OpenServerObjectDataProvider::idObject, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_TMSServ__OpenServerObjectDataProvider::cls_USCOREname);
	/* transient soap skipped */
#endif
}

int _TMSServ__OpenServerObjectDataProvider::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__OpenServerObjectDataProvider(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__OpenServerObjectDataProvider(struct soap *soap, const char *tag, int id, const _TMSServ__OpenServerObjectDataProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__OpenServerObjectDataProvider), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__OpenServerObjectDataProvider::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:idObject", -1, &(a->_TMSServ__OpenServerObjectDataProvider::idObject), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:cls_name", -1, &(a->_TMSServ__OpenServerObjectDataProvider::cls_USCOREname), ""))
		return soap->error;
	if (soap_out_bool(soap, "TMSServ:compressed", -1, &(a->_TMSServ__OpenServerObjectDataProvider::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__OpenServerObjectDataProvider::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__OpenServerObjectDataProvider(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__OpenServerObjectDataProvider * SOAP_FMAC4 soap_in__TMSServ__OpenServerObjectDataProvider(struct soap *soap, const char *tag, _TMSServ__OpenServerObjectDataProvider *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__OpenServerObjectDataProvider *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__OpenServerObjectDataProvider, sizeof(_TMSServ__OpenServerObjectDataProvider), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__OpenServerObjectDataProvider)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__OpenServerObjectDataProvider *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idObject1 = 1;
	size_t soap_flag_cls_USCOREname1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__OpenServerObjectDataProvider::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idObject1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:idObject", &(a->_TMSServ__OpenServerObjectDataProvider::idObject), "xsd:int"))
				{	soap_flag_idObject1--;
					continue;
				}
			if (soap_flag_cls_USCOREname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:cls_name", &(a->_TMSServ__OpenServerObjectDataProvider::cls_USCOREname), "xsd:string"))
				{	soap_flag_cls_USCOREname1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:compressed", &(a->_TMSServ__OpenServerObjectDataProvider::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__OpenServerObjectDataProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__OpenServerObjectDataProvider, 0, sizeof(_TMSServ__OpenServerObjectDataProvider), 0, soap_copy__TMSServ__OpenServerObjectDataProvider);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idObject1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__OpenServerObjectDataProvider::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__OpenServerObjectDataProvider);
	if (this->soap_out(soap, tag?tag:"TMSServ:OpenServerObjectDataProvider", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__OpenServerObjectDataProvider::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__OpenServerObjectDataProvider(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__OpenServerObjectDataProvider * SOAP_FMAC4 soap_get__TMSServ__OpenServerObjectDataProvider(struct soap *soap, _TMSServ__OpenServerObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__OpenServerObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__OpenServerObjectDataProvider * SOAP_FMAC2 soap_instantiate__TMSServ__OpenServerObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__OpenServerObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__OpenServerObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__OpenServerObjectDataProvider);
		if (size)
			*size = sizeof(_TMSServ__OpenServerObjectDataProvider);
		((_TMSServ__OpenServerObjectDataProvider*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__OpenServerObjectDataProvider, n);
		if (size)
			*size = n * sizeof(_TMSServ__OpenServerObjectDataProvider);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__OpenServerObjectDataProvider*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__OpenServerObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__OpenServerObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__OpenServerObjectDataProvider %p -> %p\n", q, p));
	*(_TMSServ__OpenServerObjectDataProvider*)p = *(_TMSServ__OpenServerObjectDataProvider*)q;
}

void _TMSServ__OpenTapModelDataProviderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_TMSServ__OpenTapModelDataProviderResponse::OpenTapModelDataProviderResult);
	/* transient soap skipped */
}

void _TMSServ__OpenTapModelDataProviderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_TMSServ__OpenTapModelDataProviderResponse::OpenTapModelDataProviderResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__OpenTapModelDataProviderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__OpenTapModelDataProviderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__OpenTapModelDataProviderResponse(struct soap *soap, const char *tag, int id, const _TMSServ__OpenTapModelDataProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse), type))
		return soap->error;
	if (a->OpenTapModelDataProviderResult)
		soap_element_result(soap, "TMSServ:OpenTapModelDataProviderResult");
	if (soap_out_string(soap, "TMSServ:OpenTapModelDataProviderResult", -1, &(a->_TMSServ__OpenTapModelDataProviderResponse::OpenTapModelDataProviderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__OpenTapModelDataProviderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__OpenTapModelDataProviderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__OpenTapModelDataProviderResponse * SOAP_FMAC4 soap_in__TMSServ__OpenTapModelDataProviderResponse(struct soap *soap, const char *tag, _TMSServ__OpenTapModelDataProviderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__OpenTapModelDataProviderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse, sizeof(_TMSServ__OpenTapModelDataProviderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__OpenTapModelDataProviderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_OpenTapModelDataProviderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OpenTapModelDataProviderResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:OpenTapModelDataProviderResult", &(a->_TMSServ__OpenTapModelDataProviderResponse::OpenTapModelDataProviderResult), "xsd:string"))
				{	soap_flag_OpenTapModelDataProviderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:OpenTapModelDataProviderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__OpenTapModelDataProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse, 0, sizeof(_TMSServ__OpenTapModelDataProviderResponse), 0, soap_copy__TMSServ__OpenTapModelDataProviderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__OpenTapModelDataProviderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:OpenTapModelDataProviderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__OpenTapModelDataProviderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__OpenTapModelDataProviderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__OpenTapModelDataProviderResponse * SOAP_FMAC4 soap_get__TMSServ__OpenTapModelDataProviderResponse(struct soap *soap, _TMSServ__OpenTapModelDataProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__OpenTapModelDataProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__OpenTapModelDataProviderResponse * SOAP_FMAC2 soap_instantiate__TMSServ__OpenTapModelDataProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__OpenTapModelDataProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__OpenTapModelDataProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__OpenTapModelDataProviderResponse);
		if (size)
			*size = sizeof(_TMSServ__OpenTapModelDataProviderResponse);
		((_TMSServ__OpenTapModelDataProviderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__OpenTapModelDataProviderResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__OpenTapModelDataProviderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__OpenTapModelDataProviderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__OpenTapModelDataProviderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__OpenTapModelDataProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__OpenTapModelDataProviderResponse %p -> %p\n", q, p));
	*(_TMSServ__OpenTapModelDataProviderResponse*)p = *(_TMSServ__OpenTapModelDataProviderResponse*)q;
}

void _TMSServ__OpenTapModelDataProvider::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__OpenTapModelDataProvider::sessionId);
	soap_default_int(soap, &this->_TMSServ__OpenTapModelDataProvider::idTowerType);
	soap_default_bool(soap, &this->_TMSServ__OpenTapModelDataProvider::compressed);
	/* transient soap skipped */
}

void _TMSServ__OpenTapModelDataProvider::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__OpenTapModelDataProvider::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__OpenTapModelDataProvider::idTowerType, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__OpenTapModelDataProvider::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__OpenTapModelDataProvider(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__OpenTapModelDataProvider(struct soap *soap, const char *tag, int id, const _TMSServ__OpenTapModelDataProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__OpenTapModelDataProvider), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__OpenTapModelDataProvider::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:idTowerType", -1, &(a->_TMSServ__OpenTapModelDataProvider::idTowerType), ""))
		return soap->error;
	if (soap_out_bool(soap, "TMSServ:compressed", -1, &(a->_TMSServ__OpenTapModelDataProvider::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__OpenTapModelDataProvider::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__OpenTapModelDataProvider(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__OpenTapModelDataProvider * SOAP_FMAC4 soap_in__TMSServ__OpenTapModelDataProvider(struct soap *soap, const char *tag, _TMSServ__OpenTapModelDataProvider *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__OpenTapModelDataProvider *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__OpenTapModelDataProvider, sizeof(_TMSServ__OpenTapModelDataProvider), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__OpenTapModelDataProvider)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__OpenTapModelDataProvider *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idTowerType1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__OpenTapModelDataProvider::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idTowerType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:idTowerType", &(a->_TMSServ__OpenTapModelDataProvider::idTowerType), "xsd:int"))
				{	soap_flag_idTowerType1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:compressed", &(a->_TMSServ__OpenTapModelDataProvider::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__OpenTapModelDataProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__OpenTapModelDataProvider, 0, sizeof(_TMSServ__OpenTapModelDataProvider), 0, soap_copy__TMSServ__OpenTapModelDataProvider);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idTowerType1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__OpenTapModelDataProvider::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__OpenTapModelDataProvider);
	if (this->soap_out(soap, tag?tag:"TMSServ:OpenTapModelDataProvider", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__OpenTapModelDataProvider::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__OpenTapModelDataProvider(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__OpenTapModelDataProvider * SOAP_FMAC4 soap_get__TMSServ__OpenTapModelDataProvider(struct soap *soap, _TMSServ__OpenTapModelDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__OpenTapModelDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__OpenTapModelDataProvider * SOAP_FMAC2 soap_instantiate__TMSServ__OpenTapModelDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__OpenTapModelDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__OpenTapModelDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__OpenTapModelDataProvider);
		if (size)
			*size = sizeof(_TMSServ__OpenTapModelDataProvider);
		((_TMSServ__OpenTapModelDataProvider*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__OpenTapModelDataProvider, n);
		if (size)
			*size = n * sizeof(_TMSServ__OpenTapModelDataProvider);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__OpenTapModelDataProvider*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__OpenTapModelDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__OpenTapModelDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__OpenTapModelDataProvider %p -> %p\n", q, p));
	*(_TMSServ__OpenTapModelDataProvider*)p = *(_TMSServ__OpenTapModelDataProvider*)q;
}

void _TMSServ__OpenFileObjectDataProviderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_TMSServ__OpenFileObjectDataProviderResponse::OpenFileObjectDataProviderResult);
	/* transient soap skipped */
}

void _TMSServ__OpenFileObjectDataProviderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__OpenFileObjectDataProviderResponse::OpenFileObjectDataProviderResult, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _TMSServ__OpenFileObjectDataProviderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__OpenFileObjectDataProviderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__OpenFileObjectDataProviderResponse(struct soap *soap, const char *tag, int id, const _TMSServ__OpenFileObjectDataProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse), type))
		return soap->error;
	soap_element_result(soap, "TMSServ:OpenFileObjectDataProviderResult");
	if (soap_out_unsignedInt(soap, "TMSServ:OpenFileObjectDataProviderResult", -1, &(a->_TMSServ__OpenFileObjectDataProviderResponse::OpenFileObjectDataProviderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__OpenFileObjectDataProviderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__OpenFileObjectDataProviderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__OpenFileObjectDataProviderResponse * SOAP_FMAC4 soap_in__TMSServ__OpenFileObjectDataProviderResponse(struct soap *soap, const char *tag, _TMSServ__OpenFileObjectDataProviderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__OpenFileObjectDataProviderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse, sizeof(_TMSServ__OpenFileObjectDataProviderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__OpenFileObjectDataProviderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_OpenFileObjectDataProviderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OpenFileObjectDataProviderResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "TMSServ:OpenFileObjectDataProviderResult", &(a->_TMSServ__OpenFileObjectDataProviderResponse::OpenFileObjectDataProviderResult), "xsd:unsignedInt"))
				{	soap_flag_OpenFileObjectDataProviderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:OpenFileObjectDataProviderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__OpenFileObjectDataProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse, 0, sizeof(_TMSServ__OpenFileObjectDataProviderResponse), 0, soap_copy__TMSServ__OpenFileObjectDataProviderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OpenFileObjectDataProviderResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__OpenFileObjectDataProviderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:OpenFileObjectDataProviderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__OpenFileObjectDataProviderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__OpenFileObjectDataProviderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__OpenFileObjectDataProviderResponse * SOAP_FMAC4 soap_get__TMSServ__OpenFileObjectDataProviderResponse(struct soap *soap, _TMSServ__OpenFileObjectDataProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__OpenFileObjectDataProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__OpenFileObjectDataProviderResponse * SOAP_FMAC2 soap_instantiate__TMSServ__OpenFileObjectDataProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__OpenFileObjectDataProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__OpenFileObjectDataProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__OpenFileObjectDataProviderResponse);
		if (size)
			*size = sizeof(_TMSServ__OpenFileObjectDataProviderResponse);
		((_TMSServ__OpenFileObjectDataProviderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__OpenFileObjectDataProviderResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__OpenFileObjectDataProviderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__OpenFileObjectDataProviderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__OpenFileObjectDataProviderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__OpenFileObjectDataProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__OpenFileObjectDataProviderResponse %p -> %p\n", q, p));
	*(_TMSServ__OpenFileObjectDataProviderResponse*)p = *(_TMSServ__OpenFileObjectDataProviderResponse*)q;
}

void _TMSServ__OpenFileObjectDataProvider::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__OpenFileObjectDataProvider::sessionId);
	soap_default_int(soap, &this->_TMSServ__OpenFileObjectDataProvider::idFileObj);
	soap_default_bool(soap, &this->_TMSServ__OpenFileObjectDataProvider::compressed);
	/* transient soap skipped */
}

void _TMSServ__OpenFileObjectDataProvider::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__OpenFileObjectDataProvider::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__OpenFileObjectDataProvider::idFileObj, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__OpenFileObjectDataProvider::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__OpenFileObjectDataProvider(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__OpenFileObjectDataProvider(struct soap *soap, const char *tag, int id, const _TMSServ__OpenFileObjectDataProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__OpenFileObjectDataProvider), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__OpenFileObjectDataProvider::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:idFileObj", -1, &(a->_TMSServ__OpenFileObjectDataProvider::idFileObj), ""))
		return soap->error;
	if (soap_out_bool(soap, "TMSServ:compressed", -1, &(a->_TMSServ__OpenFileObjectDataProvider::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__OpenFileObjectDataProvider::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__OpenFileObjectDataProvider(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__OpenFileObjectDataProvider * SOAP_FMAC4 soap_in__TMSServ__OpenFileObjectDataProvider(struct soap *soap, const char *tag, _TMSServ__OpenFileObjectDataProvider *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__OpenFileObjectDataProvider *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__OpenFileObjectDataProvider, sizeof(_TMSServ__OpenFileObjectDataProvider), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__OpenFileObjectDataProvider)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__OpenFileObjectDataProvider *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__OpenFileObjectDataProvider::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:idFileObj", &(a->_TMSServ__OpenFileObjectDataProvider::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:compressed", &(a->_TMSServ__OpenFileObjectDataProvider::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__OpenFileObjectDataProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__OpenFileObjectDataProvider, 0, sizeof(_TMSServ__OpenFileObjectDataProvider), 0, soap_copy__TMSServ__OpenFileObjectDataProvider);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__OpenFileObjectDataProvider::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__OpenFileObjectDataProvider);
	if (this->soap_out(soap, tag?tag:"TMSServ:OpenFileObjectDataProvider", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__OpenFileObjectDataProvider::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__OpenFileObjectDataProvider(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__OpenFileObjectDataProvider * SOAP_FMAC4 soap_get__TMSServ__OpenFileObjectDataProvider(struct soap *soap, _TMSServ__OpenFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__OpenFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__OpenFileObjectDataProvider * SOAP_FMAC2 soap_instantiate__TMSServ__OpenFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__OpenFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__OpenFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__OpenFileObjectDataProvider);
		if (size)
			*size = sizeof(_TMSServ__OpenFileObjectDataProvider);
		((_TMSServ__OpenFileObjectDataProvider*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__OpenFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(_TMSServ__OpenFileObjectDataProvider);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__OpenFileObjectDataProvider*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__OpenFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__OpenFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__OpenFileObjectDataProvider %p -> %p\n", q, p));
	*(_TMSServ__OpenFileObjectDataProvider*)p = *(_TMSServ__OpenFileObjectDataProvider*)q;
}

void _TMSServ__FinalizeFileObjectDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_TMSServ__FinalizeFileObjectDataResponse::FinalizeFileObjectDataResult);
	/* transient soap skipped */
}

void _TMSServ__FinalizeFileObjectDataResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_TMSServ__FinalizeFileObjectDataResponse::FinalizeFileObjectDataResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__FinalizeFileObjectDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__FinalizeFileObjectDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__FinalizeFileObjectDataResponse(struct soap *soap, const char *tag, int id, const _TMSServ__FinalizeFileObjectDataResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse), type))
		return soap->error;
	if (a->FinalizeFileObjectDataResult)
		soap_element_result(soap, "TMSServ:FinalizeFileObjectDataResult");
	if (soap_out_string(soap, "TMSServ:FinalizeFileObjectDataResult", -1, &(a->_TMSServ__FinalizeFileObjectDataResponse::FinalizeFileObjectDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__FinalizeFileObjectDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__FinalizeFileObjectDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__FinalizeFileObjectDataResponse * SOAP_FMAC4 soap_in__TMSServ__FinalizeFileObjectDataResponse(struct soap *soap, const char *tag, _TMSServ__FinalizeFileObjectDataResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__FinalizeFileObjectDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse, sizeof(_TMSServ__FinalizeFileObjectDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__FinalizeFileObjectDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_FinalizeFileObjectDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_FinalizeFileObjectDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:FinalizeFileObjectDataResult", &(a->_TMSServ__FinalizeFileObjectDataResponse::FinalizeFileObjectDataResult), "xsd:string"))
				{	soap_flag_FinalizeFileObjectDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:FinalizeFileObjectDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__FinalizeFileObjectDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse, 0, sizeof(_TMSServ__FinalizeFileObjectDataResponse), 0, soap_copy__TMSServ__FinalizeFileObjectDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__FinalizeFileObjectDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:FinalizeFileObjectDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__FinalizeFileObjectDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__FinalizeFileObjectDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__FinalizeFileObjectDataResponse * SOAP_FMAC4 soap_get__TMSServ__FinalizeFileObjectDataResponse(struct soap *soap, _TMSServ__FinalizeFileObjectDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__FinalizeFileObjectDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__FinalizeFileObjectDataResponse * SOAP_FMAC2 soap_instantiate__TMSServ__FinalizeFileObjectDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__FinalizeFileObjectDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__FinalizeFileObjectDataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__FinalizeFileObjectDataResponse);
		if (size)
			*size = sizeof(_TMSServ__FinalizeFileObjectDataResponse);
		((_TMSServ__FinalizeFileObjectDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__FinalizeFileObjectDataResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__FinalizeFileObjectDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__FinalizeFileObjectDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__FinalizeFileObjectDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__FinalizeFileObjectDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__FinalizeFileObjectDataResponse %p -> %p\n", q, p));
	*(_TMSServ__FinalizeFileObjectDataResponse*)p = *(_TMSServ__FinalizeFileObjectDataResponse*)q;
}

void _TMSServ__FinalizeFileObjectData::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__FinalizeFileObjectData::sessionId);
	soap_default_int(soap, &this->_TMSServ__FinalizeFileObjectData::idFileObj);
	soap_default_int(soap, &this->_TMSServ__FinalizeFileObjectData::file_USCORElength);
	soap_default_bool(soap, &this->_TMSServ__FinalizeFileObjectData::isOverriteFile);
	/* transient soap skipped */
}

void _TMSServ__FinalizeFileObjectData::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__FinalizeFileObjectData::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__FinalizeFileObjectData::idFileObj, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__FinalizeFileObjectData::file_USCORElength, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__FinalizeFileObjectData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__FinalizeFileObjectData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__FinalizeFileObjectData(struct soap *soap, const char *tag, int id, const _TMSServ__FinalizeFileObjectData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__FinalizeFileObjectData), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__FinalizeFileObjectData::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:idFileObj", -1, &(a->_TMSServ__FinalizeFileObjectData::idFileObj), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:file_length", -1, &(a->_TMSServ__FinalizeFileObjectData::file_USCORElength), ""))
		return soap->error;
	if (soap_out_bool(soap, "TMSServ:isOverriteFile", -1, &(a->_TMSServ__FinalizeFileObjectData::isOverriteFile), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__FinalizeFileObjectData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__FinalizeFileObjectData(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__FinalizeFileObjectData * SOAP_FMAC4 soap_in__TMSServ__FinalizeFileObjectData(struct soap *soap, const char *tag, _TMSServ__FinalizeFileObjectData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__FinalizeFileObjectData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__FinalizeFileObjectData, sizeof(_TMSServ__FinalizeFileObjectData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__FinalizeFileObjectData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__FinalizeFileObjectData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	size_t soap_flag_file_USCORElength1 = 1;
	size_t soap_flag_isOverriteFile1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__FinalizeFileObjectData::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:idFileObj", &(a->_TMSServ__FinalizeFileObjectData::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			if (soap_flag_file_USCORElength1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:file_length", &(a->_TMSServ__FinalizeFileObjectData::file_USCORElength), "xsd:int"))
				{	soap_flag_file_USCORElength1--;
					continue;
				}
			if (soap_flag_isOverriteFile1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:isOverriteFile", &(a->_TMSServ__FinalizeFileObjectData::isOverriteFile), "xsd:boolean"))
				{	soap_flag_isOverriteFile1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__FinalizeFileObjectData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__FinalizeFileObjectData, 0, sizeof(_TMSServ__FinalizeFileObjectData), 0, soap_copy__TMSServ__FinalizeFileObjectData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0 || soap_flag_file_USCORElength1 > 0 || soap_flag_isOverriteFile1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__FinalizeFileObjectData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__FinalizeFileObjectData);
	if (this->soap_out(soap, tag?tag:"TMSServ:FinalizeFileObjectData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__FinalizeFileObjectData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__FinalizeFileObjectData(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__FinalizeFileObjectData * SOAP_FMAC4 soap_get__TMSServ__FinalizeFileObjectData(struct soap *soap, _TMSServ__FinalizeFileObjectData *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__FinalizeFileObjectData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__FinalizeFileObjectData * SOAP_FMAC2 soap_instantiate__TMSServ__FinalizeFileObjectData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__FinalizeFileObjectData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__FinalizeFileObjectData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__FinalizeFileObjectData);
		if (size)
			*size = sizeof(_TMSServ__FinalizeFileObjectData);
		((_TMSServ__FinalizeFileObjectData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__FinalizeFileObjectData, n);
		if (size)
			*size = n * sizeof(_TMSServ__FinalizeFileObjectData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__FinalizeFileObjectData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__FinalizeFileObjectData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__FinalizeFileObjectData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__FinalizeFileObjectData %p -> %p\n", q, p));
	*(_TMSServ__FinalizeFileObjectData*)p = *(_TMSServ__FinalizeFileObjectData*)q;
}

void _TMSServ__UploadFileObjectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_TMSServ__UploadFileObjectResponse::UploadFileObjectResult);
	/* transient soap skipped */
}

void _TMSServ__UploadFileObjectResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _TMSServ__UploadFileObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__UploadFileObjectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__UploadFileObjectResponse(struct soap *soap, const char *tag, int id, const _TMSServ__UploadFileObjectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__UploadFileObjectResponse), type))
		return soap->error;
	soap_element_result(soap, "TMSServ:UploadFileObjectResult");
	if (soap_out_bool(soap, "TMSServ:UploadFileObjectResult", -1, &(a->_TMSServ__UploadFileObjectResponse::UploadFileObjectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__UploadFileObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__UploadFileObjectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__UploadFileObjectResponse * SOAP_FMAC4 soap_in__TMSServ__UploadFileObjectResponse(struct soap *soap, const char *tag, _TMSServ__UploadFileObjectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__UploadFileObjectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__UploadFileObjectResponse, sizeof(_TMSServ__UploadFileObjectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__UploadFileObjectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__UploadFileObjectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_UploadFileObjectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UploadFileObjectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:UploadFileObjectResult", &(a->_TMSServ__UploadFileObjectResponse::UploadFileObjectResult), "xsd:boolean"))
				{	soap_flag_UploadFileObjectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:UploadFileObjectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__UploadFileObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__UploadFileObjectResponse, 0, sizeof(_TMSServ__UploadFileObjectResponse), 0, soap_copy__TMSServ__UploadFileObjectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_UploadFileObjectResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__UploadFileObjectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__UploadFileObjectResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:UploadFileObjectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__UploadFileObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__UploadFileObjectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__UploadFileObjectResponse * SOAP_FMAC4 soap_get__TMSServ__UploadFileObjectResponse(struct soap *soap, _TMSServ__UploadFileObjectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__UploadFileObjectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__UploadFileObjectResponse * SOAP_FMAC2 soap_instantiate__TMSServ__UploadFileObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__UploadFileObjectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__UploadFileObjectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__UploadFileObjectResponse);
		if (size)
			*size = sizeof(_TMSServ__UploadFileObjectResponse);
		((_TMSServ__UploadFileObjectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__UploadFileObjectResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__UploadFileObjectResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__UploadFileObjectResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__UploadFileObjectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__UploadFileObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__UploadFileObjectResponse %p -> %p\n", q, p));
	*(_TMSServ__UploadFileObjectResponse*)p = *(_TMSServ__UploadFileObjectResponse*)q;
}

void _TMSServ__UploadFileObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__UploadFileObject::sessionId);
	soap_default_int(soap, &this->_TMSServ__UploadFileObject::idFileObj);
	soap_default_int(soap, &this->_TMSServ__UploadFileObject::startposition);
	this->_TMSServ__UploadFileObject::byteArr = NULL;
	soap_default_bool(soap, &this->_TMSServ__UploadFileObject::compressed);
	/* transient soap skipped */
}

void _TMSServ__UploadFileObject::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__UploadFileObject::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__UploadFileObject::idFileObj, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__UploadFileObject::startposition, SOAP_TYPE_int);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__UploadFileObject::byteArr);
	/* transient soap skipped */
#endif
}

int _TMSServ__UploadFileObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__UploadFileObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__UploadFileObject(struct soap *soap, const char *tag, int id, const _TMSServ__UploadFileObject *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__UploadFileObject), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__UploadFileObject::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:idFileObj", -1, &(a->_TMSServ__UploadFileObject::idFileObj), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:startposition", -1, &(a->_TMSServ__UploadFileObject::startposition), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:byteArr", -1, &(a->_TMSServ__UploadFileObject::byteArr), ""))
		return soap->error;
	if (soap_out_bool(soap, "TMSServ:compressed", -1, &(a->_TMSServ__UploadFileObject::compressed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__UploadFileObject::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__UploadFileObject(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__UploadFileObject * SOAP_FMAC4 soap_in__TMSServ__UploadFileObject(struct soap *soap, const char *tag, _TMSServ__UploadFileObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__UploadFileObject *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__UploadFileObject, sizeof(_TMSServ__UploadFileObject), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__UploadFileObject)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__UploadFileObject *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_idFileObj1 = 1;
	size_t soap_flag_startposition1 = 1;
	size_t soap_flag_byteArr1 = 1;
	size_t soap_flag_compressed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__UploadFileObject::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_idFileObj1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:idFileObj", &(a->_TMSServ__UploadFileObject::idFileObj), "xsd:int"))
				{	soap_flag_idFileObj1--;
					continue;
				}
			if (soap_flag_startposition1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:startposition", &(a->_TMSServ__UploadFileObject::startposition), "xsd:int"))
				{	soap_flag_startposition1--;
					continue;
				}
			if (soap_flag_byteArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:byteArr", &(a->_TMSServ__UploadFileObject::byteArr), "xsd:base64Binary"))
				{	soap_flag_byteArr1--;
					continue;
				}
			if (soap_flag_compressed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:compressed", &(a->_TMSServ__UploadFileObject::compressed), "xsd:boolean"))
				{	soap_flag_compressed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__UploadFileObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__UploadFileObject, 0, sizeof(_TMSServ__UploadFileObject), 0, soap_copy__TMSServ__UploadFileObject);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_idFileObj1 > 0 || soap_flag_startposition1 > 0 || soap_flag_compressed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__UploadFileObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__UploadFileObject);
	if (this->soap_out(soap, tag?tag:"TMSServ:UploadFileObject", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__UploadFileObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__UploadFileObject(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__UploadFileObject * SOAP_FMAC4 soap_get__TMSServ__UploadFileObject(struct soap *soap, _TMSServ__UploadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__UploadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__UploadFileObject * SOAP_FMAC2 soap_instantiate__TMSServ__UploadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__UploadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__UploadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__UploadFileObject);
		if (size)
			*size = sizeof(_TMSServ__UploadFileObject);
		((_TMSServ__UploadFileObject*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__UploadFileObject, n);
		if (size)
			*size = n * sizeof(_TMSServ__UploadFileObject);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__UploadFileObject*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__UploadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__UploadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__UploadFileObject %p -> %p\n", q, p));
	*(_TMSServ__UploadFileObject*)p = *(_TMSServ__UploadFileObject*)q;
}

void _TMSServ__DownloadFileByIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_TMSServ__DownloadFileByIdResponse::DownloadFileByIdResult = NULL;
	/* transient soap skipped */
}

void _TMSServ__DownloadFileByIdResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__DownloadFileByIdResponse::DownloadFileByIdResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__DownloadFileByIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__DownloadFileByIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__DownloadFileByIdResponse(struct soap *soap, const char *tag, int id, const _TMSServ__DownloadFileByIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__DownloadFileByIdResponse), type))
		return soap->error;
	if (a->DownloadFileByIdResult)
		soap_element_result(soap, "TMSServ:DownloadFileByIdResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:DownloadFileByIdResult", -1, &(a->_TMSServ__DownloadFileByIdResponse::DownloadFileByIdResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__DownloadFileByIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__DownloadFileByIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileByIdResponse * SOAP_FMAC4 soap_in__TMSServ__DownloadFileByIdResponse(struct soap *soap, const char *tag, _TMSServ__DownloadFileByIdResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__DownloadFileByIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__DownloadFileByIdResponse, sizeof(_TMSServ__DownloadFileByIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__DownloadFileByIdResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__DownloadFileByIdResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DownloadFileByIdResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadFileByIdResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:DownloadFileByIdResult", &(a->_TMSServ__DownloadFileByIdResponse::DownloadFileByIdResult), "xsd:base64Binary"))
				{	soap_flag_DownloadFileByIdResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:DownloadFileByIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__DownloadFileByIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__DownloadFileByIdResponse, 0, sizeof(_TMSServ__DownloadFileByIdResponse), 0, soap_copy__TMSServ__DownloadFileByIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__DownloadFileByIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__DownloadFileByIdResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:DownloadFileByIdResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__DownloadFileByIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__DownloadFileByIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileByIdResponse * SOAP_FMAC4 soap_get__TMSServ__DownloadFileByIdResponse(struct soap *soap, _TMSServ__DownloadFileByIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__DownloadFileByIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__DownloadFileByIdResponse * SOAP_FMAC2 soap_instantiate__TMSServ__DownloadFileByIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__DownloadFileByIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__DownloadFileByIdResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__DownloadFileByIdResponse);
		if (size)
			*size = sizeof(_TMSServ__DownloadFileByIdResponse);
		((_TMSServ__DownloadFileByIdResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__DownloadFileByIdResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__DownloadFileByIdResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__DownloadFileByIdResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__DownloadFileByIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__DownloadFileByIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__DownloadFileByIdResponse %p -> %p\n", q, p));
	*(_TMSServ__DownloadFileByIdResponse*)p = *(_TMSServ__DownloadFileByIdResponse*)q;
}

void _TMSServ__DownloadFileById::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__DownloadFileById::sessionId);
	soap_default_string(soap, &this->_TMSServ__DownloadFileById::clsName);
	soap_default_int(soap, &this->_TMSServ__DownloadFileById::fileId);
	/* transient soap skipped */
}

void _TMSServ__DownloadFileById::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__DownloadFileById::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_TMSServ__DownloadFileById::clsName);
	soap_embedded(soap, &this->_TMSServ__DownloadFileById::fileId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__DownloadFileById::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__DownloadFileById(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__DownloadFileById(struct soap *soap, const char *tag, int id, const _TMSServ__DownloadFileById *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__DownloadFileById), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__DownloadFileById::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:clsName", -1, &(a->_TMSServ__DownloadFileById::clsName), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:fileId", -1, &(a->_TMSServ__DownloadFileById::fileId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__DownloadFileById::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__DownloadFileById(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileById * SOAP_FMAC4 soap_in__TMSServ__DownloadFileById(struct soap *soap, const char *tag, _TMSServ__DownloadFileById *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__DownloadFileById *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__DownloadFileById, sizeof(_TMSServ__DownloadFileById), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__DownloadFileById)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__DownloadFileById *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_fileId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__DownloadFileById::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:clsName", &(a->_TMSServ__DownloadFileById::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_fileId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:fileId", &(a->_TMSServ__DownloadFileById::fileId), "xsd:int"))
				{	soap_flag_fileId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__DownloadFileById *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__DownloadFileById, 0, sizeof(_TMSServ__DownloadFileById), 0, soap_copy__TMSServ__DownloadFileById);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_fileId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__DownloadFileById::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__DownloadFileById);
	if (this->soap_out(soap, tag?tag:"TMSServ:DownloadFileById", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__DownloadFileById::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__DownloadFileById(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileById * SOAP_FMAC4 soap_get__TMSServ__DownloadFileById(struct soap *soap, _TMSServ__DownloadFileById *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__DownloadFileById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__DownloadFileById * SOAP_FMAC2 soap_instantiate__TMSServ__DownloadFileById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__DownloadFileById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__DownloadFileById, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__DownloadFileById);
		if (size)
			*size = sizeof(_TMSServ__DownloadFileById);
		((_TMSServ__DownloadFileById*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__DownloadFileById, n);
		if (size)
			*size = n * sizeof(_TMSServ__DownloadFileById);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__DownloadFileById*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__DownloadFileById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__DownloadFileById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__DownloadFileById %p -> %p\n", q, p));
	*(_TMSServ__DownloadFileById*)p = *(_TMSServ__DownloadFileById*)q;
}

void _TMSServ__DeleteObjectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_TMSServ__DeleteObjectResponse::DeleteObjectResult);
	/* transient soap skipped */
}

void _TMSServ__DeleteObjectResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _TMSServ__DeleteObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__DeleteObjectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__DeleteObjectResponse(struct soap *soap, const char *tag, int id, const _TMSServ__DeleteObjectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__DeleteObjectResponse), type))
		return soap->error;
	soap_element_result(soap, "TMSServ:DeleteObjectResult");
	if (soap_out_bool(soap, "TMSServ:DeleteObjectResult", -1, &(a->_TMSServ__DeleteObjectResponse::DeleteObjectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__DeleteObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__DeleteObjectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__DeleteObjectResponse * SOAP_FMAC4 soap_in__TMSServ__DeleteObjectResponse(struct soap *soap, const char *tag, _TMSServ__DeleteObjectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__DeleteObjectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__DeleteObjectResponse, sizeof(_TMSServ__DeleteObjectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__DeleteObjectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__DeleteObjectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeleteObjectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeleteObjectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "TMSServ:DeleteObjectResult", &(a->_TMSServ__DeleteObjectResponse::DeleteObjectResult), "xsd:boolean"))
				{	soap_flag_DeleteObjectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:DeleteObjectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__DeleteObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__DeleteObjectResponse, 0, sizeof(_TMSServ__DeleteObjectResponse), 0, soap_copy__TMSServ__DeleteObjectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeleteObjectResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__DeleteObjectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__DeleteObjectResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:DeleteObjectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__DeleteObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__DeleteObjectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__DeleteObjectResponse * SOAP_FMAC4 soap_get__TMSServ__DeleteObjectResponse(struct soap *soap, _TMSServ__DeleteObjectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__DeleteObjectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__DeleteObjectResponse * SOAP_FMAC2 soap_instantiate__TMSServ__DeleteObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__DeleteObjectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__DeleteObjectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__DeleteObjectResponse);
		if (size)
			*size = sizeof(_TMSServ__DeleteObjectResponse);
		((_TMSServ__DeleteObjectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__DeleteObjectResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__DeleteObjectResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__DeleteObjectResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__DeleteObjectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__DeleteObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__DeleteObjectResponse %p -> %p\n", q, p));
	*(_TMSServ__DeleteObjectResponse*)p = *(_TMSServ__DeleteObjectResponse*)q;
}

void _TMSServ__DeleteObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__DeleteObject::sessionId);
	soap_default_string(soap, &this->_TMSServ__DeleteObject::clsName);
	soap_default_int(soap, &this->_TMSServ__DeleteObject::objId);
	/* transient soap skipped */
}

void _TMSServ__DeleteObject::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__DeleteObject::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_TMSServ__DeleteObject::clsName);
	soap_embedded(soap, &this->_TMSServ__DeleteObject::objId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__DeleteObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__DeleteObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__DeleteObject(struct soap *soap, const char *tag, int id, const _TMSServ__DeleteObject *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__DeleteObject), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__DeleteObject::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:clsName", -1, &(a->_TMSServ__DeleteObject::clsName), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:objId", -1, &(a->_TMSServ__DeleteObject::objId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__DeleteObject::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__DeleteObject(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__DeleteObject * SOAP_FMAC4 soap_in__TMSServ__DeleteObject(struct soap *soap, const char *tag, _TMSServ__DeleteObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__DeleteObject *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__DeleteObject, sizeof(_TMSServ__DeleteObject), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__DeleteObject)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__DeleteObject *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_objId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__DeleteObject::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:clsName", &(a->_TMSServ__DeleteObject::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_objId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:objId", &(a->_TMSServ__DeleteObject::objId), "xsd:int"))
				{	soap_flag_objId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__DeleteObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__DeleteObject, 0, sizeof(_TMSServ__DeleteObject), 0, soap_copy__TMSServ__DeleteObject);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_objId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__DeleteObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__DeleteObject);
	if (this->soap_out(soap, tag?tag:"TMSServ:DeleteObject", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__DeleteObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__DeleteObject(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__DeleteObject * SOAP_FMAC4 soap_get__TMSServ__DeleteObject(struct soap *soap, _TMSServ__DeleteObject *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__DeleteObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__DeleteObject * SOAP_FMAC2 soap_instantiate__TMSServ__DeleteObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__DeleteObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__DeleteObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__DeleteObject);
		if (size)
			*size = sizeof(_TMSServ__DeleteObject);
		((_TMSServ__DeleteObject*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__DeleteObject, n);
		if (size)
			*size = n * sizeof(_TMSServ__DeleteObject);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__DeleteObject*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__DeleteObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__DeleteObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__DeleteObject %p -> %p\n", q, p));
	*(_TMSServ__DeleteObject*)p = *(_TMSServ__DeleteObject*)q;
}

void _TMSServ__SaveOrUpdateObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_TMSServ__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult);
	/* transient soap skipped */
}

void _TMSServ__SaveOrUpdateObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_TMSServ__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__SaveOrUpdateObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__SaveOrUpdateObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__SaveOrUpdateObjectsResponse(struct soap *soap, const char *tag, int id, const _TMSServ__SaveOrUpdateObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse), type))
		return soap->error;
	if (a->SaveOrUpdateObjectsResult)
		soap_element_result(soap, "TMSServ:SaveOrUpdateObjectsResult");
	if (soap_out_string(soap, "TMSServ:SaveOrUpdateObjectsResult", -1, &(a->_TMSServ__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__SaveOrUpdateObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__SaveOrUpdateObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__SaveOrUpdateObjectsResponse * SOAP_FMAC4 soap_in__TMSServ__SaveOrUpdateObjectsResponse(struct soap *soap, const char *tag, _TMSServ__SaveOrUpdateObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__SaveOrUpdateObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse, sizeof(_TMSServ__SaveOrUpdateObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__SaveOrUpdateObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SaveOrUpdateObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SaveOrUpdateObjectsResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:SaveOrUpdateObjectsResult", &(a->_TMSServ__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult), "xsd:string"))
				{	soap_flag_SaveOrUpdateObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:SaveOrUpdateObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__SaveOrUpdateObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse, 0, sizeof(_TMSServ__SaveOrUpdateObjectsResponse), 0, soap_copy__TMSServ__SaveOrUpdateObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__SaveOrUpdateObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:SaveOrUpdateObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__SaveOrUpdateObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__SaveOrUpdateObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__SaveOrUpdateObjectsResponse * SOAP_FMAC4 soap_get__TMSServ__SaveOrUpdateObjectsResponse(struct soap *soap, _TMSServ__SaveOrUpdateObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__SaveOrUpdateObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__SaveOrUpdateObjectsResponse * SOAP_FMAC2 soap_instantiate__TMSServ__SaveOrUpdateObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__SaveOrUpdateObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__SaveOrUpdateObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__SaveOrUpdateObjectsResponse);
		if (size)
			*size = sizeof(_TMSServ__SaveOrUpdateObjectsResponse);
		((_TMSServ__SaveOrUpdateObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__SaveOrUpdateObjectsResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__SaveOrUpdateObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__SaveOrUpdateObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__SaveOrUpdateObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__SaveOrUpdateObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__SaveOrUpdateObjectsResponse %p -> %p\n", q, p));
	*(_TMSServ__SaveOrUpdateObjectsResponse*)p = *(_TMSServ__SaveOrUpdateObjectsResponse*)q;
}

void _TMSServ__SaveOrUpdateObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__SaveOrUpdateObjects::sessionId);
	soap_default_string(soap, &this->_TMSServ__SaveOrUpdateObjects::clsName);
	soap_default_string(soap, &this->_TMSServ__SaveOrUpdateObjects::xmlformat);
	this->_TMSServ__SaveOrUpdateObjects::byteArr = NULL;
	/* transient soap skipped */
}

void _TMSServ__SaveOrUpdateObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__SaveOrUpdateObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_TMSServ__SaveOrUpdateObjects::clsName);
	soap_serialize_string(soap, &this->_TMSServ__SaveOrUpdateObjects::xmlformat);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__SaveOrUpdateObjects::byteArr);
	/* transient soap skipped */
#endif
}

int _TMSServ__SaveOrUpdateObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__SaveOrUpdateObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const _TMSServ__SaveOrUpdateObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__SaveOrUpdateObjects), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__SaveOrUpdateObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:clsName", -1, &(a->_TMSServ__SaveOrUpdateObjects::clsName), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:xmlformat", -1, &(a->_TMSServ__SaveOrUpdateObjects::xmlformat), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:byteArr", -1, &(a->_TMSServ__SaveOrUpdateObjects::byteArr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__SaveOrUpdateObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__SaveOrUpdateObjects(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__SaveOrUpdateObjects * SOAP_FMAC4 soap_in__TMSServ__SaveOrUpdateObjects(struct soap *soap, const char *tag, _TMSServ__SaveOrUpdateObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__SaveOrUpdateObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__SaveOrUpdateObjects, sizeof(_TMSServ__SaveOrUpdateObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__SaveOrUpdateObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__SaveOrUpdateObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_xmlformat1 = 1;
	size_t soap_flag_byteArr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__SaveOrUpdateObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:clsName", &(a->_TMSServ__SaveOrUpdateObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_xmlformat1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:xmlformat", &(a->_TMSServ__SaveOrUpdateObjects::xmlformat), "xsd:string"))
				{	soap_flag_xmlformat1--;
					continue;
				}
			if (soap_flag_byteArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:byteArr", &(a->_TMSServ__SaveOrUpdateObjects::byteArr), "xsd:base64Binary"))
				{	soap_flag_byteArr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__SaveOrUpdateObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__SaveOrUpdateObjects, 0, sizeof(_TMSServ__SaveOrUpdateObjects), 0, soap_copy__TMSServ__SaveOrUpdateObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__SaveOrUpdateObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__SaveOrUpdateObjects);
	if (this->soap_out(soap, tag?tag:"TMSServ:SaveOrUpdateObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__SaveOrUpdateObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__SaveOrUpdateObjects(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__SaveOrUpdateObjects * SOAP_FMAC4 soap_get__TMSServ__SaveOrUpdateObjects(struct soap *soap, _TMSServ__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate__TMSServ__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(_TMSServ__SaveOrUpdateObjects);
		((_TMSServ__SaveOrUpdateObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(_TMSServ__SaveOrUpdateObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__SaveOrUpdateObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(_TMSServ__SaveOrUpdateObjects*)p = *(_TMSServ__SaveOrUpdateObjects*)q;
}

void _TMSServ__MatchTowerPartsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_TMSServ__MatchTowerPartsResponse::MatchTowerPartsResult);
	/* transient soap skipped */
}

void _TMSServ__MatchTowerPartsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_TMSServ__MatchTowerPartsResponse::MatchTowerPartsResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__MatchTowerPartsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__MatchTowerPartsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__MatchTowerPartsResponse(struct soap *soap, const char *tag, int id, const _TMSServ__MatchTowerPartsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__MatchTowerPartsResponse), type))
		return soap->error;
	if (a->MatchTowerPartsResult)
		soap_element_result(soap, "TMSServ:MatchTowerPartsResult");
	if (soap_out_string(soap, "TMSServ:MatchTowerPartsResult", -1, &(a->_TMSServ__MatchTowerPartsResponse::MatchTowerPartsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__MatchTowerPartsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__MatchTowerPartsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__MatchTowerPartsResponse * SOAP_FMAC4 soap_in__TMSServ__MatchTowerPartsResponse(struct soap *soap, const char *tag, _TMSServ__MatchTowerPartsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__MatchTowerPartsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__MatchTowerPartsResponse, sizeof(_TMSServ__MatchTowerPartsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__MatchTowerPartsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__MatchTowerPartsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MatchTowerPartsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MatchTowerPartsResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:MatchTowerPartsResult", &(a->_TMSServ__MatchTowerPartsResponse::MatchTowerPartsResult), "xsd:string"))
				{	soap_flag_MatchTowerPartsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:MatchTowerPartsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__MatchTowerPartsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__MatchTowerPartsResponse, 0, sizeof(_TMSServ__MatchTowerPartsResponse), 0, soap_copy__TMSServ__MatchTowerPartsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__MatchTowerPartsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__MatchTowerPartsResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:MatchTowerPartsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__MatchTowerPartsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__MatchTowerPartsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__MatchTowerPartsResponse * SOAP_FMAC4 soap_get__TMSServ__MatchTowerPartsResponse(struct soap *soap, _TMSServ__MatchTowerPartsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__MatchTowerPartsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__MatchTowerPartsResponse * SOAP_FMAC2 soap_instantiate__TMSServ__MatchTowerPartsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__MatchTowerPartsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__MatchTowerPartsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__MatchTowerPartsResponse);
		if (size)
			*size = sizeof(_TMSServ__MatchTowerPartsResponse);
		((_TMSServ__MatchTowerPartsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__MatchTowerPartsResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__MatchTowerPartsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__MatchTowerPartsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__MatchTowerPartsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__MatchTowerPartsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__MatchTowerPartsResponse %p -> %p\n", q, p));
	*(_TMSServ__MatchTowerPartsResponse*)p = *(_TMSServ__MatchTowerPartsResponse*)q;
}

void _TMSServ__MatchTowerParts::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__MatchTowerParts::sessionId);
	soap_default_string(soap, &this->_TMSServ__MatchTowerParts::xmlformat);
	this->_TMSServ__MatchTowerParts::byteArr = NULL;
	/* transient soap skipped */
}

void _TMSServ__MatchTowerParts::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__MatchTowerParts::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_TMSServ__MatchTowerParts::xmlformat);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__MatchTowerParts::byteArr);
	/* transient soap skipped */
#endif
}

int _TMSServ__MatchTowerParts::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__MatchTowerParts(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__MatchTowerParts(struct soap *soap, const char *tag, int id, const _TMSServ__MatchTowerParts *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__MatchTowerParts), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__MatchTowerParts::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:xmlformat", -1, &(a->_TMSServ__MatchTowerParts::xmlformat), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:byteArr", -1, &(a->_TMSServ__MatchTowerParts::byteArr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__MatchTowerParts::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__MatchTowerParts(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__MatchTowerParts * SOAP_FMAC4 soap_in__TMSServ__MatchTowerParts(struct soap *soap, const char *tag, _TMSServ__MatchTowerParts *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__MatchTowerParts *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__MatchTowerParts, sizeof(_TMSServ__MatchTowerParts), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__MatchTowerParts)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__MatchTowerParts *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_xmlformat1 = 1;
	size_t soap_flag_byteArr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__MatchTowerParts::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_xmlformat1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:xmlformat", &(a->_TMSServ__MatchTowerParts::xmlformat), "xsd:string"))
				{	soap_flag_xmlformat1--;
					continue;
				}
			if (soap_flag_byteArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:byteArr", &(a->_TMSServ__MatchTowerParts::byteArr), "xsd:base64Binary"))
				{	soap_flag_byteArr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__MatchTowerParts *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__MatchTowerParts, 0, sizeof(_TMSServ__MatchTowerParts), 0, soap_copy__TMSServ__MatchTowerParts);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__MatchTowerParts::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__MatchTowerParts);
	if (this->soap_out(soap, tag?tag:"TMSServ:MatchTowerParts", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__MatchTowerParts::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__MatchTowerParts(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__MatchTowerParts * SOAP_FMAC4 soap_get__TMSServ__MatchTowerParts(struct soap *soap, _TMSServ__MatchTowerParts *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__MatchTowerParts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__MatchTowerParts * SOAP_FMAC2 soap_instantiate__TMSServ__MatchTowerParts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__MatchTowerParts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__MatchTowerParts, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__MatchTowerParts);
		if (size)
			*size = sizeof(_TMSServ__MatchTowerParts);
		((_TMSServ__MatchTowerParts*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__MatchTowerParts, n);
		if (size)
			*size = n * sizeof(_TMSServ__MatchTowerParts);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__MatchTowerParts*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__MatchTowerParts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__MatchTowerParts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__MatchTowerParts %p -> %p\n", q, p));
	*(_TMSServ__MatchTowerParts*)p = *(_TMSServ__MatchTowerParts*)q;
}

void _TMSServ__GetTowerPartsLabelAndVersionSerialResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_TMSServ__GetTowerPartsLabelAndVersionSerialResponse::GetTowerPartsLabelAndVersionSerialResult = NULL;
	/* transient soap skipped */
}

void _TMSServ__GetTowerPartsLabelAndVersionSerialResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__GetTowerPartsLabelAndVersionSerialResponse::GetTowerPartsLabelAndVersionSerialResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__GetTowerPartsLabelAndVersionSerialResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, const char *tag, int id, const _TMSServ__GetTowerPartsLabelAndVersionSerialResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse), type))
		return soap->error;
	if (a->GetTowerPartsLabelAndVersionSerialResult)
		soap_element_result(soap, "TMSServ:GetTowerPartsLabelAndVersionSerialResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:GetTowerPartsLabelAndVersionSerialResult", -1, &(a->_TMSServ__GetTowerPartsLabelAndVersionSerialResponse::GetTowerPartsLabelAndVersionSerialResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__GetTowerPartsLabelAndVersionSerialResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__GetTowerPartsLabelAndVersionSerialResponse * SOAP_FMAC4 soap_in__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, const char *tag, _TMSServ__GetTowerPartsLabelAndVersionSerialResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__GetTowerPartsLabelAndVersionSerialResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse, sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerialResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__GetTowerPartsLabelAndVersionSerialResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetTowerPartsLabelAndVersionSerialResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTowerPartsLabelAndVersionSerialResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:GetTowerPartsLabelAndVersionSerialResult", &(a->_TMSServ__GetTowerPartsLabelAndVersionSerialResponse::GetTowerPartsLabelAndVersionSerialResult), "xsd:base64Binary"))
				{	soap_flag_GetTowerPartsLabelAndVersionSerialResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:GetTowerPartsLabelAndVersionSerialResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__GetTowerPartsLabelAndVersionSerialResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse, 0, sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerialResponse), 0, soap_copy__TMSServ__GetTowerPartsLabelAndVersionSerialResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__GetTowerPartsLabelAndVersionSerialResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:GetTowerPartsLabelAndVersionSerialResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__GetTowerPartsLabelAndVersionSerialResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__GetTowerPartsLabelAndVersionSerialResponse * SOAP_FMAC4 soap_get__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, _TMSServ__GetTowerPartsLabelAndVersionSerialResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__GetTowerPartsLabelAndVersionSerialResponse * SOAP_FMAC2 soap_instantiate__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerialResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__GetTowerPartsLabelAndVersionSerialResponse);
		if (size)
			*size = sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerialResponse);
		((_TMSServ__GetTowerPartsLabelAndVersionSerialResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__GetTowerPartsLabelAndVersionSerialResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerialResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__GetTowerPartsLabelAndVersionSerialResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__GetTowerPartsLabelAndVersionSerialResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__GetTowerPartsLabelAndVersionSerialResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__GetTowerPartsLabelAndVersionSerialResponse %p -> %p\n", q, p));
	*(_TMSServ__GetTowerPartsLabelAndVersionSerialResponse*)p = *(_TMSServ__GetTowerPartsLabelAndVersionSerialResponse*)q;
}

void _TMSServ__GetTowerPartsLabelAndVersionSerial::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__GetTowerPartsLabelAndVersionSerial::sessionId);
	soap_default_int(soap, &this->_TMSServ__GetTowerPartsLabelAndVersionSerial::towerTypeId);
	/* transient soap skipped */
}

void _TMSServ__GetTowerPartsLabelAndVersionSerial::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__GetTowerPartsLabelAndVersionSerial::sessionId, SOAP_TYPE_int);
	soap_embedded(soap, &this->_TMSServ__GetTowerPartsLabelAndVersionSerial::towerTypeId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__GetTowerPartsLabelAndVersionSerial::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__GetTowerPartsLabelAndVersionSerial(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, int id, const _TMSServ__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__GetTowerPartsLabelAndVersionSerial::sessionId), ""))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:towerTypeId", -1, &(a->_TMSServ__GetTowerPartsLabelAndVersionSerial::towerTypeId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__GetTowerPartsLabelAndVersionSerial::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__GetTowerPartsLabelAndVersionSerial(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_in__TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, _TMSServ__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__GetTowerPartsLabelAndVersionSerial *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial, sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerial), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__GetTowerPartsLabelAndVersionSerial *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_towerTypeId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__GetTowerPartsLabelAndVersionSerial::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_towerTypeId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:towerTypeId", &(a->_TMSServ__GetTowerPartsLabelAndVersionSerial::towerTypeId), "xsd:int"))
				{	soap_flag_towerTypeId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__GetTowerPartsLabelAndVersionSerial *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial, 0, sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerial), 0, soap_copy__TMSServ__GetTowerPartsLabelAndVersionSerial);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_towerTypeId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__GetTowerPartsLabelAndVersionSerial::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial);
	if (this->soap_out(soap, tag?tag:"TMSServ:GetTowerPartsLabelAndVersionSerial", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__GetTowerPartsLabelAndVersionSerial::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__GetTowerPartsLabelAndVersionSerial(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_get__TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, _TMSServ__GetTowerPartsLabelAndVersionSerial *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__GetTowerPartsLabelAndVersionSerial(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC2 soap_instantiate__TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__GetTowerPartsLabelAndVersionSerial(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__GetTowerPartsLabelAndVersionSerial);
		if (size)
			*size = sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerial);
		((_TMSServ__GetTowerPartsLabelAndVersionSerial*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__GetTowerPartsLabelAndVersionSerial, n);
		if (size)
			*size = n * sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerial);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__GetTowerPartsLabelAndVersionSerial*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__GetTowerPartsLabelAndVersionSerial*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__GetTowerPartsLabelAndVersionSerial %p -> %p\n", q, p));
	*(_TMSServ__GetTowerPartsLabelAndVersionSerial*)p = *(_TMSServ__GetTowerPartsLabelAndVersionSerial*)q;
}

void _TMSServ__GetObjectsVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_TMSServ__GetObjectsVersionResponse::GetObjectsVersionResult = NULL;
	/* transient soap skipped */
}

void _TMSServ__GetObjectsVersionResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToTMSServ__ArrayOfUnsignedInt(soap, &this->_TMSServ__GetObjectsVersionResponse::GetObjectsVersionResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__GetObjectsVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__GetObjectsVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__GetObjectsVersionResponse(struct soap *soap, const char *tag, int id, const _TMSServ__GetObjectsVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__GetObjectsVersionResponse), type))
		return soap->error;
	if (a->GetObjectsVersionResult)
		soap_element_result(soap, "TMSServ:GetObjectsVersionResult");
	if (soap_out_PointerToTMSServ__ArrayOfUnsignedInt(soap, "TMSServ:GetObjectsVersionResult", -1, &(a->_TMSServ__GetObjectsVersionResponse::GetObjectsVersionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__GetObjectsVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__GetObjectsVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__GetObjectsVersionResponse * SOAP_FMAC4 soap_in__TMSServ__GetObjectsVersionResponse(struct soap *soap, const char *tag, _TMSServ__GetObjectsVersionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__GetObjectsVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__GetObjectsVersionResponse, sizeof(_TMSServ__GetObjectsVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__GetObjectsVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__GetObjectsVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetObjectsVersionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetObjectsVersionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToTMSServ__ArrayOfUnsignedInt(soap, "TMSServ:GetObjectsVersionResult", &(a->_TMSServ__GetObjectsVersionResponse::GetObjectsVersionResult), "TMSServ:ArrayOfUnsignedInt"))
				{	soap_flag_GetObjectsVersionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:GetObjectsVersionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__GetObjectsVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__GetObjectsVersionResponse, 0, sizeof(_TMSServ__GetObjectsVersionResponse), 0, soap_copy__TMSServ__GetObjectsVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__GetObjectsVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__GetObjectsVersionResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:GetObjectsVersionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__GetObjectsVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__GetObjectsVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__GetObjectsVersionResponse * SOAP_FMAC4 soap_get__TMSServ__GetObjectsVersionResponse(struct soap *soap, _TMSServ__GetObjectsVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__GetObjectsVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__GetObjectsVersionResponse * SOAP_FMAC2 soap_instantiate__TMSServ__GetObjectsVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__GetObjectsVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__GetObjectsVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__GetObjectsVersionResponse);
		if (size)
			*size = sizeof(_TMSServ__GetObjectsVersionResponse);
		((_TMSServ__GetObjectsVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__GetObjectsVersionResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__GetObjectsVersionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__GetObjectsVersionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__GetObjectsVersionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__GetObjectsVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__GetObjectsVersionResponse %p -> %p\n", q, p));
	*(_TMSServ__GetObjectsVersionResponse*)p = *(_TMSServ__GetObjectsVersionResponse*)q;
}

void _TMSServ__GetObjectsVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__GetObjectsVersion::sessionId);
	soap_default_string(soap, &this->_TMSServ__GetObjectsVersion::clsName);
	this->_TMSServ__GetObjectsVersion::idarr = NULL;
	/* transient soap skipped */
}

void _TMSServ__GetObjectsVersion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__GetObjectsVersion::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_TMSServ__GetObjectsVersion::clsName);
	soap_serialize_PointerToTMSServ__ArrayOfInt(soap, &this->_TMSServ__GetObjectsVersion::idarr);
	/* transient soap skipped */
#endif
}

int _TMSServ__GetObjectsVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__GetObjectsVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__GetObjectsVersion(struct soap *soap, const char *tag, int id, const _TMSServ__GetObjectsVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__GetObjectsVersion), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__GetObjectsVersion::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:clsName", -1, &(a->_TMSServ__GetObjectsVersion::clsName), ""))
		return soap->error;
	if (soap_out_PointerToTMSServ__ArrayOfInt(soap, "TMSServ:idarr", -1, &(a->_TMSServ__GetObjectsVersion::idarr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__GetObjectsVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__GetObjectsVersion(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__GetObjectsVersion * SOAP_FMAC4 soap_in__TMSServ__GetObjectsVersion(struct soap *soap, const char *tag, _TMSServ__GetObjectsVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__GetObjectsVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__GetObjectsVersion, sizeof(_TMSServ__GetObjectsVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__GetObjectsVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__GetObjectsVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_idarr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__GetObjectsVersion::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:clsName", &(a->_TMSServ__GetObjectsVersion::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_idarr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToTMSServ__ArrayOfInt(soap, "TMSServ:idarr", &(a->_TMSServ__GetObjectsVersion::idarr), "TMSServ:ArrayOfInt"))
				{	soap_flag_idarr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__GetObjectsVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__GetObjectsVersion, 0, sizeof(_TMSServ__GetObjectsVersion), 0, soap_copy__TMSServ__GetObjectsVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__GetObjectsVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__GetObjectsVersion);
	if (this->soap_out(soap, tag?tag:"TMSServ:GetObjectsVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__GetObjectsVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__GetObjectsVersion(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__GetObjectsVersion * SOAP_FMAC4 soap_get__TMSServ__GetObjectsVersion(struct soap *soap, _TMSServ__GetObjectsVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__GetObjectsVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__GetObjectsVersion * SOAP_FMAC2 soap_instantiate__TMSServ__GetObjectsVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__GetObjectsVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__GetObjectsVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__GetObjectsVersion);
		if (size)
			*size = sizeof(_TMSServ__GetObjectsVersion);
		((_TMSServ__GetObjectsVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__GetObjectsVersion, n);
		if (size)
			*size = n * sizeof(_TMSServ__GetObjectsVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__GetObjectsVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__GetObjectsVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__GetObjectsVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__GetObjectsVersion %p -> %p\n", q, p));
	*(_TMSServ__GetObjectsVersion*)p = *(_TMSServ__GetObjectsVersion*)q;
}

void _TMSServ__DownloadObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_TMSServ__DownloadObjectsResponse::DownloadObjectsResult = NULL;
	/* transient soap skipped */
}

void _TMSServ__DownloadObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__DownloadObjectsResponse::DownloadObjectsResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__DownloadObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__DownloadObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__DownloadObjectsResponse(struct soap *soap, const char *tag, int id, const _TMSServ__DownloadObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__DownloadObjectsResponse), type))
		return soap->error;
	if (a->DownloadObjectsResult)
		soap_element_result(soap, "TMSServ:DownloadObjectsResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:DownloadObjectsResult", -1, &(a->_TMSServ__DownloadObjectsResponse::DownloadObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__DownloadObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__DownloadObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__DownloadObjectsResponse * SOAP_FMAC4 soap_in__TMSServ__DownloadObjectsResponse(struct soap *soap, const char *tag, _TMSServ__DownloadObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__DownloadObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__DownloadObjectsResponse, sizeof(_TMSServ__DownloadObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__DownloadObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__DownloadObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DownloadObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadObjectsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:DownloadObjectsResult", &(a->_TMSServ__DownloadObjectsResponse::DownloadObjectsResult), "xsd:base64Binary"))
				{	soap_flag_DownloadObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:DownloadObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__DownloadObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__DownloadObjectsResponse, 0, sizeof(_TMSServ__DownloadObjectsResponse), 0, soap_copy__TMSServ__DownloadObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__DownloadObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__DownloadObjectsResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:DownloadObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__DownloadObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__DownloadObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__DownloadObjectsResponse * SOAP_FMAC4 soap_get__TMSServ__DownloadObjectsResponse(struct soap *soap, _TMSServ__DownloadObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__DownloadObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__DownloadObjectsResponse * SOAP_FMAC2 soap_instantiate__TMSServ__DownloadObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__DownloadObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__DownloadObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__DownloadObjectsResponse);
		if (size)
			*size = sizeof(_TMSServ__DownloadObjectsResponse);
		((_TMSServ__DownloadObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__DownloadObjectsResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__DownloadObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__DownloadObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__DownloadObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__DownloadObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__DownloadObjectsResponse %p -> %p\n", q, p));
	*(_TMSServ__DownloadObjectsResponse*)p = *(_TMSServ__DownloadObjectsResponse*)q;
}

void _TMSServ__DownloadObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__DownloadObjects::sessionId);
	soap_default_string(soap, &this->_TMSServ__DownloadObjects::clsName);
	this->_TMSServ__DownloadObjects::idarr = NULL;
	soap_default_unsignedInt(soap, &this->_TMSServ__DownloadObjects::serialize);
	/* transient soap skipped */
}

void _TMSServ__DownloadObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__DownloadObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_TMSServ__DownloadObjects::clsName);
	soap_serialize_PointerToTMSServ__ArrayOfInt(soap, &this->_TMSServ__DownloadObjects::idarr);
	soap_embedded(soap, &this->_TMSServ__DownloadObjects::serialize, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
#endif
}

int _TMSServ__DownloadObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__DownloadObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__DownloadObjects(struct soap *soap, const char *tag, int id, const _TMSServ__DownloadObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__DownloadObjects), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__DownloadObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:clsName", -1, &(a->_TMSServ__DownloadObjects::clsName), ""))
		return soap->error;
	if (soap_out_PointerToTMSServ__ArrayOfInt(soap, "TMSServ:idarr", -1, &(a->_TMSServ__DownloadObjects::idarr), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "TMSServ:serialize", -1, &(a->_TMSServ__DownloadObjects::serialize), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__DownloadObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__DownloadObjects(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__DownloadObjects * SOAP_FMAC4 soap_in__TMSServ__DownloadObjects(struct soap *soap, const char *tag, _TMSServ__DownloadObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__DownloadObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__DownloadObjects, sizeof(_TMSServ__DownloadObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__DownloadObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__DownloadObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_idarr1 = 1;
	size_t soap_flag_serialize1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__DownloadObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:clsName", &(a->_TMSServ__DownloadObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_idarr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToTMSServ__ArrayOfInt(soap, "TMSServ:idarr", &(a->_TMSServ__DownloadObjects::idarr), "TMSServ:ArrayOfInt"))
				{	soap_flag_idarr1--;
					continue;
				}
			if (soap_flag_serialize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "TMSServ:serialize", &(a->_TMSServ__DownloadObjects::serialize), "xsd:unsignedInt"))
				{	soap_flag_serialize1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__DownloadObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__DownloadObjects, 0, sizeof(_TMSServ__DownloadObjects), 0, soap_copy__TMSServ__DownloadObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_serialize1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__DownloadObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__DownloadObjects);
	if (this->soap_out(soap, tag?tag:"TMSServ:DownloadObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__DownloadObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__DownloadObjects(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__DownloadObjects * SOAP_FMAC4 soap_get__TMSServ__DownloadObjects(struct soap *soap, _TMSServ__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__DownloadObjects * SOAP_FMAC2 soap_instantiate__TMSServ__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__DownloadObjects);
		if (size)
			*size = sizeof(_TMSServ__DownloadObjects);
		((_TMSServ__DownloadObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__DownloadObjects, n);
		if (size)
			*size = n * sizeof(_TMSServ__DownloadObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__DownloadObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__DownloadObjects %p -> %p\n", q, p));
	*(_TMSServ__DownloadObjects*)p = *(_TMSServ__DownloadObjects*)q;
}

void _TMSServ__QueryObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_TMSServ__QueryObjectsResponse::QueryObjectsResult = NULL;
	/* transient soap skipped */
}

void _TMSServ__QueryObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__QueryObjectsResponse::QueryObjectsResult);
	/* transient soap skipped */
#endif
}

int _TMSServ__QueryObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__QueryObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__QueryObjectsResponse(struct soap *soap, const char *tag, int id, const _TMSServ__QueryObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__QueryObjectsResponse), type))
		return soap->error;
	if (a->QueryObjectsResult)
		soap_element_result(soap, "TMSServ:QueryObjectsResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:QueryObjectsResult", -1, &(a->_TMSServ__QueryObjectsResponse::QueryObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__QueryObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__QueryObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__QueryObjectsResponse * SOAP_FMAC4 soap_in__TMSServ__QueryObjectsResponse(struct soap *soap, const char *tag, _TMSServ__QueryObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__QueryObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__QueryObjectsResponse, sizeof(_TMSServ__QueryObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__QueryObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__QueryObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_QueryObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_QueryObjectsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:QueryObjectsResult", &(a->_TMSServ__QueryObjectsResponse::QueryObjectsResult), "xsd:base64Binary"))
				{	soap_flag_QueryObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:QueryObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__QueryObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__QueryObjectsResponse, 0, sizeof(_TMSServ__QueryObjectsResponse), 0, soap_copy__TMSServ__QueryObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__QueryObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__QueryObjectsResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:QueryObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__QueryObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__QueryObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__QueryObjectsResponse * SOAP_FMAC4 soap_get__TMSServ__QueryObjectsResponse(struct soap *soap, _TMSServ__QueryObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__QueryObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__QueryObjectsResponse * SOAP_FMAC2 soap_instantiate__TMSServ__QueryObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__QueryObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__QueryObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__QueryObjectsResponse);
		if (size)
			*size = sizeof(_TMSServ__QueryObjectsResponse);
		((_TMSServ__QueryObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__QueryObjectsResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__QueryObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__QueryObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__QueryObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__QueryObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__QueryObjectsResponse %p -> %p\n", q, p));
	*(_TMSServ__QueryObjectsResponse*)p = *(_TMSServ__QueryObjectsResponse*)q;
}

void _TMSServ__QueryObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__QueryObjects::sessionId);
	soap_default_string(soap, &this->_TMSServ__QueryObjects::clsName);
	soap_default_string(soap, &this->_TMSServ__QueryObjects::xmlScope);
	/* transient soap skipped */
}

void _TMSServ__QueryObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__QueryObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_TMSServ__QueryObjects::clsName);
	soap_serialize_string(soap, &this->_TMSServ__QueryObjects::xmlScope);
	/* transient soap skipped */
#endif
}

int _TMSServ__QueryObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__QueryObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__QueryObjects(struct soap *soap, const char *tag, int id, const _TMSServ__QueryObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__QueryObjects), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__QueryObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:clsName", -1, &(a->_TMSServ__QueryObjects::clsName), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:xmlScope", -1, &(a->_TMSServ__QueryObjects::xmlScope), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__QueryObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__QueryObjects(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__QueryObjects * SOAP_FMAC4 soap_in__TMSServ__QueryObjects(struct soap *soap, const char *tag, _TMSServ__QueryObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__QueryObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__QueryObjects, sizeof(_TMSServ__QueryObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__QueryObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__QueryObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_xmlScope1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__QueryObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:clsName", &(a->_TMSServ__QueryObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_xmlScope1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:xmlScope", &(a->_TMSServ__QueryObjects::xmlScope), "xsd:string"))
				{	soap_flag_xmlScope1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__QueryObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__QueryObjects, 0, sizeof(_TMSServ__QueryObjects), 0, soap_copy__TMSServ__QueryObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__QueryObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__QueryObjects);
	if (this->soap_out(soap, tag?tag:"TMSServ:QueryObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__QueryObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__QueryObjects(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__QueryObjects * SOAP_FMAC4 soap_get__TMSServ__QueryObjects(struct soap *soap, _TMSServ__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__QueryObjects * SOAP_FMAC2 soap_instantiate__TMSServ__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__QueryObjects);
		if (size)
			*size = sizeof(_TMSServ__QueryObjects);
		((_TMSServ__QueryObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__QueryObjects, n);
		if (size)
			*size = n * sizeof(_TMSServ__QueryObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__QueryObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__QueryObjects %p -> %p\n", q, p));
	*(_TMSServ__QueryObjects*)p = *(_TMSServ__QueryObjects*)q;
}

void _TMSServ__logoutUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__logoutUserResponse::logoutUserResult);
	/* transient soap skipped */
}

void _TMSServ__logoutUserResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__logoutUserResponse::logoutUserResult, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__logoutUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__logoutUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__logoutUserResponse(struct soap *soap, const char *tag, int id, const _TMSServ__logoutUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__logoutUserResponse), type))
		return soap->error;
	soap_element_result(soap, "TMSServ:logoutUserResult");
	if (soap_out_int(soap, "TMSServ:logoutUserResult", -1, &(a->_TMSServ__logoutUserResponse::logoutUserResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__logoutUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__logoutUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__logoutUserResponse * SOAP_FMAC4 soap_in__TMSServ__logoutUserResponse(struct soap *soap, const char *tag, _TMSServ__logoutUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__logoutUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__logoutUserResponse, sizeof(_TMSServ__logoutUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__logoutUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__logoutUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_logoutUserResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_logoutUserResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:logoutUserResult", &(a->_TMSServ__logoutUserResponse::logoutUserResult), "xsd:int"))
				{	soap_flag_logoutUserResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:logoutUserResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__logoutUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__logoutUserResponse, 0, sizeof(_TMSServ__logoutUserResponse), 0, soap_copy__TMSServ__logoutUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logoutUserResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__logoutUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__logoutUserResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:logoutUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__logoutUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__logoutUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__logoutUserResponse * SOAP_FMAC4 soap_get__TMSServ__logoutUserResponse(struct soap *soap, _TMSServ__logoutUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__logoutUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__logoutUserResponse * SOAP_FMAC2 soap_instantiate__TMSServ__logoutUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__logoutUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__logoutUserResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__logoutUserResponse);
		if (size)
			*size = sizeof(_TMSServ__logoutUserResponse);
		((_TMSServ__logoutUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__logoutUserResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__logoutUserResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__logoutUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__logoutUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__logoutUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__logoutUserResponse %p -> %p\n", q, p));
	*(_TMSServ__logoutUserResponse*)p = *(_TMSServ__logoutUserResponse*)q;
}

void _TMSServ__logoutUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__logoutUser::sessionId);
	/* transient soap skipped */
}

void _TMSServ__logoutUser::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__logoutUser::sessionId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__logoutUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__logoutUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__logoutUser(struct soap *soap, const char *tag, int id, const _TMSServ__logoutUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__logoutUser), type))
		return soap->error;
	if (soap_out_int(soap, "TMSServ:sessionId", -1, &(a->_TMSServ__logoutUser::sessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__logoutUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__logoutUser(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__logoutUser * SOAP_FMAC4 soap_in__TMSServ__logoutUser(struct soap *soap, const char *tag, _TMSServ__logoutUser *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__logoutUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__logoutUser, sizeof(_TMSServ__logoutUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__logoutUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__logoutUser *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:sessionId", &(a->_TMSServ__logoutUser::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__logoutUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__logoutUser, 0, sizeof(_TMSServ__logoutUser), 0, soap_copy__TMSServ__logoutUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__logoutUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__logoutUser);
	if (this->soap_out(soap, tag?tag:"TMSServ:logoutUser", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__logoutUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__logoutUser(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__logoutUser * SOAP_FMAC4 soap_get__TMSServ__logoutUser(struct soap *soap, _TMSServ__logoutUser *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__logoutUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__logoutUser * SOAP_FMAC2 soap_instantiate__TMSServ__logoutUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__logoutUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__logoutUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__logoutUser);
		if (size)
			*size = sizeof(_TMSServ__logoutUser);
		((_TMSServ__logoutUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__logoutUser, n);
		if (size)
			*size = n * sizeof(_TMSServ__logoutUser);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__logoutUser*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__logoutUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__logoutUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__logoutUser %p -> %p\n", q, p));
	*(_TMSServ__logoutUser*)p = *(_TMSServ__logoutUser*)q;
}

void _TMSServ__loginUserByByteArrResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__loginUserByByteArrResponse::loginUserByByteArrResult);
	/* transient soap skipped */
}

void _TMSServ__loginUserByByteArrResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__loginUserByByteArrResponse::loginUserByByteArrResult, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__loginUserByByteArrResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__loginUserByByteArrResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__loginUserByByteArrResponse(struct soap *soap, const char *tag, int id, const _TMSServ__loginUserByByteArrResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__loginUserByByteArrResponse), type))
		return soap->error;
	soap_element_result(soap, "TMSServ:loginUserByByteArrResult");
	if (soap_out_int(soap, "TMSServ:loginUserByByteArrResult", -1, &(a->_TMSServ__loginUserByByteArrResponse::loginUserByByteArrResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__loginUserByByteArrResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__loginUserByByteArrResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__loginUserByByteArrResponse * SOAP_FMAC4 soap_in__TMSServ__loginUserByByteArrResponse(struct soap *soap, const char *tag, _TMSServ__loginUserByByteArrResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__loginUserByByteArrResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__loginUserByByteArrResponse, sizeof(_TMSServ__loginUserByByteArrResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__loginUserByByteArrResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__loginUserByByteArrResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_loginUserByByteArrResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_loginUserByByteArrResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:loginUserByByteArrResult", &(a->_TMSServ__loginUserByByteArrResponse::loginUserByByteArrResult), "xsd:int"))
				{	soap_flag_loginUserByByteArrResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:loginUserByByteArrResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__loginUserByByteArrResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__loginUserByByteArrResponse, 0, sizeof(_TMSServ__loginUserByByteArrResponse), 0, soap_copy__TMSServ__loginUserByByteArrResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginUserByByteArrResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__loginUserByByteArrResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__loginUserByByteArrResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:loginUserByByteArrResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__loginUserByByteArrResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__loginUserByByteArrResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__loginUserByByteArrResponse * SOAP_FMAC4 soap_get__TMSServ__loginUserByByteArrResponse(struct soap *soap, _TMSServ__loginUserByByteArrResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__loginUserByByteArrResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__loginUserByByteArrResponse * SOAP_FMAC2 soap_instantiate__TMSServ__loginUserByByteArrResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__loginUserByByteArrResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__loginUserByByteArrResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__loginUserByByteArrResponse);
		if (size)
			*size = sizeof(_TMSServ__loginUserByByteArrResponse);
		((_TMSServ__loginUserByByteArrResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__loginUserByByteArrResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__loginUserByByteArrResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__loginUserByByteArrResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__loginUserByByteArrResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__loginUserByByteArrResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__loginUserByByteArrResponse %p -> %p\n", q, p));
	*(_TMSServ__loginUserByByteArrResponse*)p = *(_TMSServ__loginUserByByteArrResponse*)q;
}

void _TMSServ__loginUserByByteArr::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_TMSServ__loginUserByByteArr::userInfo = NULL;
	/* transient soap skipped */
}

void _TMSServ__loginUserByByteArr::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_TMSServ__loginUserByByteArr::userInfo);
	/* transient soap skipped */
#endif
}

int _TMSServ__loginUserByByteArr::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__loginUserByByteArr(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__loginUserByByteArr(struct soap *soap, const char *tag, int id, const _TMSServ__loginUserByByteArr *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__loginUserByByteArr), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "TMSServ:userInfo", -1, &(a->_TMSServ__loginUserByByteArr::userInfo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__loginUserByByteArr::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__loginUserByByteArr(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__loginUserByByteArr * SOAP_FMAC4 soap_in__TMSServ__loginUserByByteArr(struct soap *soap, const char *tag, _TMSServ__loginUserByByteArr *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__loginUserByByteArr *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__loginUserByByteArr, sizeof(_TMSServ__loginUserByByteArr), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__loginUserByByteArr)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__loginUserByByteArr *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "TMSServ:userInfo", &(a->_TMSServ__loginUserByByteArr::userInfo), "xsd:base64Binary"))
				{	soap_flag_userInfo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__loginUserByByteArr *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__loginUserByByteArr, 0, sizeof(_TMSServ__loginUserByByteArr), 0, soap_copy__TMSServ__loginUserByByteArr);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__loginUserByByteArr::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__loginUserByByteArr);
	if (this->soap_out(soap, tag?tag:"TMSServ:loginUserByByteArr", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__loginUserByByteArr::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__loginUserByByteArr(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__loginUserByByteArr * SOAP_FMAC4 soap_get__TMSServ__loginUserByByteArr(struct soap *soap, _TMSServ__loginUserByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__loginUserByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__loginUserByByteArr * SOAP_FMAC2 soap_instantiate__TMSServ__loginUserByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__loginUserByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__loginUserByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__loginUserByByteArr);
		if (size)
			*size = sizeof(_TMSServ__loginUserByByteArr);
		((_TMSServ__loginUserByByteArr*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__loginUserByByteArr, n);
		if (size)
			*size = n * sizeof(_TMSServ__loginUserByByteArr);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__loginUserByByteArr*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__loginUserByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__loginUserByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__loginUserByByteArr %p -> %p\n", q, p));
	*(_TMSServ__loginUserByByteArr*)p = *(_TMSServ__loginUserByByteArr*)q;
}

void _TMSServ__loginUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_TMSServ__loginUserResponse::loginUserResult);
	/* transient soap skipped */
}

void _TMSServ__loginUserResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_TMSServ__loginUserResponse::loginUserResult, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _TMSServ__loginUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__loginUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__loginUserResponse(struct soap *soap, const char *tag, int id, const _TMSServ__loginUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__loginUserResponse), type))
		return soap->error;
	soap_element_result(soap, "TMSServ:loginUserResult");
	if (soap_out_int(soap, "TMSServ:loginUserResult", -1, &(a->_TMSServ__loginUserResponse::loginUserResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__loginUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__loginUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__loginUserResponse * SOAP_FMAC4 soap_in__TMSServ__loginUserResponse(struct soap *soap, const char *tag, _TMSServ__loginUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__loginUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__loginUserResponse, sizeof(_TMSServ__loginUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__loginUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__loginUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_loginUserResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_loginUserResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "TMSServ:loginUserResult", &(a->_TMSServ__loginUserResponse::loginUserResult), "xsd:int"))
				{	soap_flag_loginUserResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "TMSServ:loginUserResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__loginUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__loginUserResponse, 0, sizeof(_TMSServ__loginUserResponse), 0, soap_copy__TMSServ__loginUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginUserResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _TMSServ__loginUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__loginUserResponse);
	if (this->soap_out(soap, tag?tag:"TMSServ:loginUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__loginUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__loginUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__loginUserResponse * SOAP_FMAC4 soap_get__TMSServ__loginUserResponse(struct soap *soap, _TMSServ__loginUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__loginUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__loginUserResponse * SOAP_FMAC2 soap_instantiate__TMSServ__loginUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__loginUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__loginUserResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__loginUserResponse);
		if (size)
			*size = sizeof(_TMSServ__loginUserResponse);
		((_TMSServ__loginUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__loginUserResponse, n);
		if (size)
			*size = n * sizeof(_TMSServ__loginUserResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__loginUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__loginUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__loginUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__loginUserResponse %p -> %p\n", q, p));
	*(_TMSServ__loginUserResponse*)p = *(_TMSServ__loginUserResponse*)q;
}

void _TMSServ__loginUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_TMSServ__loginUser::userName);
	soap_default_string(soap, &this->_TMSServ__loginUser::password);
	soap_default_string(soap, &this->_TMSServ__loginUser::fingerprint);
	/* transient soap skipped */
}

void _TMSServ__loginUser::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_TMSServ__loginUser::userName);
	soap_serialize_string(soap, &this->_TMSServ__loginUser::password);
	soap_serialize_string(soap, &this->_TMSServ__loginUser::fingerprint);
	/* transient soap skipped */
#endif
}

int _TMSServ__loginUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__TMSServ__loginUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__TMSServ__loginUser(struct soap *soap, const char *tag, int id, const _TMSServ__loginUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__TMSServ__loginUser), type))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:userName", -1, &(a->_TMSServ__loginUser::userName), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:password", -1, &(a->_TMSServ__loginUser::password), ""))
		return soap->error;
	if (soap_out_string(soap, "TMSServ:fingerprint", -1, &(a->_TMSServ__loginUser::fingerprint), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_TMSServ__loginUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__TMSServ__loginUser(soap, tag, this, type);
}

SOAP_FMAC3 _TMSServ__loginUser * SOAP_FMAC4 soap_in__TMSServ__loginUser(struct soap *soap, const char *tag, _TMSServ__loginUser *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_TMSServ__loginUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__TMSServ__loginUser, sizeof(_TMSServ__loginUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__TMSServ__loginUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_TMSServ__loginUser *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_password1 = 1;
	size_t soap_flag_fingerprint1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:userName", &(a->_TMSServ__loginUser::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:password", &(a->_TMSServ__loginUser::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap_flag_fingerprint1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "TMSServ:fingerprint", &(a->_TMSServ__loginUser::fingerprint), "xsd:string"))
				{	soap_flag_fingerprint1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_TMSServ__loginUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__TMSServ__loginUser, 0, sizeof(_TMSServ__loginUser), 0, soap_copy__TMSServ__loginUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _TMSServ__loginUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__TMSServ__loginUser);
	if (this->soap_out(soap, tag?tag:"TMSServ:loginUser", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_TMSServ__loginUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__TMSServ__loginUser(soap, this, tag, type);
}

SOAP_FMAC3 _TMSServ__loginUser * SOAP_FMAC4 soap_get__TMSServ__loginUser(struct soap *soap, _TMSServ__loginUser *p, const char *tag, const char *type)
{
	if ((p = soap_in__TMSServ__loginUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _TMSServ__loginUser * SOAP_FMAC2 soap_instantiate__TMSServ__loginUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__TMSServ__loginUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__TMSServ__loginUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_TMSServ__loginUser);
		if (size)
			*size = sizeof(_TMSServ__loginUser);
		((_TMSServ__loginUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_TMSServ__loginUser, n);
		if (size)
			*size = n * sizeof(_TMSServ__loginUser);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_TMSServ__loginUser*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_TMSServ__loginUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__TMSServ__loginUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _TMSServ__loginUser %p -> %p\n", q, p));
	*(_TMSServ__loginUser*)p = *(_TMSServ__loginUser*)q;
}

void TMSServ__ArrayOfUnsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->TMSServ__ArrayOfUnsignedInt::__sizeunsignedInt = 0;
	this->TMSServ__ArrayOfUnsignedInt::unsignedInt = NULL;
	/* transient soap skipped */
}

void TMSServ__ArrayOfUnsignedInt::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->TMSServ__ArrayOfUnsignedInt::unsignedInt)
	{	int i;
		for (i = 0; i < this->TMSServ__ArrayOfUnsignedInt::__sizeunsignedInt; i++)
		{
			soap_embedded(soap, this->TMSServ__ArrayOfUnsignedInt::unsignedInt + i, SOAP_TYPE_unsignedInt);
		}
	}
	/* transient soap skipped */
#endif
}

int TMSServ__ArrayOfUnsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_TMSServ__ArrayOfUnsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_TMSServ__ArrayOfUnsignedInt(struct soap *soap, const char *tag, int id, const TMSServ__ArrayOfUnsignedInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_TMSServ__ArrayOfUnsignedInt), type))
		return soap->error;
	if (a->TMSServ__ArrayOfUnsignedInt::unsignedInt)
	{	int i;
		for (i = 0; i < a->TMSServ__ArrayOfUnsignedInt::__sizeunsignedInt; i++)
			if (soap_out_unsignedInt(soap, "TMSServ:unsignedInt", -1, a->TMSServ__ArrayOfUnsignedInt::unsignedInt + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *TMSServ__ArrayOfUnsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_TMSServ__ArrayOfUnsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 TMSServ__ArrayOfUnsignedInt * SOAP_FMAC4 soap_in_TMSServ__ArrayOfUnsignedInt(struct soap *soap, const char *tag, TMSServ__ArrayOfUnsignedInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (TMSServ__ArrayOfUnsignedInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_TMSServ__ArrayOfUnsignedInt, sizeof(TMSServ__ArrayOfUnsignedInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_TMSServ__ArrayOfUnsignedInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (TMSServ__ArrayOfUnsignedInt *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_unsignedInt1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "TMSServ:unsignedInt", 1, NULL))
			{	if (a->TMSServ__ArrayOfUnsignedInt::unsignedInt == NULL)
				{	if (soap_blist_unsignedInt1 == NULL)
						soap_blist_unsignedInt1 = soap_new_block(soap);
					a->TMSServ__ArrayOfUnsignedInt::unsignedInt = (unsigned int *)soap_push_block(soap, soap_blist_unsignedInt1, sizeof(unsigned int));
					if (a->TMSServ__ArrayOfUnsignedInt::unsignedInt == NULL)
						return NULL;
					soap_default_unsignedInt(soap, a->TMSServ__ArrayOfUnsignedInt::unsignedInt);
				}
				soap_revert(soap);
				if (soap_in_unsignedInt(soap, "TMSServ:unsignedInt", a->TMSServ__ArrayOfUnsignedInt::unsignedInt, "xsd:unsignedInt"))
				{	a->TMSServ__ArrayOfUnsignedInt::__sizeunsignedInt++;
					a->TMSServ__ArrayOfUnsignedInt::unsignedInt = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->TMSServ__ArrayOfUnsignedInt::unsignedInt)
			soap_pop_block(soap, soap_blist_unsignedInt1);
		if (a->TMSServ__ArrayOfUnsignedInt::__sizeunsignedInt)
			a->TMSServ__ArrayOfUnsignedInt::unsignedInt = (unsigned int *)soap_save_block(soap, soap_blist_unsignedInt1, NULL, 1);
		else
		{	a->TMSServ__ArrayOfUnsignedInt::unsignedInt = NULL;
			if (soap_blist_unsignedInt1)
				soap_end_block(soap, soap_blist_unsignedInt1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (TMSServ__ArrayOfUnsignedInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_TMSServ__ArrayOfUnsignedInt, 0, sizeof(TMSServ__ArrayOfUnsignedInt), 0, soap_copy_TMSServ__ArrayOfUnsignedInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int TMSServ__ArrayOfUnsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_TMSServ__ArrayOfUnsignedInt);
	if (this->soap_out(soap, tag?tag:"TMSServ:ArrayOfUnsignedInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *TMSServ__ArrayOfUnsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_TMSServ__ArrayOfUnsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 TMSServ__ArrayOfUnsignedInt * SOAP_FMAC4 soap_get_TMSServ__ArrayOfUnsignedInt(struct soap *soap, TMSServ__ArrayOfUnsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_TMSServ__ArrayOfUnsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 TMSServ__ArrayOfUnsignedInt * SOAP_FMAC2 soap_instantiate_TMSServ__ArrayOfUnsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_TMSServ__ArrayOfUnsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_TMSServ__ArrayOfUnsignedInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(TMSServ__ArrayOfUnsignedInt);
		if (size)
			*size = sizeof(TMSServ__ArrayOfUnsignedInt);
		((TMSServ__ArrayOfUnsignedInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(TMSServ__ArrayOfUnsignedInt, n);
		if (size)
			*size = n * sizeof(TMSServ__ArrayOfUnsignedInt);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((TMSServ__ArrayOfUnsignedInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (TMSServ__ArrayOfUnsignedInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_TMSServ__ArrayOfUnsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying TMSServ__ArrayOfUnsignedInt %p -> %p\n", q, p));
	*(TMSServ__ArrayOfUnsignedInt*)p = *(TMSServ__ArrayOfUnsignedInt*)q;
}

void TMSServ__ArrayOfInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->TMSServ__ArrayOfInt::__sizeint_ = 0;
	this->TMSServ__ArrayOfInt::int_ = NULL;
	/* transient soap skipped */
}

void TMSServ__ArrayOfInt::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->TMSServ__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < this->TMSServ__ArrayOfInt::__sizeint_; i++)
		{
			soap_embedded(soap, this->TMSServ__ArrayOfInt::int_ + i, SOAP_TYPE_int);
		}
	}
	/* transient soap skipped */
#endif
}

int TMSServ__ArrayOfInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_TMSServ__ArrayOfInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_TMSServ__ArrayOfInt(struct soap *soap, const char *tag, int id, const TMSServ__ArrayOfInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_TMSServ__ArrayOfInt), type))
		return soap->error;
	if (a->TMSServ__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < a->TMSServ__ArrayOfInt::__sizeint_; i++)
			if (soap_out_int(soap, "TMSServ:int", -1, a->TMSServ__ArrayOfInt::int_ + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *TMSServ__ArrayOfInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_TMSServ__ArrayOfInt(soap, tag, this, type);
}

SOAP_FMAC3 TMSServ__ArrayOfInt * SOAP_FMAC4 soap_in_TMSServ__ArrayOfInt(struct soap *soap, const char *tag, TMSServ__ArrayOfInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (TMSServ__ArrayOfInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_TMSServ__ArrayOfInt, sizeof(TMSServ__ArrayOfInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_TMSServ__ArrayOfInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (TMSServ__ArrayOfInt *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_int_1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "TMSServ:int", 1, NULL))
			{	if (a->TMSServ__ArrayOfInt::int_ == NULL)
				{	if (soap_blist_int_1 == NULL)
						soap_blist_int_1 = soap_new_block(soap);
					a->TMSServ__ArrayOfInt::int_ = (int *)soap_push_block(soap, soap_blist_int_1, sizeof(int));
					if (a->TMSServ__ArrayOfInt::int_ == NULL)
						return NULL;
					soap_default_int(soap, a->TMSServ__ArrayOfInt::int_);
				}
				soap_revert(soap);
				if (soap_in_int(soap, "TMSServ:int", a->TMSServ__ArrayOfInt::int_, "xsd:int"))
				{	a->TMSServ__ArrayOfInt::__sizeint_++;
					a->TMSServ__ArrayOfInt::int_ = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->TMSServ__ArrayOfInt::int_)
			soap_pop_block(soap, soap_blist_int_1);
		if (a->TMSServ__ArrayOfInt::__sizeint_)
			a->TMSServ__ArrayOfInt::int_ = (int *)soap_save_block(soap, soap_blist_int_1, NULL, 1);
		else
		{	a->TMSServ__ArrayOfInt::int_ = NULL;
			if (soap_blist_int_1)
				soap_end_block(soap, soap_blist_int_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (TMSServ__ArrayOfInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_TMSServ__ArrayOfInt, 0, sizeof(TMSServ__ArrayOfInt), 0, soap_copy_TMSServ__ArrayOfInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int TMSServ__ArrayOfInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_TMSServ__ArrayOfInt);
	if (this->soap_out(soap, tag?tag:"TMSServ:ArrayOfInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *TMSServ__ArrayOfInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_TMSServ__ArrayOfInt(soap, this, tag, type);
}

SOAP_FMAC3 TMSServ__ArrayOfInt * SOAP_FMAC4 soap_get_TMSServ__ArrayOfInt(struct soap *soap, TMSServ__ArrayOfInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_TMSServ__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 TMSServ__ArrayOfInt * SOAP_FMAC2 soap_instantiate_TMSServ__ArrayOfInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_TMSServ__ArrayOfInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_TMSServ__ArrayOfInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(TMSServ__ArrayOfInt);
		if (size)
			*size = sizeof(TMSServ__ArrayOfInt);
		((TMSServ__ArrayOfInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(TMSServ__ArrayOfInt, n);
		if (size)
			*size = n * sizeof(TMSServ__ArrayOfInt);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((TMSServ__ArrayOfInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (TMSServ__ArrayOfInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_TMSServ__ArrayOfInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying TMSServ__ArrayOfInt %p -> %p\n", q, p));
	*(TMSServ__ArrayOfInt*)p = *(TMSServ__ArrayOfInt*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__SaveOrUpdateObjects(struct soap *soap, struct __VersionServ3__SaveOrUpdateObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__SaveOrUpdateObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__SaveOrUpdateObjects(struct soap *soap, const struct __VersionServ3__SaveOrUpdateObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__SaveOrUpdateObjects(soap, &a->VersionServ__SaveOrUpdateObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const struct __VersionServ3__SaveOrUpdateObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__SaveOrUpdateObjects(soap, "VersionServ:SaveOrUpdateObjects", -1, &a->VersionServ__SaveOrUpdateObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__SaveOrUpdateObjects * SOAP_FMAC4 soap_in___VersionServ3__SaveOrUpdateObjects(struct soap *soap, const char *tag, struct __VersionServ3__SaveOrUpdateObjects *a, const char *type)
{
	size_t soap_flag_VersionServ__SaveOrUpdateObjects = 1;
	short soap_flag;
	a = (struct __VersionServ3__SaveOrUpdateObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__SaveOrUpdateObjects, sizeof(struct __VersionServ3__SaveOrUpdateObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__SaveOrUpdateObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__SaveOrUpdateObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__SaveOrUpdateObjects(soap, "VersionServ:SaveOrUpdateObjects", &a->VersionServ__SaveOrUpdateObjects, ""))
				{	soap_flag_VersionServ__SaveOrUpdateObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__SaveOrUpdateObjects(struct soap *soap, const struct __VersionServ3__SaveOrUpdateObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__SaveOrUpdateObjects(soap, tag?tag:"-VersionServ3:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__SaveOrUpdateObjects * SOAP_FMAC4 soap_get___VersionServ3__SaveOrUpdateObjects(struct soap *soap, struct __VersionServ3__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate___VersionServ3__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(struct __VersionServ3__SaveOrUpdateObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__SaveOrUpdateObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(struct __VersionServ3__SaveOrUpdateObjects*)p = *(struct __VersionServ3__SaveOrUpdateObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__DownloadObjects(struct soap *soap, struct __VersionServ3__DownloadObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__DownloadObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__DownloadObjects(struct soap *soap, const struct __VersionServ3__DownloadObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__DownloadObjects(soap, &a->VersionServ__DownloadObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__DownloadObjects(struct soap *soap, const char *tag, int id, const struct __VersionServ3__DownloadObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__DownloadObjects(soap, "VersionServ:DownloadObjects", -1, &a->VersionServ__DownloadObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__DownloadObjects * SOAP_FMAC4 soap_in___VersionServ3__DownloadObjects(struct soap *soap, const char *tag, struct __VersionServ3__DownloadObjects *a, const char *type)
{
	size_t soap_flag_VersionServ__DownloadObjects = 1;
	short soap_flag;
	a = (struct __VersionServ3__DownloadObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__DownloadObjects, sizeof(struct __VersionServ3__DownloadObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__DownloadObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__DownloadObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__DownloadObjects(soap, "VersionServ:DownloadObjects", &a->VersionServ__DownloadObjects, ""))
				{	soap_flag_VersionServ__DownloadObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__DownloadObjects(struct soap *soap, const struct __VersionServ3__DownloadObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__DownloadObjects(soap, tag?tag:"-VersionServ3:DownloadObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__DownloadObjects * SOAP_FMAC4 soap_get___VersionServ3__DownloadObjects(struct soap *soap, struct __VersionServ3__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__DownloadObjects * SOAP_FMAC2 soap_instantiate___VersionServ3__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__DownloadObjects);
		if (size)
			*size = sizeof(struct __VersionServ3__DownloadObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__DownloadObjects, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__DownloadObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__DownloadObjects %p -> %p\n", q, p));
	*(struct __VersionServ3__DownloadObjects*)p = *(struct __VersionServ3__DownloadObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__QueryObjects(struct soap *soap, struct __VersionServ3__QueryObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__QueryObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__QueryObjects(struct soap *soap, const struct __VersionServ3__QueryObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__QueryObjects(soap, &a->VersionServ__QueryObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__QueryObjects(struct soap *soap, const char *tag, int id, const struct __VersionServ3__QueryObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__QueryObjects(soap, "VersionServ:QueryObjects", -1, &a->VersionServ__QueryObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__QueryObjects * SOAP_FMAC4 soap_in___VersionServ3__QueryObjects(struct soap *soap, const char *tag, struct __VersionServ3__QueryObjects *a, const char *type)
{
	size_t soap_flag_VersionServ__QueryObjects = 1;
	short soap_flag;
	a = (struct __VersionServ3__QueryObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__QueryObjects, sizeof(struct __VersionServ3__QueryObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__QueryObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__QueryObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__QueryObjects(soap, "VersionServ:QueryObjects", &a->VersionServ__QueryObjects, ""))
				{	soap_flag_VersionServ__QueryObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__QueryObjects(struct soap *soap, const struct __VersionServ3__QueryObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__QueryObjects(soap, tag?tag:"-VersionServ3:QueryObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__QueryObjects * SOAP_FMAC4 soap_get___VersionServ3__QueryObjects(struct soap *soap, struct __VersionServ3__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__QueryObjects * SOAP_FMAC2 soap_instantiate___VersionServ3__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__QueryObjects);
		if (size)
			*size = sizeof(struct __VersionServ3__QueryObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__QueryObjects, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__QueryObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__QueryObjects %p -> %p\n", q, p));
	*(struct __VersionServ3__QueryObjects*)p = *(struct __VersionServ3__QueryObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__GetFileHeader(struct soap *soap, struct __VersionServ3__GetFileHeader *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__GetFileHeader = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__GetFileHeader(struct soap *soap, const struct __VersionServ3__GetFileHeader *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__GetFileHeader(soap, &a->VersionServ__GetFileHeader);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__GetFileHeader(struct soap *soap, const char *tag, int id, const struct __VersionServ3__GetFileHeader *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__GetFileHeader(soap, "VersionServ:GetFileHeader", -1, &a->VersionServ__GetFileHeader, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__GetFileHeader * SOAP_FMAC4 soap_in___VersionServ3__GetFileHeader(struct soap *soap, const char *tag, struct __VersionServ3__GetFileHeader *a, const char *type)
{
	size_t soap_flag_VersionServ__GetFileHeader = 1;
	short soap_flag;
	a = (struct __VersionServ3__GetFileHeader *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__GetFileHeader, sizeof(struct __VersionServ3__GetFileHeader), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__GetFileHeader(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__GetFileHeader && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__GetFileHeader(soap, "VersionServ:GetFileHeader", &a->VersionServ__GetFileHeader, ""))
				{	soap_flag_VersionServ__GetFileHeader--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__GetFileHeader(struct soap *soap, const struct __VersionServ3__GetFileHeader *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__GetFileHeader(soap, tag?tag:"-VersionServ3:GetFileHeader", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__GetFileHeader * SOAP_FMAC4 soap_get___VersionServ3__GetFileHeader(struct soap *soap, struct __VersionServ3__GetFileHeader *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__GetFileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__GetFileHeader * SOAP_FMAC2 soap_instantiate___VersionServ3__GetFileHeader(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__GetFileHeader(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__GetFileHeader, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__GetFileHeader);
		if (size)
			*size = sizeof(struct __VersionServ3__GetFileHeader);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__GetFileHeader, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__GetFileHeader);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__GetFileHeader*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__GetFileHeader(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__GetFileHeader %p -> %p\n", q, p));
	*(struct __VersionServ3__GetFileHeader*)p = *(struct __VersionServ3__GetFileHeader*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__QueryDownLoadItemArrByProductId(struct soap *soap, struct __VersionServ3__QueryDownLoadItemArrByProductId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__QueryDownLoadItemArrByProductId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__QueryDownLoadItemArrByProductId(struct soap *soap, const struct __VersionServ3__QueryDownLoadItemArrByProductId *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, &a->VersionServ__QueryDownLoadItemArrByProductId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, int id, const struct __VersionServ3__QueryDownLoadItemArrByProductId *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, "VersionServ:QueryDownLoadItemArrByProductId", -1, &a->VersionServ__QueryDownLoadItemArrByProductId, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_in___VersionServ3__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, struct __VersionServ3__QueryDownLoadItemArrByProductId *a, const char *type)
{
	size_t soap_flag_VersionServ__QueryDownLoadItemArrByProductId = 1;
	short soap_flag;
	a = (struct __VersionServ3__QueryDownLoadItemArrByProductId *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__QueryDownLoadItemArrByProductId, sizeof(struct __VersionServ3__QueryDownLoadItemArrByProductId), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__QueryDownLoadItemArrByProductId(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__QueryDownLoadItemArrByProductId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, "VersionServ:QueryDownLoadItemArrByProductId", &a->VersionServ__QueryDownLoadItemArrByProductId, ""))
				{	soap_flag_VersionServ__QueryDownLoadItemArrByProductId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__QueryDownLoadItemArrByProductId(struct soap *soap, const struct __VersionServ3__QueryDownLoadItemArrByProductId *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__QueryDownLoadItemArrByProductId(soap, tag?tag:"-VersionServ3:QueryDownLoadItemArrByProductId", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_get___VersionServ3__QueryDownLoadItemArrByProductId(struct soap *soap, struct __VersionServ3__QueryDownLoadItemArrByProductId *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__QueryDownLoadItemArrByProductId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__QueryDownLoadItemArrByProductId * SOAP_FMAC2 soap_instantiate___VersionServ3__QueryDownLoadItemArrByProductId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__QueryDownLoadItemArrByProductId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__QueryDownLoadItemArrByProductId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__QueryDownLoadItemArrByProductId);
		if (size)
			*size = sizeof(struct __VersionServ3__QueryDownLoadItemArrByProductId);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__QueryDownLoadItemArrByProductId, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__QueryDownLoadItemArrByProductId);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__QueryDownLoadItemArrByProductId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__QueryDownLoadItemArrByProductId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__QueryDownLoadItemArrByProductId %p -> %p\n", q, p));
	*(struct __VersionServ3__QueryDownLoadItemArrByProductId*)p = *(struct __VersionServ3__QueryDownLoadItemArrByProductId*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__GetDogAccessHistory(struct soap *soap, struct __VersionServ3__GetDogAccessHistory *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__GetDogAccessHistory = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__GetDogAccessHistory(struct soap *soap, const struct __VersionServ3__GetDogAccessHistory *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__GetDogAccessHistory(soap, &a->VersionServ__GetDogAccessHistory);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__GetDogAccessHistory(struct soap *soap, const char *tag, int id, const struct __VersionServ3__GetDogAccessHistory *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__GetDogAccessHistory(soap, "VersionServ:GetDogAccessHistory", -1, &a->VersionServ__GetDogAccessHistory, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__GetDogAccessHistory * SOAP_FMAC4 soap_in___VersionServ3__GetDogAccessHistory(struct soap *soap, const char *tag, struct __VersionServ3__GetDogAccessHistory *a, const char *type)
{
	size_t soap_flag_VersionServ__GetDogAccessHistory = 1;
	short soap_flag;
	a = (struct __VersionServ3__GetDogAccessHistory *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__GetDogAccessHistory, sizeof(struct __VersionServ3__GetDogAccessHistory), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__GetDogAccessHistory(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__GetDogAccessHistory && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__GetDogAccessHistory(soap, "VersionServ:GetDogAccessHistory", &a->VersionServ__GetDogAccessHistory, ""))
				{	soap_flag_VersionServ__GetDogAccessHistory--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__GetDogAccessHistory(struct soap *soap, const struct __VersionServ3__GetDogAccessHistory *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__GetDogAccessHistory(soap, tag?tag:"-VersionServ3:GetDogAccessHistory", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__GetDogAccessHistory * SOAP_FMAC4 soap_get___VersionServ3__GetDogAccessHistory(struct soap *soap, struct __VersionServ3__GetDogAccessHistory *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__GetDogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__GetDogAccessHistory * SOAP_FMAC2 soap_instantiate___VersionServ3__GetDogAccessHistory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__GetDogAccessHistory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__GetDogAccessHistory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__GetDogAccessHistory);
		if (size)
			*size = sizeof(struct __VersionServ3__GetDogAccessHistory);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__GetDogAccessHistory, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__GetDogAccessHistory);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__GetDogAccessHistory*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__GetDogAccessHistory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__GetDogAccessHistory %p -> %p\n", q, p));
	*(struct __VersionServ3__GetDogAccessHistory*)p = *(struct __VersionServ3__GetDogAccessHistory*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__GetVersionReleaseNotes(struct soap *soap, struct __VersionServ3__GetVersionReleaseNotes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__GetVersionReleaseNotes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__GetVersionReleaseNotes(struct soap *soap, const struct __VersionServ3__GetVersionReleaseNotes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__GetVersionReleaseNotes(soap, &a->VersionServ__GetVersionReleaseNotes);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__GetVersionReleaseNotes(struct soap *soap, const char *tag, int id, const struct __VersionServ3__GetVersionReleaseNotes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__GetVersionReleaseNotes(soap, "VersionServ:GetVersionReleaseNotes", -1, &a->VersionServ__GetVersionReleaseNotes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__GetVersionReleaseNotes * SOAP_FMAC4 soap_in___VersionServ3__GetVersionReleaseNotes(struct soap *soap, const char *tag, struct __VersionServ3__GetVersionReleaseNotes *a, const char *type)
{
	size_t soap_flag_VersionServ__GetVersionReleaseNotes = 1;
	short soap_flag;
	a = (struct __VersionServ3__GetVersionReleaseNotes *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__GetVersionReleaseNotes, sizeof(struct __VersionServ3__GetVersionReleaseNotes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__GetVersionReleaseNotes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__GetVersionReleaseNotes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__GetVersionReleaseNotes(soap, "VersionServ:GetVersionReleaseNotes", &a->VersionServ__GetVersionReleaseNotes, ""))
				{	soap_flag_VersionServ__GetVersionReleaseNotes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__GetVersionReleaseNotes(struct soap *soap, const struct __VersionServ3__GetVersionReleaseNotes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__GetVersionReleaseNotes(soap, tag?tag:"-VersionServ3:GetVersionReleaseNotes", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__GetVersionReleaseNotes * SOAP_FMAC4 soap_get___VersionServ3__GetVersionReleaseNotes(struct soap *soap, struct __VersionServ3__GetVersionReleaseNotes *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__GetVersionReleaseNotes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__GetVersionReleaseNotes * SOAP_FMAC2 soap_instantiate___VersionServ3__GetVersionReleaseNotes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__GetVersionReleaseNotes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__GetVersionReleaseNotes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__GetVersionReleaseNotes);
		if (size)
			*size = sizeof(struct __VersionServ3__GetVersionReleaseNotes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__GetVersionReleaseNotes, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__GetVersionReleaseNotes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__GetVersionReleaseNotes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__GetVersionReleaseNotes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__GetVersionReleaseNotes %p -> %p\n", q, p));
	*(struct __VersionServ3__GetVersionReleaseNotes*)p = *(struct __VersionServ3__GetVersionReleaseNotes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__CompareVersion(struct soap *soap, struct __VersionServ3__CompareVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__CompareVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__CompareVersion(struct soap *soap, const struct __VersionServ3__CompareVersion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__CompareVersion(soap, &a->VersionServ__CompareVersion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__CompareVersion(struct soap *soap, const char *tag, int id, const struct __VersionServ3__CompareVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__CompareVersion(soap, "VersionServ:CompareVersion", -1, &a->VersionServ__CompareVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__CompareVersion * SOAP_FMAC4 soap_in___VersionServ3__CompareVersion(struct soap *soap, const char *tag, struct __VersionServ3__CompareVersion *a, const char *type)
{
	size_t soap_flag_VersionServ__CompareVersion = 1;
	short soap_flag;
	a = (struct __VersionServ3__CompareVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__CompareVersion, sizeof(struct __VersionServ3__CompareVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__CompareVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__CompareVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__CompareVersion(soap, "VersionServ:CompareVersion", &a->VersionServ__CompareVersion, ""))
				{	soap_flag_VersionServ__CompareVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__CompareVersion(struct soap *soap, const struct __VersionServ3__CompareVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__CompareVersion(soap, tag?tag:"-VersionServ3:CompareVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__CompareVersion * SOAP_FMAC4 soap_get___VersionServ3__CompareVersion(struct soap *soap, struct __VersionServ3__CompareVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__CompareVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__CompareVersion * SOAP_FMAC2 soap_instantiate___VersionServ3__CompareVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__CompareVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__CompareVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__CompareVersion);
		if (size)
			*size = sizeof(struct __VersionServ3__CompareVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__CompareVersion, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__CompareVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__CompareVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__CompareVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__CompareVersion %p -> %p\n", q, p));
	*(struct __VersionServ3__CompareVersion*)p = *(struct __VersionServ3__CompareVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__SetRevisionReadFlag(struct soap *soap, struct __VersionServ3__SetRevisionReadFlag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__SetRevisionReadFlag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__SetRevisionReadFlag(struct soap *soap, const struct __VersionServ3__SetRevisionReadFlag *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__SetRevisionReadFlag(soap, &a->VersionServ__SetRevisionReadFlag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__SetRevisionReadFlag(struct soap *soap, const char *tag, int id, const struct __VersionServ3__SetRevisionReadFlag *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__SetRevisionReadFlag(soap, "VersionServ:SetRevisionReadFlag", -1, &a->VersionServ__SetRevisionReadFlag, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__SetRevisionReadFlag * SOAP_FMAC4 soap_in___VersionServ3__SetRevisionReadFlag(struct soap *soap, const char *tag, struct __VersionServ3__SetRevisionReadFlag *a, const char *type)
{
	size_t soap_flag_VersionServ__SetRevisionReadFlag = 1;
	short soap_flag;
	a = (struct __VersionServ3__SetRevisionReadFlag *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__SetRevisionReadFlag, sizeof(struct __VersionServ3__SetRevisionReadFlag), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__SetRevisionReadFlag(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__SetRevisionReadFlag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__SetRevisionReadFlag(soap, "VersionServ:SetRevisionReadFlag", &a->VersionServ__SetRevisionReadFlag, ""))
				{	soap_flag_VersionServ__SetRevisionReadFlag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__SetRevisionReadFlag(struct soap *soap, const struct __VersionServ3__SetRevisionReadFlag *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__SetRevisionReadFlag(soap, tag?tag:"-VersionServ3:SetRevisionReadFlag", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__SetRevisionReadFlag * SOAP_FMAC4 soap_get___VersionServ3__SetRevisionReadFlag(struct soap *soap, struct __VersionServ3__SetRevisionReadFlag *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__SetRevisionReadFlag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__SetRevisionReadFlag * SOAP_FMAC2 soap_instantiate___VersionServ3__SetRevisionReadFlag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__SetRevisionReadFlag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__SetRevisionReadFlag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__SetRevisionReadFlag);
		if (size)
			*size = sizeof(struct __VersionServ3__SetRevisionReadFlag);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__SetRevisionReadFlag, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__SetRevisionReadFlag);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__SetRevisionReadFlag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__SetRevisionReadFlag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__SetRevisionReadFlag %p -> %p\n", q, p));
	*(struct __VersionServ3__SetRevisionReadFlag*)p = *(struct __VersionServ3__SetRevisionReadFlag*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__GetUpdateVerByCurVer(struct soap *soap, struct __VersionServ3__GetUpdateVerByCurVer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__GetUpdateVerByCurVer = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__GetUpdateVerByCurVer(struct soap *soap, const struct __VersionServ3__GetUpdateVerByCurVer *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, &a->VersionServ__GetUpdateVerByCurVer);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__GetUpdateVerByCurVer(struct soap *soap, const char *tag, int id, const struct __VersionServ3__GetUpdateVerByCurVer *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, "VersionServ:GetUpdateVerByCurVer", -1, &a->VersionServ__GetUpdateVerByCurVer, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__GetUpdateVerByCurVer * SOAP_FMAC4 soap_in___VersionServ3__GetUpdateVerByCurVer(struct soap *soap, const char *tag, struct __VersionServ3__GetUpdateVerByCurVer *a, const char *type)
{
	size_t soap_flag_VersionServ__GetUpdateVerByCurVer = 1;
	short soap_flag;
	a = (struct __VersionServ3__GetUpdateVerByCurVer *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__GetUpdateVerByCurVer, sizeof(struct __VersionServ3__GetUpdateVerByCurVer), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__GetUpdateVerByCurVer(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__GetUpdateVerByCurVer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, "VersionServ:GetUpdateVerByCurVer", &a->VersionServ__GetUpdateVerByCurVer, ""))
				{	soap_flag_VersionServ__GetUpdateVerByCurVer--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__GetUpdateVerByCurVer(struct soap *soap, const struct __VersionServ3__GetUpdateVerByCurVer *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__GetUpdateVerByCurVer(soap, tag?tag:"-VersionServ3:GetUpdateVerByCurVer", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__GetUpdateVerByCurVer * SOAP_FMAC4 soap_get___VersionServ3__GetUpdateVerByCurVer(struct soap *soap, struct __VersionServ3__GetUpdateVerByCurVer *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__GetUpdateVerByCurVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__GetUpdateVerByCurVer * SOAP_FMAC2 soap_instantiate___VersionServ3__GetUpdateVerByCurVer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__GetUpdateVerByCurVer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__GetUpdateVerByCurVer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__GetUpdateVerByCurVer);
		if (size)
			*size = sizeof(struct __VersionServ3__GetUpdateVerByCurVer);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__GetUpdateVerByCurVer, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__GetUpdateVerByCurVer);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__GetUpdateVerByCurVer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__GetUpdateVerByCurVer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__GetUpdateVerByCurVer %p -> %p\n", q, p));
	*(struct __VersionServ3__GetUpdateVerByCurVer*)p = *(struct __VersionServ3__GetUpdateVerByCurVer*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__LoginByByteArr(struct soap *soap, struct __VersionServ3__LoginByByteArr *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__LoginByByteArr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__LoginByByteArr(struct soap *soap, const struct __VersionServ3__LoginByByteArr *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__LoginByByteArr(soap, &a->VersionServ__LoginByByteArr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__LoginByByteArr(struct soap *soap, const char *tag, int id, const struct __VersionServ3__LoginByByteArr *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__LoginByByteArr(soap, "VersionServ:LoginByByteArr", -1, &a->VersionServ__LoginByByteArr, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__LoginByByteArr * SOAP_FMAC4 soap_in___VersionServ3__LoginByByteArr(struct soap *soap, const char *tag, struct __VersionServ3__LoginByByteArr *a, const char *type)
{
	size_t soap_flag_VersionServ__LoginByByteArr = 1;
	short soap_flag;
	a = (struct __VersionServ3__LoginByByteArr *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__LoginByByteArr, sizeof(struct __VersionServ3__LoginByByteArr), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__LoginByByteArr(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__LoginByByteArr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__LoginByByteArr(soap, "VersionServ:LoginByByteArr", &a->VersionServ__LoginByByteArr, ""))
				{	soap_flag_VersionServ__LoginByByteArr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__LoginByByteArr(struct soap *soap, const struct __VersionServ3__LoginByByteArr *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__LoginByByteArr(soap, tag?tag:"-VersionServ3:LoginByByteArr", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__LoginByByteArr * SOAP_FMAC4 soap_get___VersionServ3__LoginByByteArr(struct soap *soap, struct __VersionServ3__LoginByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__LoginByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__LoginByByteArr * SOAP_FMAC2 soap_instantiate___VersionServ3__LoginByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__LoginByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__LoginByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__LoginByByteArr);
		if (size)
			*size = sizeof(struct __VersionServ3__LoginByByteArr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__LoginByByteArr, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__LoginByByteArr);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__LoginByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__LoginByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__LoginByByteArr %p -> %p\n", q, p));
	*(struct __VersionServ3__LoginByByteArr*)p = *(struct __VersionServ3__LoginByByteArr*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ3__Login(struct soap *soap, struct __VersionServ3__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ3__Login(struct soap *soap, const struct __VersionServ3__Login *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__Login(soap, &a->VersionServ__Login);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ3__Login(struct soap *soap, const char *tag, int id, const struct __VersionServ3__Login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__Login(soap, "VersionServ:Login", -1, &a->VersionServ__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__Login * SOAP_FMAC4 soap_in___VersionServ3__Login(struct soap *soap, const char *tag, struct __VersionServ3__Login *a, const char *type)
{
	size_t soap_flag_VersionServ__Login = 1;
	short soap_flag;
	a = (struct __VersionServ3__Login *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ3__Login, sizeof(struct __VersionServ3__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ3__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__Login(soap, "VersionServ:Login", &a->VersionServ__Login, ""))
				{	soap_flag_VersionServ__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ3__Login(struct soap *soap, const struct __VersionServ3__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ3__Login(soap, tag?tag:"-VersionServ3:Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ3__Login * SOAP_FMAC4 soap_get___VersionServ3__Login(struct soap *soap, struct __VersionServ3__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ3__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ3__Login * SOAP_FMAC2 soap_instantiate___VersionServ3__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ3__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ3__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ3__Login);
		if (size)
			*size = sizeof(struct __VersionServ3__Login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ3__Login, n);
		if (size)
			*size = n * sizeof(struct __VersionServ3__Login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ3__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ3__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ3__Login %p -> %p\n", q, p));
	*(struct __VersionServ3__Login*)p = *(struct __VersionServ3__Login*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__SaveOrUpdateObjects(struct soap *soap, struct __VersionServ2__SaveOrUpdateObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__SaveOrUpdateObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__SaveOrUpdateObjects(struct soap *soap, const struct __VersionServ2__SaveOrUpdateObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__SaveOrUpdateObjects(soap, &a->VersionServ__SaveOrUpdateObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const struct __VersionServ2__SaveOrUpdateObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__SaveOrUpdateObjects(soap, "VersionServ:SaveOrUpdateObjects", -1, &a->VersionServ__SaveOrUpdateObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__SaveOrUpdateObjects * SOAP_FMAC4 soap_in___VersionServ2__SaveOrUpdateObjects(struct soap *soap, const char *tag, struct __VersionServ2__SaveOrUpdateObjects *a, const char *type)
{
	size_t soap_flag_VersionServ__SaveOrUpdateObjects = 1;
	short soap_flag;
	a = (struct __VersionServ2__SaveOrUpdateObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__SaveOrUpdateObjects, sizeof(struct __VersionServ2__SaveOrUpdateObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__SaveOrUpdateObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__SaveOrUpdateObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__SaveOrUpdateObjects(soap, "VersionServ:SaveOrUpdateObjects", &a->VersionServ__SaveOrUpdateObjects, ""))
				{	soap_flag_VersionServ__SaveOrUpdateObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__SaveOrUpdateObjects(struct soap *soap, const struct __VersionServ2__SaveOrUpdateObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__SaveOrUpdateObjects(soap, tag?tag:"-VersionServ2:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__SaveOrUpdateObjects * SOAP_FMAC4 soap_get___VersionServ2__SaveOrUpdateObjects(struct soap *soap, struct __VersionServ2__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate___VersionServ2__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(struct __VersionServ2__SaveOrUpdateObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__SaveOrUpdateObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(struct __VersionServ2__SaveOrUpdateObjects*)p = *(struct __VersionServ2__SaveOrUpdateObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__DownloadObjects(struct soap *soap, struct __VersionServ2__DownloadObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__DownloadObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__DownloadObjects(struct soap *soap, const struct __VersionServ2__DownloadObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__DownloadObjects(soap, &a->VersionServ__DownloadObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__DownloadObjects(struct soap *soap, const char *tag, int id, const struct __VersionServ2__DownloadObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__DownloadObjects(soap, "VersionServ:DownloadObjects", -1, &a->VersionServ__DownloadObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__DownloadObjects * SOAP_FMAC4 soap_in___VersionServ2__DownloadObjects(struct soap *soap, const char *tag, struct __VersionServ2__DownloadObjects *a, const char *type)
{
	size_t soap_flag_VersionServ__DownloadObjects = 1;
	short soap_flag;
	a = (struct __VersionServ2__DownloadObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__DownloadObjects, sizeof(struct __VersionServ2__DownloadObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__DownloadObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__DownloadObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__DownloadObjects(soap, "VersionServ:DownloadObjects", &a->VersionServ__DownloadObjects, ""))
				{	soap_flag_VersionServ__DownloadObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__DownloadObjects(struct soap *soap, const struct __VersionServ2__DownloadObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__DownloadObjects(soap, tag?tag:"-VersionServ2:DownloadObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__DownloadObjects * SOAP_FMAC4 soap_get___VersionServ2__DownloadObjects(struct soap *soap, struct __VersionServ2__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__DownloadObjects * SOAP_FMAC2 soap_instantiate___VersionServ2__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__DownloadObjects);
		if (size)
			*size = sizeof(struct __VersionServ2__DownloadObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__DownloadObjects, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__DownloadObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__DownloadObjects %p -> %p\n", q, p));
	*(struct __VersionServ2__DownloadObjects*)p = *(struct __VersionServ2__DownloadObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__QueryObjects(struct soap *soap, struct __VersionServ2__QueryObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__QueryObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__QueryObjects(struct soap *soap, const struct __VersionServ2__QueryObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__QueryObjects(soap, &a->VersionServ__QueryObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__QueryObjects(struct soap *soap, const char *tag, int id, const struct __VersionServ2__QueryObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__QueryObjects(soap, "VersionServ:QueryObjects", -1, &a->VersionServ__QueryObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__QueryObjects * SOAP_FMAC4 soap_in___VersionServ2__QueryObjects(struct soap *soap, const char *tag, struct __VersionServ2__QueryObjects *a, const char *type)
{
	size_t soap_flag_VersionServ__QueryObjects = 1;
	short soap_flag;
	a = (struct __VersionServ2__QueryObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__QueryObjects, sizeof(struct __VersionServ2__QueryObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__QueryObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__QueryObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__QueryObjects(soap, "VersionServ:QueryObjects", &a->VersionServ__QueryObjects, ""))
				{	soap_flag_VersionServ__QueryObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__QueryObjects(struct soap *soap, const struct __VersionServ2__QueryObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__QueryObjects(soap, tag?tag:"-VersionServ2:QueryObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__QueryObjects * SOAP_FMAC4 soap_get___VersionServ2__QueryObjects(struct soap *soap, struct __VersionServ2__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__QueryObjects * SOAP_FMAC2 soap_instantiate___VersionServ2__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__QueryObjects);
		if (size)
			*size = sizeof(struct __VersionServ2__QueryObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__QueryObjects, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__QueryObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__QueryObjects %p -> %p\n", q, p));
	*(struct __VersionServ2__QueryObjects*)p = *(struct __VersionServ2__QueryObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__GetFileHeader(struct soap *soap, struct __VersionServ2__GetFileHeader *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__GetFileHeader = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__GetFileHeader(struct soap *soap, const struct __VersionServ2__GetFileHeader *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__GetFileHeader(soap, &a->VersionServ__GetFileHeader);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__GetFileHeader(struct soap *soap, const char *tag, int id, const struct __VersionServ2__GetFileHeader *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__GetFileHeader(soap, "VersionServ:GetFileHeader", -1, &a->VersionServ__GetFileHeader, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__GetFileHeader * SOAP_FMAC4 soap_in___VersionServ2__GetFileHeader(struct soap *soap, const char *tag, struct __VersionServ2__GetFileHeader *a, const char *type)
{
	size_t soap_flag_VersionServ__GetFileHeader = 1;
	short soap_flag;
	a = (struct __VersionServ2__GetFileHeader *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__GetFileHeader, sizeof(struct __VersionServ2__GetFileHeader), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__GetFileHeader(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__GetFileHeader && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__GetFileHeader(soap, "VersionServ:GetFileHeader", &a->VersionServ__GetFileHeader, ""))
				{	soap_flag_VersionServ__GetFileHeader--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__GetFileHeader(struct soap *soap, const struct __VersionServ2__GetFileHeader *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__GetFileHeader(soap, tag?tag:"-VersionServ2:GetFileHeader", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__GetFileHeader * SOAP_FMAC4 soap_get___VersionServ2__GetFileHeader(struct soap *soap, struct __VersionServ2__GetFileHeader *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__GetFileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__GetFileHeader * SOAP_FMAC2 soap_instantiate___VersionServ2__GetFileHeader(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__GetFileHeader(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__GetFileHeader, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__GetFileHeader);
		if (size)
			*size = sizeof(struct __VersionServ2__GetFileHeader);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__GetFileHeader, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__GetFileHeader);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__GetFileHeader*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__GetFileHeader(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__GetFileHeader %p -> %p\n", q, p));
	*(struct __VersionServ2__GetFileHeader*)p = *(struct __VersionServ2__GetFileHeader*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__QueryDownLoadItemArrByProductId(struct soap *soap, struct __VersionServ2__QueryDownLoadItemArrByProductId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__QueryDownLoadItemArrByProductId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__QueryDownLoadItemArrByProductId(struct soap *soap, const struct __VersionServ2__QueryDownLoadItemArrByProductId *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, &a->VersionServ__QueryDownLoadItemArrByProductId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, int id, const struct __VersionServ2__QueryDownLoadItemArrByProductId *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, "VersionServ:QueryDownLoadItemArrByProductId", -1, &a->VersionServ__QueryDownLoadItemArrByProductId, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_in___VersionServ2__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, struct __VersionServ2__QueryDownLoadItemArrByProductId *a, const char *type)
{
	size_t soap_flag_VersionServ__QueryDownLoadItemArrByProductId = 1;
	short soap_flag;
	a = (struct __VersionServ2__QueryDownLoadItemArrByProductId *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__QueryDownLoadItemArrByProductId, sizeof(struct __VersionServ2__QueryDownLoadItemArrByProductId), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__QueryDownLoadItemArrByProductId(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__QueryDownLoadItemArrByProductId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, "VersionServ:QueryDownLoadItemArrByProductId", &a->VersionServ__QueryDownLoadItemArrByProductId, ""))
				{	soap_flag_VersionServ__QueryDownLoadItemArrByProductId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__QueryDownLoadItemArrByProductId(struct soap *soap, const struct __VersionServ2__QueryDownLoadItemArrByProductId *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__QueryDownLoadItemArrByProductId(soap, tag?tag:"-VersionServ2:QueryDownLoadItemArrByProductId", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_get___VersionServ2__QueryDownLoadItemArrByProductId(struct soap *soap, struct __VersionServ2__QueryDownLoadItemArrByProductId *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__QueryDownLoadItemArrByProductId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__QueryDownLoadItemArrByProductId * SOAP_FMAC2 soap_instantiate___VersionServ2__QueryDownLoadItemArrByProductId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__QueryDownLoadItemArrByProductId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__QueryDownLoadItemArrByProductId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__QueryDownLoadItemArrByProductId);
		if (size)
			*size = sizeof(struct __VersionServ2__QueryDownLoadItemArrByProductId);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__QueryDownLoadItemArrByProductId, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__QueryDownLoadItemArrByProductId);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__QueryDownLoadItemArrByProductId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__QueryDownLoadItemArrByProductId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__QueryDownLoadItemArrByProductId %p -> %p\n", q, p));
	*(struct __VersionServ2__QueryDownLoadItemArrByProductId*)p = *(struct __VersionServ2__QueryDownLoadItemArrByProductId*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__GetDogAccessHistory(struct soap *soap, struct __VersionServ2__GetDogAccessHistory *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__GetDogAccessHistory = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__GetDogAccessHistory(struct soap *soap, const struct __VersionServ2__GetDogAccessHistory *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__GetDogAccessHistory(soap, &a->VersionServ__GetDogAccessHistory);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__GetDogAccessHistory(struct soap *soap, const char *tag, int id, const struct __VersionServ2__GetDogAccessHistory *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__GetDogAccessHistory(soap, "VersionServ:GetDogAccessHistory", -1, &a->VersionServ__GetDogAccessHistory, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__GetDogAccessHistory * SOAP_FMAC4 soap_in___VersionServ2__GetDogAccessHistory(struct soap *soap, const char *tag, struct __VersionServ2__GetDogAccessHistory *a, const char *type)
{
	size_t soap_flag_VersionServ__GetDogAccessHistory = 1;
	short soap_flag;
	a = (struct __VersionServ2__GetDogAccessHistory *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__GetDogAccessHistory, sizeof(struct __VersionServ2__GetDogAccessHistory), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__GetDogAccessHistory(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__GetDogAccessHistory && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__GetDogAccessHistory(soap, "VersionServ:GetDogAccessHistory", &a->VersionServ__GetDogAccessHistory, ""))
				{	soap_flag_VersionServ__GetDogAccessHistory--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__GetDogAccessHistory(struct soap *soap, const struct __VersionServ2__GetDogAccessHistory *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__GetDogAccessHistory(soap, tag?tag:"-VersionServ2:GetDogAccessHistory", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__GetDogAccessHistory * SOAP_FMAC4 soap_get___VersionServ2__GetDogAccessHistory(struct soap *soap, struct __VersionServ2__GetDogAccessHistory *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__GetDogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__GetDogAccessHistory * SOAP_FMAC2 soap_instantiate___VersionServ2__GetDogAccessHistory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__GetDogAccessHistory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__GetDogAccessHistory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__GetDogAccessHistory);
		if (size)
			*size = sizeof(struct __VersionServ2__GetDogAccessHistory);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__GetDogAccessHistory, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__GetDogAccessHistory);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__GetDogAccessHistory*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__GetDogAccessHistory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__GetDogAccessHistory %p -> %p\n", q, p));
	*(struct __VersionServ2__GetDogAccessHistory*)p = *(struct __VersionServ2__GetDogAccessHistory*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__GetVersionReleaseNotes(struct soap *soap, struct __VersionServ2__GetVersionReleaseNotes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__GetVersionReleaseNotes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__GetVersionReleaseNotes(struct soap *soap, const struct __VersionServ2__GetVersionReleaseNotes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__GetVersionReleaseNotes(soap, &a->VersionServ__GetVersionReleaseNotes);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__GetVersionReleaseNotes(struct soap *soap, const char *tag, int id, const struct __VersionServ2__GetVersionReleaseNotes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__GetVersionReleaseNotes(soap, "VersionServ:GetVersionReleaseNotes", -1, &a->VersionServ__GetVersionReleaseNotes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__GetVersionReleaseNotes * SOAP_FMAC4 soap_in___VersionServ2__GetVersionReleaseNotes(struct soap *soap, const char *tag, struct __VersionServ2__GetVersionReleaseNotes *a, const char *type)
{
	size_t soap_flag_VersionServ__GetVersionReleaseNotes = 1;
	short soap_flag;
	a = (struct __VersionServ2__GetVersionReleaseNotes *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__GetVersionReleaseNotes, sizeof(struct __VersionServ2__GetVersionReleaseNotes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__GetVersionReleaseNotes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__GetVersionReleaseNotes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__GetVersionReleaseNotes(soap, "VersionServ:GetVersionReleaseNotes", &a->VersionServ__GetVersionReleaseNotes, ""))
				{	soap_flag_VersionServ__GetVersionReleaseNotes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__GetVersionReleaseNotes(struct soap *soap, const struct __VersionServ2__GetVersionReleaseNotes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__GetVersionReleaseNotes(soap, tag?tag:"-VersionServ2:GetVersionReleaseNotes", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__GetVersionReleaseNotes * SOAP_FMAC4 soap_get___VersionServ2__GetVersionReleaseNotes(struct soap *soap, struct __VersionServ2__GetVersionReleaseNotes *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__GetVersionReleaseNotes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__GetVersionReleaseNotes * SOAP_FMAC2 soap_instantiate___VersionServ2__GetVersionReleaseNotes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__GetVersionReleaseNotes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__GetVersionReleaseNotes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__GetVersionReleaseNotes);
		if (size)
			*size = sizeof(struct __VersionServ2__GetVersionReleaseNotes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__GetVersionReleaseNotes, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__GetVersionReleaseNotes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__GetVersionReleaseNotes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__GetVersionReleaseNotes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__GetVersionReleaseNotes %p -> %p\n", q, p));
	*(struct __VersionServ2__GetVersionReleaseNotes*)p = *(struct __VersionServ2__GetVersionReleaseNotes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__CompareVersion(struct soap *soap, struct __VersionServ2__CompareVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__CompareVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__CompareVersion(struct soap *soap, const struct __VersionServ2__CompareVersion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__CompareVersion(soap, &a->VersionServ__CompareVersion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__CompareVersion(struct soap *soap, const char *tag, int id, const struct __VersionServ2__CompareVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__CompareVersion(soap, "VersionServ:CompareVersion", -1, &a->VersionServ__CompareVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__CompareVersion * SOAP_FMAC4 soap_in___VersionServ2__CompareVersion(struct soap *soap, const char *tag, struct __VersionServ2__CompareVersion *a, const char *type)
{
	size_t soap_flag_VersionServ__CompareVersion = 1;
	short soap_flag;
	a = (struct __VersionServ2__CompareVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__CompareVersion, sizeof(struct __VersionServ2__CompareVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__CompareVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__CompareVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__CompareVersion(soap, "VersionServ:CompareVersion", &a->VersionServ__CompareVersion, ""))
				{	soap_flag_VersionServ__CompareVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__CompareVersion(struct soap *soap, const struct __VersionServ2__CompareVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__CompareVersion(soap, tag?tag:"-VersionServ2:CompareVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__CompareVersion * SOAP_FMAC4 soap_get___VersionServ2__CompareVersion(struct soap *soap, struct __VersionServ2__CompareVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__CompareVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__CompareVersion * SOAP_FMAC2 soap_instantiate___VersionServ2__CompareVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__CompareVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__CompareVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__CompareVersion);
		if (size)
			*size = sizeof(struct __VersionServ2__CompareVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__CompareVersion, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__CompareVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__CompareVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__CompareVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__CompareVersion %p -> %p\n", q, p));
	*(struct __VersionServ2__CompareVersion*)p = *(struct __VersionServ2__CompareVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__SetRevisionReadFlag(struct soap *soap, struct __VersionServ2__SetRevisionReadFlag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__SetRevisionReadFlag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__SetRevisionReadFlag(struct soap *soap, const struct __VersionServ2__SetRevisionReadFlag *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__SetRevisionReadFlag(soap, &a->VersionServ__SetRevisionReadFlag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__SetRevisionReadFlag(struct soap *soap, const char *tag, int id, const struct __VersionServ2__SetRevisionReadFlag *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__SetRevisionReadFlag(soap, "VersionServ:SetRevisionReadFlag", -1, &a->VersionServ__SetRevisionReadFlag, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__SetRevisionReadFlag * SOAP_FMAC4 soap_in___VersionServ2__SetRevisionReadFlag(struct soap *soap, const char *tag, struct __VersionServ2__SetRevisionReadFlag *a, const char *type)
{
	size_t soap_flag_VersionServ__SetRevisionReadFlag = 1;
	short soap_flag;
	a = (struct __VersionServ2__SetRevisionReadFlag *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__SetRevisionReadFlag, sizeof(struct __VersionServ2__SetRevisionReadFlag), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__SetRevisionReadFlag(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__SetRevisionReadFlag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__SetRevisionReadFlag(soap, "VersionServ:SetRevisionReadFlag", &a->VersionServ__SetRevisionReadFlag, ""))
				{	soap_flag_VersionServ__SetRevisionReadFlag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__SetRevisionReadFlag(struct soap *soap, const struct __VersionServ2__SetRevisionReadFlag *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__SetRevisionReadFlag(soap, tag?tag:"-VersionServ2:SetRevisionReadFlag", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__SetRevisionReadFlag * SOAP_FMAC4 soap_get___VersionServ2__SetRevisionReadFlag(struct soap *soap, struct __VersionServ2__SetRevisionReadFlag *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__SetRevisionReadFlag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__SetRevisionReadFlag * SOAP_FMAC2 soap_instantiate___VersionServ2__SetRevisionReadFlag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__SetRevisionReadFlag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__SetRevisionReadFlag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__SetRevisionReadFlag);
		if (size)
			*size = sizeof(struct __VersionServ2__SetRevisionReadFlag);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__SetRevisionReadFlag, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__SetRevisionReadFlag);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__SetRevisionReadFlag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__SetRevisionReadFlag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__SetRevisionReadFlag %p -> %p\n", q, p));
	*(struct __VersionServ2__SetRevisionReadFlag*)p = *(struct __VersionServ2__SetRevisionReadFlag*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__GetUpdateVerByCurVer(struct soap *soap, struct __VersionServ2__GetUpdateVerByCurVer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__GetUpdateVerByCurVer = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__GetUpdateVerByCurVer(struct soap *soap, const struct __VersionServ2__GetUpdateVerByCurVer *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, &a->VersionServ__GetUpdateVerByCurVer);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__GetUpdateVerByCurVer(struct soap *soap, const char *tag, int id, const struct __VersionServ2__GetUpdateVerByCurVer *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, "VersionServ:GetUpdateVerByCurVer", -1, &a->VersionServ__GetUpdateVerByCurVer, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__GetUpdateVerByCurVer * SOAP_FMAC4 soap_in___VersionServ2__GetUpdateVerByCurVer(struct soap *soap, const char *tag, struct __VersionServ2__GetUpdateVerByCurVer *a, const char *type)
{
	size_t soap_flag_VersionServ__GetUpdateVerByCurVer = 1;
	short soap_flag;
	a = (struct __VersionServ2__GetUpdateVerByCurVer *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__GetUpdateVerByCurVer, sizeof(struct __VersionServ2__GetUpdateVerByCurVer), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__GetUpdateVerByCurVer(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__GetUpdateVerByCurVer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, "VersionServ:GetUpdateVerByCurVer", &a->VersionServ__GetUpdateVerByCurVer, ""))
				{	soap_flag_VersionServ__GetUpdateVerByCurVer--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__GetUpdateVerByCurVer(struct soap *soap, const struct __VersionServ2__GetUpdateVerByCurVer *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__GetUpdateVerByCurVer(soap, tag?tag:"-VersionServ2:GetUpdateVerByCurVer", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__GetUpdateVerByCurVer * SOAP_FMAC4 soap_get___VersionServ2__GetUpdateVerByCurVer(struct soap *soap, struct __VersionServ2__GetUpdateVerByCurVer *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__GetUpdateVerByCurVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__GetUpdateVerByCurVer * SOAP_FMAC2 soap_instantiate___VersionServ2__GetUpdateVerByCurVer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__GetUpdateVerByCurVer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__GetUpdateVerByCurVer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__GetUpdateVerByCurVer);
		if (size)
			*size = sizeof(struct __VersionServ2__GetUpdateVerByCurVer);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__GetUpdateVerByCurVer, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__GetUpdateVerByCurVer);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__GetUpdateVerByCurVer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__GetUpdateVerByCurVer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__GetUpdateVerByCurVer %p -> %p\n", q, p));
	*(struct __VersionServ2__GetUpdateVerByCurVer*)p = *(struct __VersionServ2__GetUpdateVerByCurVer*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__LoginByByteArr(struct soap *soap, struct __VersionServ2__LoginByByteArr *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__LoginByByteArr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__LoginByByteArr(struct soap *soap, const struct __VersionServ2__LoginByByteArr *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__LoginByByteArr(soap, &a->VersionServ__LoginByByteArr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__LoginByByteArr(struct soap *soap, const char *tag, int id, const struct __VersionServ2__LoginByByteArr *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__LoginByByteArr(soap, "VersionServ:LoginByByteArr", -1, &a->VersionServ__LoginByByteArr, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__LoginByByteArr * SOAP_FMAC4 soap_in___VersionServ2__LoginByByteArr(struct soap *soap, const char *tag, struct __VersionServ2__LoginByByteArr *a, const char *type)
{
	size_t soap_flag_VersionServ__LoginByByteArr = 1;
	short soap_flag;
	a = (struct __VersionServ2__LoginByByteArr *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__LoginByByteArr, sizeof(struct __VersionServ2__LoginByByteArr), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__LoginByByteArr(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__LoginByByteArr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__LoginByByteArr(soap, "VersionServ:LoginByByteArr", &a->VersionServ__LoginByByteArr, ""))
				{	soap_flag_VersionServ__LoginByByteArr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__LoginByByteArr(struct soap *soap, const struct __VersionServ2__LoginByByteArr *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__LoginByByteArr(soap, tag?tag:"-VersionServ2:LoginByByteArr", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__LoginByByteArr * SOAP_FMAC4 soap_get___VersionServ2__LoginByByteArr(struct soap *soap, struct __VersionServ2__LoginByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__LoginByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__LoginByByteArr * SOAP_FMAC2 soap_instantiate___VersionServ2__LoginByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__LoginByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__LoginByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__LoginByByteArr);
		if (size)
			*size = sizeof(struct __VersionServ2__LoginByByteArr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__LoginByByteArr, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__LoginByByteArr);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__LoginByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__LoginByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__LoginByByteArr %p -> %p\n", q, p));
	*(struct __VersionServ2__LoginByByteArr*)p = *(struct __VersionServ2__LoginByByteArr*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___VersionServ2__Login(struct soap *soap, struct __VersionServ2__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->VersionServ__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___VersionServ2__Login(struct soap *soap, const struct __VersionServ2__Login *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_VersionServ__Login(soap, &a->VersionServ__Login);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___VersionServ2__Login(struct soap *soap, const char *tag, int id, const struct __VersionServ2__Login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_VersionServ__Login(soap, "VersionServ:Login", -1, &a->VersionServ__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__Login * SOAP_FMAC4 soap_in___VersionServ2__Login(struct soap *soap, const char *tag, struct __VersionServ2__Login *a, const char *type)
{
	size_t soap_flag_VersionServ__Login = 1;
	short soap_flag;
	a = (struct __VersionServ2__Login *)soap_id_enter(soap, "", a, SOAP_TYPE___VersionServ2__Login, sizeof(struct __VersionServ2__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___VersionServ2__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VersionServ__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_VersionServ__Login(soap, "VersionServ:Login", &a->VersionServ__Login, ""))
				{	soap_flag_VersionServ__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___VersionServ2__Login(struct soap *soap, const struct __VersionServ2__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___VersionServ2__Login(soap, tag?tag:"-VersionServ2:Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __VersionServ2__Login * SOAP_FMAC4 soap_get___VersionServ2__Login(struct soap *soap, struct __VersionServ2__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___VersionServ2__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __VersionServ2__Login * SOAP_FMAC2 soap_instantiate___VersionServ2__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___VersionServ2__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___VersionServ2__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __VersionServ2__Login);
		if (size)
			*size = sizeof(struct __VersionServ2__Login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __VersionServ2__Login, n);
		if (size)
			*size = n * sizeof(struct __VersionServ2__Login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __VersionServ2__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___VersionServ2__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __VersionServ2__Login %p -> %p\n", q, p));
	*(struct __VersionServ2__Login*)p = *(struct __VersionServ2__Login*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__CloseFileObjectDataProvider(struct soap *soap, struct __TMSServ3__CloseFileObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__CloseFileObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__CloseFileObjectDataProvider(struct soap *soap, const struct __TMSServ3__CloseFileObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, &a->TMSServ__CloseFileObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__CloseFileObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __TMSServ3__CloseFileObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, "TMSServ:CloseFileObjectDataProvider", -1, &a->TMSServ__CloseFileObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__CloseFileObjectDataProvider * SOAP_FMAC4 soap_in___TMSServ3__CloseFileObjectDataProvider(struct soap *soap, const char *tag, struct __TMSServ3__CloseFileObjectDataProvider *a, const char *type)
{
	size_t soap_flag_TMSServ__CloseFileObjectDataProvider = 1;
	short soap_flag;
	a = (struct __TMSServ3__CloseFileObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__CloseFileObjectDataProvider, sizeof(struct __TMSServ3__CloseFileObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__CloseFileObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__CloseFileObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, "TMSServ:CloseFileObjectDataProvider", &a->TMSServ__CloseFileObjectDataProvider, ""))
				{	soap_flag_TMSServ__CloseFileObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__CloseFileObjectDataProvider(struct soap *soap, const struct __TMSServ3__CloseFileObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__CloseFileObjectDataProvider(soap, tag?tag:"-TMSServ3:CloseFileObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__CloseFileObjectDataProvider * SOAP_FMAC4 soap_get___TMSServ3__CloseFileObjectDataProvider(struct soap *soap, struct __TMSServ3__CloseFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__CloseFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__CloseFileObjectDataProvider * SOAP_FMAC2 soap_instantiate___TMSServ3__CloseFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__CloseFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__CloseFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__CloseFileObjectDataProvider);
		if (size)
			*size = sizeof(struct __TMSServ3__CloseFileObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__CloseFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__CloseFileObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__CloseFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__CloseFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__CloseFileObjectDataProvider %p -> %p\n", q, p));
	*(struct __TMSServ3__CloseFileObjectDataProvider*)p = *(struct __TMSServ3__CloseFileObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__DownloadFileObject(struct soap *soap, struct __TMSServ3__DownloadFileObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__DownloadFileObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__DownloadFileObject(struct soap *soap, const struct __TMSServ3__DownloadFileObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__DownloadFileObject(soap, &a->TMSServ__DownloadFileObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__DownloadFileObject(struct soap *soap, const char *tag, int id, const struct __TMSServ3__DownloadFileObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__DownloadFileObject(soap, "TMSServ:DownloadFileObject", -1, &a->TMSServ__DownloadFileObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__DownloadFileObject * SOAP_FMAC4 soap_in___TMSServ3__DownloadFileObject(struct soap *soap, const char *tag, struct __TMSServ3__DownloadFileObject *a, const char *type)
{
	size_t soap_flag_TMSServ__DownloadFileObject = 1;
	short soap_flag;
	a = (struct __TMSServ3__DownloadFileObject *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__DownloadFileObject, sizeof(struct __TMSServ3__DownloadFileObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__DownloadFileObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__DownloadFileObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__DownloadFileObject(soap, "TMSServ:DownloadFileObject", &a->TMSServ__DownloadFileObject, ""))
				{	soap_flag_TMSServ__DownloadFileObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__DownloadFileObject(struct soap *soap, const struct __TMSServ3__DownloadFileObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__DownloadFileObject(soap, tag?tag:"-TMSServ3:DownloadFileObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__DownloadFileObject * SOAP_FMAC4 soap_get___TMSServ3__DownloadFileObject(struct soap *soap, struct __TMSServ3__DownloadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__DownloadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__DownloadFileObject * SOAP_FMAC2 soap_instantiate___TMSServ3__DownloadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__DownloadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__DownloadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__DownloadFileObject);
		if (size)
			*size = sizeof(struct __TMSServ3__DownloadFileObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__DownloadFileObject, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__DownloadFileObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__DownloadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__DownloadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__DownloadFileObject %p -> %p\n", q, p));
	*(struct __TMSServ3__DownloadFileObject*)p = *(struct __TMSServ3__DownloadFileObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__OpenServerObjectDataProvider(struct soap *soap, struct __TMSServ3__OpenServerObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__OpenServerObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__OpenServerObjectDataProvider(struct soap *soap, const struct __TMSServ3__OpenServerObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, &a->TMSServ__OpenServerObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__OpenServerObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __TMSServ3__OpenServerObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, "TMSServ:OpenServerObjectDataProvider", -1, &a->TMSServ__OpenServerObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__OpenServerObjectDataProvider * SOAP_FMAC4 soap_in___TMSServ3__OpenServerObjectDataProvider(struct soap *soap, const char *tag, struct __TMSServ3__OpenServerObjectDataProvider *a, const char *type)
{
	size_t soap_flag_TMSServ__OpenServerObjectDataProvider = 1;
	short soap_flag;
	a = (struct __TMSServ3__OpenServerObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__OpenServerObjectDataProvider, sizeof(struct __TMSServ3__OpenServerObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__OpenServerObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__OpenServerObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, "TMSServ:OpenServerObjectDataProvider", &a->TMSServ__OpenServerObjectDataProvider, ""))
				{	soap_flag_TMSServ__OpenServerObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__OpenServerObjectDataProvider(struct soap *soap, const struct __TMSServ3__OpenServerObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__OpenServerObjectDataProvider(soap, tag?tag:"-TMSServ3:OpenServerObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__OpenServerObjectDataProvider * SOAP_FMAC4 soap_get___TMSServ3__OpenServerObjectDataProvider(struct soap *soap, struct __TMSServ3__OpenServerObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__OpenServerObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__OpenServerObjectDataProvider * SOAP_FMAC2 soap_instantiate___TMSServ3__OpenServerObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__OpenServerObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__OpenServerObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__OpenServerObjectDataProvider);
		if (size)
			*size = sizeof(struct __TMSServ3__OpenServerObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__OpenServerObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__OpenServerObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__OpenServerObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__OpenServerObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__OpenServerObjectDataProvider %p -> %p\n", q, p));
	*(struct __TMSServ3__OpenServerObjectDataProvider*)p = *(struct __TMSServ3__OpenServerObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__OpenTapModelDataProvider(struct soap *soap, struct __TMSServ3__OpenTapModelDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__OpenTapModelDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__OpenTapModelDataProvider(struct soap *soap, const struct __TMSServ3__OpenTapModelDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__OpenTapModelDataProvider(soap, &a->TMSServ__OpenTapModelDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__OpenTapModelDataProvider(struct soap *soap, const char *tag, int id, const struct __TMSServ3__OpenTapModelDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__OpenTapModelDataProvider(soap, "TMSServ:OpenTapModelDataProvider", -1, &a->TMSServ__OpenTapModelDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__OpenTapModelDataProvider * SOAP_FMAC4 soap_in___TMSServ3__OpenTapModelDataProvider(struct soap *soap, const char *tag, struct __TMSServ3__OpenTapModelDataProvider *a, const char *type)
{
	size_t soap_flag_TMSServ__OpenTapModelDataProvider = 1;
	short soap_flag;
	a = (struct __TMSServ3__OpenTapModelDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__OpenTapModelDataProvider, sizeof(struct __TMSServ3__OpenTapModelDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__OpenTapModelDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__OpenTapModelDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__OpenTapModelDataProvider(soap, "TMSServ:OpenTapModelDataProvider", &a->TMSServ__OpenTapModelDataProvider, ""))
				{	soap_flag_TMSServ__OpenTapModelDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__OpenTapModelDataProvider(struct soap *soap, const struct __TMSServ3__OpenTapModelDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__OpenTapModelDataProvider(soap, tag?tag:"-TMSServ3:OpenTapModelDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__OpenTapModelDataProvider * SOAP_FMAC4 soap_get___TMSServ3__OpenTapModelDataProvider(struct soap *soap, struct __TMSServ3__OpenTapModelDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__OpenTapModelDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__OpenTapModelDataProvider * SOAP_FMAC2 soap_instantiate___TMSServ3__OpenTapModelDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__OpenTapModelDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__OpenTapModelDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__OpenTapModelDataProvider);
		if (size)
			*size = sizeof(struct __TMSServ3__OpenTapModelDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__OpenTapModelDataProvider, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__OpenTapModelDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__OpenTapModelDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__OpenTapModelDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__OpenTapModelDataProvider %p -> %p\n", q, p));
	*(struct __TMSServ3__OpenTapModelDataProvider*)p = *(struct __TMSServ3__OpenTapModelDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__OpenFileObjectDataProvider(struct soap *soap, struct __TMSServ3__OpenFileObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__OpenFileObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__OpenFileObjectDataProvider(struct soap *soap, const struct __TMSServ3__OpenFileObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, &a->TMSServ__OpenFileObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__OpenFileObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __TMSServ3__OpenFileObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, "TMSServ:OpenFileObjectDataProvider", -1, &a->TMSServ__OpenFileObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__OpenFileObjectDataProvider * SOAP_FMAC4 soap_in___TMSServ3__OpenFileObjectDataProvider(struct soap *soap, const char *tag, struct __TMSServ3__OpenFileObjectDataProvider *a, const char *type)
{
	size_t soap_flag_TMSServ__OpenFileObjectDataProvider = 1;
	short soap_flag;
	a = (struct __TMSServ3__OpenFileObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__OpenFileObjectDataProvider, sizeof(struct __TMSServ3__OpenFileObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__OpenFileObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__OpenFileObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, "TMSServ:OpenFileObjectDataProvider", &a->TMSServ__OpenFileObjectDataProvider, ""))
				{	soap_flag_TMSServ__OpenFileObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__OpenFileObjectDataProvider(struct soap *soap, const struct __TMSServ3__OpenFileObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__OpenFileObjectDataProvider(soap, tag?tag:"-TMSServ3:OpenFileObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__OpenFileObjectDataProvider * SOAP_FMAC4 soap_get___TMSServ3__OpenFileObjectDataProvider(struct soap *soap, struct __TMSServ3__OpenFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__OpenFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__OpenFileObjectDataProvider * SOAP_FMAC2 soap_instantiate___TMSServ3__OpenFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__OpenFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__OpenFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__OpenFileObjectDataProvider);
		if (size)
			*size = sizeof(struct __TMSServ3__OpenFileObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__OpenFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__OpenFileObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__OpenFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__OpenFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__OpenFileObjectDataProvider %p -> %p\n", q, p));
	*(struct __TMSServ3__OpenFileObjectDataProvider*)p = *(struct __TMSServ3__OpenFileObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__FinalizeFileObjectData(struct soap *soap, struct __TMSServ3__FinalizeFileObjectData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__FinalizeFileObjectData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__FinalizeFileObjectData(struct soap *soap, const struct __TMSServ3__FinalizeFileObjectData *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__FinalizeFileObjectData(soap, &a->TMSServ__FinalizeFileObjectData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__FinalizeFileObjectData(struct soap *soap, const char *tag, int id, const struct __TMSServ3__FinalizeFileObjectData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__FinalizeFileObjectData(soap, "TMSServ:FinalizeFileObjectData", -1, &a->TMSServ__FinalizeFileObjectData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__FinalizeFileObjectData * SOAP_FMAC4 soap_in___TMSServ3__FinalizeFileObjectData(struct soap *soap, const char *tag, struct __TMSServ3__FinalizeFileObjectData *a, const char *type)
{
	size_t soap_flag_TMSServ__FinalizeFileObjectData = 1;
	short soap_flag;
	a = (struct __TMSServ3__FinalizeFileObjectData *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__FinalizeFileObjectData, sizeof(struct __TMSServ3__FinalizeFileObjectData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__FinalizeFileObjectData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__FinalizeFileObjectData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__FinalizeFileObjectData(soap, "TMSServ:FinalizeFileObjectData", &a->TMSServ__FinalizeFileObjectData, ""))
				{	soap_flag_TMSServ__FinalizeFileObjectData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__FinalizeFileObjectData(struct soap *soap, const struct __TMSServ3__FinalizeFileObjectData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__FinalizeFileObjectData(soap, tag?tag:"-TMSServ3:FinalizeFileObjectData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__FinalizeFileObjectData * SOAP_FMAC4 soap_get___TMSServ3__FinalizeFileObjectData(struct soap *soap, struct __TMSServ3__FinalizeFileObjectData *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__FinalizeFileObjectData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__FinalizeFileObjectData * SOAP_FMAC2 soap_instantiate___TMSServ3__FinalizeFileObjectData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__FinalizeFileObjectData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__FinalizeFileObjectData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__FinalizeFileObjectData);
		if (size)
			*size = sizeof(struct __TMSServ3__FinalizeFileObjectData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__FinalizeFileObjectData, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__FinalizeFileObjectData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__FinalizeFileObjectData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__FinalizeFileObjectData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__FinalizeFileObjectData %p -> %p\n", q, p));
	*(struct __TMSServ3__FinalizeFileObjectData*)p = *(struct __TMSServ3__FinalizeFileObjectData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__UploadFileObject(struct soap *soap, struct __TMSServ3__UploadFileObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__UploadFileObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__UploadFileObject(struct soap *soap, const struct __TMSServ3__UploadFileObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__UploadFileObject(soap, &a->TMSServ__UploadFileObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__UploadFileObject(struct soap *soap, const char *tag, int id, const struct __TMSServ3__UploadFileObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__UploadFileObject(soap, "TMSServ:UploadFileObject", -1, &a->TMSServ__UploadFileObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__UploadFileObject * SOAP_FMAC4 soap_in___TMSServ3__UploadFileObject(struct soap *soap, const char *tag, struct __TMSServ3__UploadFileObject *a, const char *type)
{
	size_t soap_flag_TMSServ__UploadFileObject = 1;
	short soap_flag;
	a = (struct __TMSServ3__UploadFileObject *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__UploadFileObject, sizeof(struct __TMSServ3__UploadFileObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__UploadFileObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__UploadFileObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__UploadFileObject(soap, "TMSServ:UploadFileObject", &a->TMSServ__UploadFileObject, ""))
				{	soap_flag_TMSServ__UploadFileObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__UploadFileObject(struct soap *soap, const struct __TMSServ3__UploadFileObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__UploadFileObject(soap, tag?tag:"-TMSServ3:UploadFileObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__UploadFileObject * SOAP_FMAC4 soap_get___TMSServ3__UploadFileObject(struct soap *soap, struct __TMSServ3__UploadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__UploadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__UploadFileObject * SOAP_FMAC2 soap_instantiate___TMSServ3__UploadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__UploadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__UploadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__UploadFileObject);
		if (size)
			*size = sizeof(struct __TMSServ3__UploadFileObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__UploadFileObject, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__UploadFileObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__UploadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__UploadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__UploadFileObject %p -> %p\n", q, p));
	*(struct __TMSServ3__UploadFileObject*)p = *(struct __TMSServ3__UploadFileObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__DownloadFileById(struct soap *soap, struct __TMSServ3__DownloadFileById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__DownloadFileById = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__DownloadFileById(struct soap *soap, const struct __TMSServ3__DownloadFileById *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__DownloadFileById(soap, &a->TMSServ__DownloadFileById);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__DownloadFileById(struct soap *soap, const char *tag, int id, const struct __TMSServ3__DownloadFileById *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__DownloadFileById(soap, "TMSServ:DownloadFileById", -1, &a->TMSServ__DownloadFileById, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__DownloadFileById * SOAP_FMAC4 soap_in___TMSServ3__DownloadFileById(struct soap *soap, const char *tag, struct __TMSServ3__DownloadFileById *a, const char *type)
{
	size_t soap_flag_TMSServ__DownloadFileById = 1;
	short soap_flag;
	a = (struct __TMSServ3__DownloadFileById *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__DownloadFileById, sizeof(struct __TMSServ3__DownloadFileById), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__DownloadFileById(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__DownloadFileById && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__DownloadFileById(soap, "TMSServ:DownloadFileById", &a->TMSServ__DownloadFileById, ""))
				{	soap_flag_TMSServ__DownloadFileById--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__DownloadFileById(struct soap *soap, const struct __TMSServ3__DownloadFileById *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__DownloadFileById(soap, tag?tag:"-TMSServ3:DownloadFileById", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__DownloadFileById * SOAP_FMAC4 soap_get___TMSServ3__DownloadFileById(struct soap *soap, struct __TMSServ3__DownloadFileById *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__DownloadFileById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__DownloadFileById * SOAP_FMAC2 soap_instantiate___TMSServ3__DownloadFileById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__DownloadFileById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__DownloadFileById, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__DownloadFileById);
		if (size)
			*size = sizeof(struct __TMSServ3__DownloadFileById);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__DownloadFileById, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__DownloadFileById);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__DownloadFileById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__DownloadFileById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__DownloadFileById %p -> %p\n", q, p));
	*(struct __TMSServ3__DownloadFileById*)p = *(struct __TMSServ3__DownloadFileById*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__DeleteObject(struct soap *soap, struct __TMSServ3__DeleteObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__DeleteObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__DeleteObject(struct soap *soap, const struct __TMSServ3__DeleteObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__DeleteObject(soap, &a->TMSServ__DeleteObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__DeleteObject(struct soap *soap, const char *tag, int id, const struct __TMSServ3__DeleteObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__DeleteObject(soap, "TMSServ:DeleteObject", -1, &a->TMSServ__DeleteObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__DeleteObject * SOAP_FMAC4 soap_in___TMSServ3__DeleteObject(struct soap *soap, const char *tag, struct __TMSServ3__DeleteObject *a, const char *type)
{
	size_t soap_flag_TMSServ__DeleteObject = 1;
	short soap_flag;
	a = (struct __TMSServ3__DeleteObject *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__DeleteObject, sizeof(struct __TMSServ3__DeleteObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__DeleteObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__DeleteObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__DeleteObject(soap, "TMSServ:DeleteObject", &a->TMSServ__DeleteObject, ""))
				{	soap_flag_TMSServ__DeleteObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__DeleteObject(struct soap *soap, const struct __TMSServ3__DeleteObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__DeleteObject(soap, tag?tag:"-TMSServ3:DeleteObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__DeleteObject * SOAP_FMAC4 soap_get___TMSServ3__DeleteObject(struct soap *soap, struct __TMSServ3__DeleteObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__DeleteObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__DeleteObject * SOAP_FMAC2 soap_instantiate___TMSServ3__DeleteObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__DeleteObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__DeleteObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__DeleteObject);
		if (size)
			*size = sizeof(struct __TMSServ3__DeleteObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__DeleteObject, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__DeleteObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__DeleteObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__DeleteObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__DeleteObject %p -> %p\n", q, p));
	*(struct __TMSServ3__DeleteObject*)p = *(struct __TMSServ3__DeleteObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__SaveOrUpdateObjects(struct soap *soap, struct __TMSServ3__SaveOrUpdateObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__SaveOrUpdateObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__SaveOrUpdateObjects(struct soap *soap, const struct __TMSServ3__SaveOrUpdateObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__SaveOrUpdateObjects(soap, &a->TMSServ__SaveOrUpdateObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const struct __TMSServ3__SaveOrUpdateObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__SaveOrUpdateObjects(soap, "TMSServ:SaveOrUpdateObjects", -1, &a->TMSServ__SaveOrUpdateObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__SaveOrUpdateObjects * SOAP_FMAC4 soap_in___TMSServ3__SaveOrUpdateObjects(struct soap *soap, const char *tag, struct __TMSServ3__SaveOrUpdateObjects *a, const char *type)
{
	size_t soap_flag_TMSServ__SaveOrUpdateObjects = 1;
	short soap_flag;
	a = (struct __TMSServ3__SaveOrUpdateObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__SaveOrUpdateObjects, sizeof(struct __TMSServ3__SaveOrUpdateObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__SaveOrUpdateObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__SaveOrUpdateObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__SaveOrUpdateObjects(soap, "TMSServ:SaveOrUpdateObjects", &a->TMSServ__SaveOrUpdateObjects, ""))
				{	soap_flag_TMSServ__SaveOrUpdateObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__SaveOrUpdateObjects(struct soap *soap, const struct __TMSServ3__SaveOrUpdateObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__SaveOrUpdateObjects(soap, tag?tag:"-TMSServ3:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__SaveOrUpdateObjects * SOAP_FMAC4 soap_get___TMSServ3__SaveOrUpdateObjects(struct soap *soap, struct __TMSServ3__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate___TMSServ3__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(struct __TMSServ3__SaveOrUpdateObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__SaveOrUpdateObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(struct __TMSServ3__SaveOrUpdateObjects*)p = *(struct __TMSServ3__SaveOrUpdateObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__MatchTowerParts(struct soap *soap, struct __TMSServ3__MatchTowerParts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__MatchTowerParts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__MatchTowerParts(struct soap *soap, const struct __TMSServ3__MatchTowerParts *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__MatchTowerParts(soap, &a->TMSServ__MatchTowerParts);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__MatchTowerParts(struct soap *soap, const char *tag, int id, const struct __TMSServ3__MatchTowerParts *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__MatchTowerParts(soap, "TMSServ:MatchTowerParts", -1, &a->TMSServ__MatchTowerParts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__MatchTowerParts * SOAP_FMAC4 soap_in___TMSServ3__MatchTowerParts(struct soap *soap, const char *tag, struct __TMSServ3__MatchTowerParts *a, const char *type)
{
	size_t soap_flag_TMSServ__MatchTowerParts = 1;
	short soap_flag;
	a = (struct __TMSServ3__MatchTowerParts *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__MatchTowerParts, sizeof(struct __TMSServ3__MatchTowerParts), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__MatchTowerParts(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__MatchTowerParts && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__MatchTowerParts(soap, "TMSServ:MatchTowerParts", &a->TMSServ__MatchTowerParts, ""))
				{	soap_flag_TMSServ__MatchTowerParts--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__MatchTowerParts(struct soap *soap, const struct __TMSServ3__MatchTowerParts *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__MatchTowerParts(soap, tag?tag:"-TMSServ3:MatchTowerParts", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__MatchTowerParts * SOAP_FMAC4 soap_get___TMSServ3__MatchTowerParts(struct soap *soap, struct __TMSServ3__MatchTowerParts *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__MatchTowerParts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__MatchTowerParts * SOAP_FMAC2 soap_instantiate___TMSServ3__MatchTowerParts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__MatchTowerParts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__MatchTowerParts, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__MatchTowerParts);
		if (size)
			*size = sizeof(struct __TMSServ3__MatchTowerParts);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__MatchTowerParts, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__MatchTowerParts);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__MatchTowerParts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__MatchTowerParts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__MatchTowerParts %p -> %p\n", q, p));
	*(struct __TMSServ3__MatchTowerParts*)p = *(struct __TMSServ3__MatchTowerParts*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__GetTowerPartsLabelAndVersionSerial(struct soap *soap, struct __TMSServ3__GetTowerPartsLabelAndVersionSerial *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__GetTowerPartsLabelAndVersionSerial = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const struct __TMSServ3__GetTowerPartsLabelAndVersionSerial *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, &a->TMSServ__GetTowerPartsLabelAndVersionSerial);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, int id, const struct __TMSServ3__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, "TMSServ:GetTowerPartsLabelAndVersionSerial", -1, &a->TMSServ__GetTowerPartsLabelAndVersionSerial, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_in___TMSServ3__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, struct __TMSServ3__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	size_t soap_flag_TMSServ__GetTowerPartsLabelAndVersionSerial = 1;
	short soap_flag;
	a = (struct __TMSServ3__GetTowerPartsLabelAndVersionSerial *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__GetTowerPartsLabelAndVersionSerial, sizeof(struct __TMSServ3__GetTowerPartsLabelAndVersionSerial), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__GetTowerPartsLabelAndVersionSerial(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__GetTowerPartsLabelAndVersionSerial && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, "TMSServ:GetTowerPartsLabelAndVersionSerial", &a->TMSServ__GetTowerPartsLabelAndVersionSerial, ""))
				{	soap_flag_TMSServ__GetTowerPartsLabelAndVersionSerial--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const struct __TMSServ3__GetTowerPartsLabelAndVersionSerial *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__GetTowerPartsLabelAndVersionSerial(soap, tag?tag:"-TMSServ3:GetTowerPartsLabelAndVersionSerial", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_get___TMSServ3__GetTowerPartsLabelAndVersionSerial(struct soap *soap, struct __TMSServ3__GetTowerPartsLabelAndVersionSerial *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__GetTowerPartsLabelAndVersionSerial(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC2 soap_instantiate___TMSServ3__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__GetTowerPartsLabelAndVersionSerial(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__GetTowerPartsLabelAndVersionSerial, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__GetTowerPartsLabelAndVersionSerial);
		if (size)
			*size = sizeof(struct __TMSServ3__GetTowerPartsLabelAndVersionSerial);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__GetTowerPartsLabelAndVersionSerial, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__GetTowerPartsLabelAndVersionSerial);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__GetTowerPartsLabelAndVersionSerial*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__GetTowerPartsLabelAndVersionSerial %p -> %p\n", q, p));
	*(struct __TMSServ3__GetTowerPartsLabelAndVersionSerial*)p = *(struct __TMSServ3__GetTowerPartsLabelAndVersionSerial*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__GetObjectsVersion(struct soap *soap, struct __TMSServ3__GetObjectsVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__GetObjectsVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__GetObjectsVersion(struct soap *soap, const struct __TMSServ3__GetObjectsVersion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__GetObjectsVersion(soap, &a->TMSServ__GetObjectsVersion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__GetObjectsVersion(struct soap *soap, const char *tag, int id, const struct __TMSServ3__GetObjectsVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__GetObjectsVersion(soap, "TMSServ:GetObjectsVersion", -1, &a->TMSServ__GetObjectsVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__GetObjectsVersion * SOAP_FMAC4 soap_in___TMSServ3__GetObjectsVersion(struct soap *soap, const char *tag, struct __TMSServ3__GetObjectsVersion *a, const char *type)
{
	size_t soap_flag_TMSServ__GetObjectsVersion = 1;
	short soap_flag;
	a = (struct __TMSServ3__GetObjectsVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__GetObjectsVersion, sizeof(struct __TMSServ3__GetObjectsVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__GetObjectsVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__GetObjectsVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__GetObjectsVersion(soap, "TMSServ:GetObjectsVersion", &a->TMSServ__GetObjectsVersion, ""))
				{	soap_flag_TMSServ__GetObjectsVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__GetObjectsVersion(struct soap *soap, const struct __TMSServ3__GetObjectsVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__GetObjectsVersion(soap, tag?tag:"-TMSServ3:GetObjectsVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__GetObjectsVersion * SOAP_FMAC4 soap_get___TMSServ3__GetObjectsVersion(struct soap *soap, struct __TMSServ3__GetObjectsVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__GetObjectsVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__GetObjectsVersion * SOAP_FMAC2 soap_instantiate___TMSServ3__GetObjectsVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__GetObjectsVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__GetObjectsVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__GetObjectsVersion);
		if (size)
			*size = sizeof(struct __TMSServ3__GetObjectsVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__GetObjectsVersion, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__GetObjectsVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__GetObjectsVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__GetObjectsVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__GetObjectsVersion %p -> %p\n", q, p));
	*(struct __TMSServ3__GetObjectsVersion*)p = *(struct __TMSServ3__GetObjectsVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__DownloadObjects(struct soap *soap, struct __TMSServ3__DownloadObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__DownloadObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__DownloadObjects(struct soap *soap, const struct __TMSServ3__DownloadObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__DownloadObjects(soap, &a->TMSServ__DownloadObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__DownloadObjects(struct soap *soap, const char *tag, int id, const struct __TMSServ3__DownloadObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__DownloadObjects(soap, "TMSServ:DownloadObjects", -1, &a->TMSServ__DownloadObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__DownloadObjects * SOAP_FMAC4 soap_in___TMSServ3__DownloadObjects(struct soap *soap, const char *tag, struct __TMSServ3__DownloadObjects *a, const char *type)
{
	size_t soap_flag_TMSServ__DownloadObjects = 1;
	short soap_flag;
	a = (struct __TMSServ3__DownloadObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__DownloadObjects, sizeof(struct __TMSServ3__DownloadObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__DownloadObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__DownloadObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__DownloadObjects(soap, "TMSServ:DownloadObjects", &a->TMSServ__DownloadObjects, ""))
				{	soap_flag_TMSServ__DownloadObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__DownloadObjects(struct soap *soap, const struct __TMSServ3__DownloadObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__DownloadObjects(soap, tag?tag:"-TMSServ3:DownloadObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__DownloadObjects * SOAP_FMAC4 soap_get___TMSServ3__DownloadObjects(struct soap *soap, struct __TMSServ3__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__DownloadObjects * SOAP_FMAC2 soap_instantiate___TMSServ3__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__DownloadObjects);
		if (size)
			*size = sizeof(struct __TMSServ3__DownloadObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__DownloadObjects, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__DownloadObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__DownloadObjects %p -> %p\n", q, p));
	*(struct __TMSServ3__DownloadObjects*)p = *(struct __TMSServ3__DownloadObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__QueryObjects(struct soap *soap, struct __TMSServ3__QueryObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__QueryObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__QueryObjects(struct soap *soap, const struct __TMSServ3__QueryObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__QueryObjects(soap, &a->TMSServ__QueryObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__QueryObjects(struct soap *soap, const char *tag, int id, const struct __TMSServ3__QueryObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__QueryObjects(soap, "TMSServ:QueryObjects", -1, &a->TMSServ__QueryObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__QueryObjects * SOAP_FMAC4 soap_in___TMSServ3__QueryObjects(struct soap *soap, const char *tag, struct __TMSServ3__QueryObjects *a, const char *type)
{
	size_t soap_flag_TMSServ__QueryObjects = 1;
	short soap_flag;
	a = (struct __TMSServ3__QueryObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__QueryObjects, sizeof(struct __TMSServ3__QueryObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__QueryObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__QueryObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__QueryObjects(soap, "TMSServ:QueryObjects", &a->TMSServ__QueryObjects, ""))
				{	soap_flag_TMSServ__QueryObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__QueryObjects(struct soap *soap, const struct __TMSServ3__QueryObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__QueryObjects(soap, tag?tag:"-TMSServ3:QueryObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__QueryObjects * SOAP_FMAC4 soap_get___TMSServ3__QueryObjects(struct soap *soap, struct __TMSServ3__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__QueryObjects * SOAP_FMAC2 soap_instantiate___TMSServ3__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__QueryObjects);
		if (size)
			*size = sizeof(struct __TMSServ3__QueryObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__QueryObjects, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__QueryObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__QueryObjects %p -> %p\n", q, p));
	*(struct __TMSServ3__QueryObjects*)p = *(struct __TMSServ3__QueryObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__logoutUser(struct soap *soap, struct __TMSServ3__logoutUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__logoutUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__logoutUser(struct soap *soap, const struct __TMSServ3__logoutUser *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__logoutUser(soap, &a->TMSServ__logoutUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__logoutUser(struct soap *soap, const char *tag, int id, const struct __TMSServ3__logoutUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__logoutUser(soap, "TMSServ:logoutUser", -1, &a->TMSServ__logoutUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__logoutUser * SOAP_FMAC4 soap_in___TMSServ3__logoutUser(struct soap *soap, const char *tag, struct __TMSServ3__logoutUser *a, const char *type)
{
	size_t soap_flag_TMSServ__logoutUser = 1;
	short soap_flag;
	a = (struct __TMSServ3__logoutUser *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__logoutUser, sizeof(struct __TMSServ3__logoutUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__logoutUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__logoutUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__logoutUser(soap, "TMSServ:logoutUser", &a->TMSServ__logoutUser, ""))
				{	soap_flag_TMSServ__logoutUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__logoutUser(struct soap *soap, const struct __TMSServ3__logoutUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__logoutUser(soap, tag?tag:"-TMSServ3:logoutUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__logoutUser * SOAP_FMAC4 soap_get___TMSServ3__logoutUser(struct soap *soap, struct __TMSServ3__logoutUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__logoutUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__logoutUser * SOAP_FMAC2 soap_instantiate___TMSServ3__logoutUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__logoutUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__logoutUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__logoutUser);
		if (size)
			*size = sizeof(struct __TMSServ3__logoutUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__logoutUser, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__logoutUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__logoutUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__logoutUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__logoutUser %p -> %p\n", q, p));
	*(struct __TMSServ3__logoutUser*)p = *(struct __TMSServ3__logoutUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__loginUserByByteArr(struct soap *soap, struct __TMSServ3__loginUserByByteArr *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__loginUserByByteArr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__loginUserByByteArr(struct soap *soap, const struct __TMSServ3__loginUserByByteArr *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__loginUserByByteArr(soap, &a->TMSServ__loginUserByByteArr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__loginUserByByteArr(struct soap *soap, const char *tag, int id, const struct __TMSServ3__loginUserByByteArr *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__loginUserByByteArr(soap, "TMSServ:loginUserByByteArr", -1, &a->TMSServ__loginUserByByteArr, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__loginUserByByteArr * SOAP_FMAC4 soap_in___TMSServ3__loginUserByByteArr(struct soap *soap, const char *tag, struct __TMSServ3__loginUserByByteArr *a, const char *type)
{
	size_t soap_flag_TMSServ__loginUserByByteArr = 1;
	short soap_flag;
	a = (struct __TMSServ3__loginUserByByteArr *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__loginUserByByteArr, sizeof(struct __TMSServ3__loginUserByByteArr), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__loginUserByByteArr(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__loginUserByByteArr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__loginUserByByteArr(soap, "TMSServ:loginUserByByteArr", &a->TMSServ__loginUserByByteArr, ""))
				{	soap_flag_TMSServ__loginUserByByteArr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__loginUserByByteArr(struct soap *soap, const struct __TMSServ3__loginUserByByteArr *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__loginUserByByteArr(soap, tag?tag:"-TMSServ3:loginUserByByteArr", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__loginUserByByteArr * SOAP_FMAC4 soap_get___TMSServ3__loginUserByByteArr(struct soap *soap, struct __TMSServ3__loginUserByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__loginUserByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__loginUserByByteArr * SOAP_FMAC2 soap_instantiate___TMSServ3__loginUserByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__loginUserByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__loginUserByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__loginUserByByteArr);
		if (size)
			*size = sizeof(struct __TMSServ3__loginUserByByteArr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__loginUserByByteArr, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__loginUserByByteArr);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__loginUserByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__loginUserByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__loginUserByByteArr %p -> %p\n", q, p));
	*(struct __TMSServ3__loginUserByByteArr*)p = *(struct __TMSServ3__loginUserByByteArr*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ3__loginUser(struct soap *soap, struct __TMSServ3__loginUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__loginUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ3__loginUser(struct soap *soap, const struct __TMSServ3__loginUser *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__loginUser(soap, &a->TMSServ__loginUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ3__loginUser(struct soap *soap, const char *tag, int id, const struct __TMSServ3__loginUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__loginUser(soap, "TMSServ:loginUser", -1, &a->TMSServ__loginUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__loginUser * SOAP_FMAC4 soap_in___TMSServ3__loginUser(struct soap *soap, const char *tag, struct __TMSServ3__loginUser *a, const char *type)
{
	size_t soap_flag_TMSServ__loginUser = 1;
	short soap_flag;
	a = (struct __TMSServ3__loginUser *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ3__loginUser, sizeof(struct __TMSServ3__loginUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ3__loginUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__loginUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__loginUser(soap, "TMSServ:loginUser", &a->TMSServ__loginUser, ""))
				{	soap_flag_TMSServ__loginUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ3__loginUser(struct soap *soap, const struct __TMSServ3__loginUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ3__loginUser(soap, tag?tag:"-TMSServ3:loginUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ3__loginUser * SOAP_FMAC4 soap_get___TMSServ3__loginUser(struct soap *soap, struct __TMSServ3__loginUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ3__loginUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ3__loginUser * SOAP_FMAC2 soap_instantiate___TMSServ3__loginUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ3__loginUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ3__loginUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ3__loginUser);
		if (size)
			*size = sizeof(struct __TMSServ3__loginUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ3__loginUser, n);
		if (size)
			*size = n * sizeof(struct __TMSServ3__loginUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ3__loginUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ3__loginUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ3__loginUser %p -> %p\n", q, p));
	*(struct __TMSServ3__loginUser*)p = *(struct __TMSServ3__loginUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__CloseFileObjectDataProvider(struct soap *soap, struct __TMSServ2__CloseFileObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__CloseFileObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__CloseFileObjectDataProvider(struct soap *soap, const struct __TMSServ2__CloseFileObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, &a->TMSServ__CloseFileObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__CloseFileObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __TMSServ2__CloseFileObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, "TMSServ:CloseFileObjectDataProvider", -1, &a->TMSServ__CloseFileObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__CloseFileObjectDataProvider * SOAP_FMAC4 soap_in___TMSServ2__CloseFileObjectDataProvider(struct soap *soap, const char *tag, struct __TMSServ2__CloseFileObjectDataProvider *a, const char *type)
{
	size_t soap_flag_TMSServ__CloseFileObjectDataProvider = 1;
	short soap_flag;
	a = (struct __TMSServ2__CloseFileObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__CloseFileObjectDataProvider, sizeof(struct __TMSServ2__CloseFileObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__CloseFileObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__CloseFileObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, "TMSServ:CloseFileObjectDataProvider", &a->TMSServ__CloseFileObjectDataProvider, ""))
				{	soap_flag_TMSServ__CloseFileObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__CloseFileObjectDataProvider(struct soap *soap, const struct __TMSServ2__CloseFileObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__CloseFileObjectDataProvider(soap, tag?tag:"-TMSServ2:CloseFileObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__CloseFileObjectDataProvider * SOAP_FMAC4 soap_get___TMSServ2__CloseFileObjectDataProvider(struct soap *soap, struct __TMSServ2__CloseFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__CloseFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__CloseFileObjectDataProvider * SOAP_FMAC2 soap_instantiate___TMSServ2__CloseFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__CloseFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__CloseFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__CloseFileObjectDataProvider);
		if (size)
			*size = sizeof(struct __TMSServ2__CloseFileObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__CloseFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__CloseFileObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__CloseFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__CloseFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__CloseFileObjectDataProvider %p -> %p\n", q, p));
	*(struct __TMSServ2__CloseFileObjectDataProvider*)p = *(struct __TMSServ2__CloseFileObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__DownloadFileObject(struct soap *soap, struct __TMSServ2__DownloadFileObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__DownloadFileObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__DownloadFileObject(struct soap *soap, const struct __TMSServ2__DownloadFileObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__DownloadFileObject(soap, &a->TMSServ__DownloadFileObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__DownloadFileObject(struct soap *soap, const char *tag, int id, const struct __TMSServ2__DownloadFileObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__DownloadFileObject(soap, "TMSServ:DownloadFileObject", -1, &a->TMSServ__DownloadFileObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__DownloadFileObject * SOAP_FMAC4 soap_in___TMSServ2__DownloadFileObject(struct soap *soap, const char *tag, struct __TMSServ2__DownloadFileObject *a, const char *type)
{
	size_t soap_flag_TMSServ__DownloadFileObject = 1;
	short soap_flag;
	a = (struct __TMSServ2__DownloadFileObject *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__DownloadFileObject, sizeof(struct __TMSServ2__DownloadFileObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__DownloadFileObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__DownloadFileObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__DownloadFileObject(soap, "TMSServ:DownloadFileObject", &a->TMSServ__DownloadFileObject, ""))
				{	soap_flag_TMSServ__DownloadFileObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__DownloadFileObject(struct soap *soap, const struct __TMSServ2__DownloadFileObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__DownloadFileObject(soap, tag?tag:"-TMSServ2:DownloadFileObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__DownloadFileObject * SOAP_FMAC4 soap_get___TMSServ2__DownloadFileObject(struct soap *soap, struct __TMSServ2__DownloadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__DownloadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__DownloadFileObject * SOAP_FMAC2 soap_instantiate___TMSServ2__DownloadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__DownloadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__DownloadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__DownloadFileObject);
		if (size)
			*size = sizeof(struct __TMSServ2__DownloadFileObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__DownloadFileObject, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__DownloadFileObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__DownloadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__DownloadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__DownloadFileObject %p -> %p\n", q, p));
	*(struct __TMSServ2__DownloadFileObject*)p = *(struct __TMSServ2__DownloadFileObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__OpenServerObjectDataProvider(struct soap *soap, struct __TMSServ2__OpenServerObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__OpenServerObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__OpenServerObjectDataProvider(struct soap *soap, const struct __TMSServ2__OpenServerObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, &a->TMSServ__OpenServerObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__OpenServerObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __TMSServ2__OpenServerObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, "TMSServ:OpenServerObjectDataProvider", -1, &a->TMSServ__OpenServerObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__OpenServerObjectDataProvider * SOAP_FMAC4 soap_in___TMSServ2__OpenServerObjectDataProvider(struct soap *soap, const char *tag, struct __TMSServ2__OpenServerObjectDataProvider *a, const char *type)
{
	size_t soap_flag_TMSServ__OpenServerObjectDataProvider = 1;
	short soap_flag;
	a = (struct __TMSServ2__OpenServerObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__OpenServerObjectDataProvider, sizeof(struct __TMSServ2__OpenServerObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__OpenServerObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__OpenServerObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, "TMSServ:OpenServerObjectDataProvider", &a->TMSServ__OpenServerObjectDataProvider, ""))
				{	soap_flag_TMSServ__OpenServerObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__OpenServerObjectDataProvider(struct soap *soap, const struct __TMSServ2__OpenServerObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__OpenServerObjectDataProvider(soap, tag?tag:"-TMSServ2:OpenServerObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__OpenServerObjectDataProvider * SOAP_FMAC4 soap_get___TMSServ2__OpenServerObjectDataProvider(struct soap *soap, struct __TMSServ2__OpenServerObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__OpenServerObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__OpenServerObjectDataProvider * SOAP_FMAC2 soap_instantiate___TMSServ2__OpenServerObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__OpenServerObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__OpenServerObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__OpenServerObjectDataProvider);
		if (size)
			*size = sizeof(struct __TMSServ2__OpenServerObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__OpenServerObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__OpenServerObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__OpenServerObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__OpenServerObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__OpenServerObjectDataProvider %p -> %p\n", q, p));
	*(struct __TMSServ2__OpenServerObjectDataProvider*)p = *(struct __TMSServ2__OpenServerObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__OpenTapModelDataProvider(struct soap *soap, struct __TMSServ2__OpenTapModelDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__OpenTapModelDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__OpenTapModelDataProvider(struct soap *soap, const struct __TMSServ2__OpenTapModelDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__OpenTapModelDataProvider(soap, &a->TMSServ__OpenTapModelDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__OpenTapModelDataProvider(struct soap *soap, const char *tag, int id, const struct __TMSServ2__OpenTapModelDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__OpenTapModelDataProvider(soap, "TMSServ:OpenTapModelDataProvider", -1, &a->TMSServ__OpenTapModelDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__OpenTapModelDataProvider * SOAP_FMAC4 soap_in___TMSServ2__OpenTapModelDataProvider(struct soap *soap, const char *tag, struct __TMSServ2__OpenTapModelDataProvider *a, const char *type)
{
	size_t soap_flag_TMSServ__OpenTapModelDataProvider = 1;
	short soap_flag;
	a = (struct __TMSServ2__OpenTapModelDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__OpenTapModelDataProvider, sizeof(struct __TMSServ2__OpenTapModelDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__OpenTapModelDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__OpenTapModelDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__OpenTapModelDataProvider(soap, "TMSServ:OpenTapModelDataProvider", &a->TMSServ__OpenTapModelDataProvider, ""))
				{	soap_flag_TMSServ__OpenTapModelDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__OpenTapModelDataProvider(struct soap *soap, const struct __TMSServ2__OpenTapModelDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__OpenTapModelDataProvider(soap, tag?tag:"-TMSServ2:OpenTapModelDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__OpenTapModelDataProvider * SOAP_FMAC4 soap_get___TMSServ2__OpenTapModelDataProvider(struct soap *soap, struct __TMSServ2__OpenTapModelDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__OpenTapModelDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__OpenTapModelDataProvider * SOAP_FMAC2 soap_instantiate___TMSServ2__OpenTapModelDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__OpenTapModelDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__OpenTapModelDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__OpenTapModelDataProvider);
		if (size)
			*size = sizeof(struct __TMSServ2__OpenTapModelDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__OpenTapModelDataProvider, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__OpenTapModelDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__OpenTapModelDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__OpenTapModelDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__OpenTapModelDataProvider %p -> %p\n", q, p));
	*(struct __TMSServ2__OpenTapModelDataProvider*)p = *(struct __TMSServ2__OpenTapModelDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__OpenFileObjectDataProvider(struct soap *soap, struct __TMSServ2__OpenFileObjectDataProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__OpenFileObjectDataProvider = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__OpenFileObjectDataProvider(struct soap *soap, const struct __TMSServ2__OpenFileObjectDataProvider *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, &a->TMSServ__OpenFileObjectDataProvider);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__OpenFileObjectDataProvider(struct soap *soap, const char *tag, int id, const struct __TMSServ2__OpenFileObjectDataProvider *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, "TMSServ:OpenFileObjectDataProvider", -1, &a->TMSServ__OpenFileObjectDataProvider, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__OpenFileObjectDataProvider * SOAP_FMAC4 soap_in___TMSServ2__OpenFileObjectDataProvider(struct soap *soap, const char *tag, struct __TMSServ2__OpenFileObjectDataProvider *a, const char *type)
{
	size_t soap_flag_TMSServ__OpenFileObjectDataProvider = 1;
	short soap_flag;
	a = (struct __TMSServ2__OpenFileObjectDataProvider *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__OpenFileObjectDataProvider, sizeof(struct __TMSServ2__OpenFileObjectDataProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__OpenFileObjectDataProvider(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__OpenFileObjectDataProvider && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, "TMSServ:OpenFileObjectDataProvider", &a->TMSServ__OpenFileObjectDataProvider, ""))
				{	soap_flag_TMSServ__OpenFileObjectDataProvider--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__OpenFileObjectDataProvider(struct soap *soap, const struct __TMSServ2__OpenFileObjectDataProvider *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__OpenFileObjectDataProvider(soap, tag?tag:"-TMSServ2:OpenFileObjectDataProvider", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__OpenFileObjectDataProvider * SOAP_FMAC4 soap_get___TMSServ2__OpenFileObjectDataProvider(struct soap *soap, struct __TMSServ2__OpenFileObjectDataProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__OpenFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__OpenFileObjectDataProvider * SOAP_FMAC2 soap_instantiate___TMSServ2__OpenFileObjectDataProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__OpenFileObjectDataProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__OpenFileObjectDataProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__OpenFileObjectDataProvider);
		if (size)
			*size = sizeof(struct __TMSServ2__OpenFileObjectDataProvider);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__OpenFileObjectDataProvider, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__OpenFileObjectDataProvider);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__OpenFileObjectDataProvider*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__OpenFileObjectDataProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__OpenFileObjectDataProvider %p -> %p\n", q, p));
	*(struct __TMSServ2__OpenFileObjectDataProvider*)p = *(struct __TMSServ2__OpenFileObjectDataProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__FinalizeFileObjectData(struct soap *soap, struct __TMSServ2__FinalizeFileObjectData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__FinalizeFileObjectData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__FinalizeFileObjectData(struct soap *soap, const struct __TMSServ2__FinalizeFileObjectData *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__FinalizeFileObjectData(soap, &a->TMSServ__FinalizeFileObjectData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__FinalizeFileObjectData(struct soap *soap, const char *tag, int id, const struct __TMSServ2__FinalizeFileObjectData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__FinalizeFileObjectData(soap, "TMSServ:FinalizeFileObjectData", -1, &a->TMSServ__FinalizeFileObjectData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__FinalizeFileObjectData * SOAP_FMAC4 soap_in___TMSServ2__FinalizeFileObjectData(struct soap *soap, const char *tag, struct __TMSServ2__FinalizeFileObjectData *a, const char *type)
{
	size_t soap_flag_TMSServ__FinalizeFileObjectData = 1;
	short soap_flag;
	a = (struct __TMSServ2__FinalizeFileObjectData *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__FinalizeFileObjectData, sizeof(struct __TMSServ2__FinalizeFileObjectData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__FinalizeFileObjectData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__FinalizeFileObjectData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__FinalizeFileObjectData(soap, "TMSServ:FinalizeFileObjectData", &a->TMSServ__FinalizeFileObjectData, ""))
				{	soap_flag_TMSServ__FinalizeFileObjectData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__FinalizeFileObjectData(struct soap *soap, const struct __TMSServ2__FinalizeFileObjectData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__FinalizeFileObjectData(soap, tag?tag:"-TMSServ2:FinalizeFileObjectData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__FinalizeFileObjectData * SOAP_FMAC4 soap_get___TMSServ2__FinalizeFileObjectData(struct soap *soap, struct __TMSServ2__FinalizeFileObjectData *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__FinalizeFileObjectData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__FinalizeFileObjectData * SOAP_FMAC2 soap_instantiate___TMSServ2__FinalizeFileObjectData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__FinalizeFileObjectData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__FinalizeFileObjectData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__FinalizeFileObjectData);
		if (size)
			*size = sizeof(struct __TMSServ2__FinalizeFileObjectData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__FinalizeFileObjectData, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__FinalizeFileObjectData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__FinalizeFileObjectData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__FinalizeFileObjectData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__FinalizeFileObjectData %p -> %p\n", q, p));
	*(struct __TMSServ2__FinalizeFileObjectData*)p = *(struct __TMSServ2__FinalizeFileObjectData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__UploadFileObject(struct soap *soap, struct __TMSServ2__UploadFileObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__UploadFileObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__UploadFileObject(struct soap *soap, const struct __TMSServ2__UploadFileObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__UploadFileObject(soap, &a->TMSServ__UploadFileObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__UploadFileObject(struct soap *soap, const char *tag, int id, const struct __TMSServ2__UploadFileObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__UploadFileObject(soap, "TMSServ:UploadFileObject", -1, &a->TMSServ__UploadFileObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__UploadFileObject * SOAP_FMAC4 soap_in___TMSServ2__UploadFileObject(struct soap *soap, const char *tag, struct __TMSServ2__UploadFileObject *a, const char *type)
{
	size_t soap_flag_TMSServ__UploadFileObject = 1;
	short soap_flag;
	a = (struct __TMSServ2__UploadFileObject *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__UploadFileObject, sizeof(struct __TMSServ2__UploadFileObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__UploadFileObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__UploadFileObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__UploadFileObject(soap, "TMSServ:UploadFileObject", &a->TMSServ__UploadFileObject, ""))
				{	soap_flag_TMSServ__UploadFileObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__UploadFileObject(struct soap *soap, const struct __TMSServ2__UploadFileObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__UploadFileObject(soap, tag?tag:"-TMSServ2:UploadFileObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__UploadFileObject * SOAP_FMAC4 soap_get___TMSServ2__UploadFileObject(struct soap *soap, struct __TMSServ2__UploadFileObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__UploadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__UploadFileObject * SOAP_FMAC2 soap_instantiate___TMSServ2__UploadFileObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__UploadFileObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__UploadFileObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__UploadFileObject);
		if (size)
			*size = sizeof(struct __TMSServ2__UploadFileObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__UploadFileObject, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__UploadFileObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__UploadFileObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__UploadFileObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__UploadFileObject %p -> %p\n", q, p));
	*(struct __TMSServ2__UploadFileObject*)p = *(struct __TMSServ2__UploadFileObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__DownloadFileById(struct soap *soap, struct __TMSServ2__DownloadFileById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__DownloadFileById = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__DownloadFileById(struct soap *soap, const struct __TMSServ2__DownloadFileById *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__DownloadFileById(soap, &a->TMSServ__DownloadFileById);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__DownloadFileById(struct soap *soap, const char *tag, int id, const struct __TMSServ2__DownloadFileById *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__DownloadFileById(soap, "TMSServ:DownloadFileById", -1, &a->TMSServ__DownloadFileById, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__DownloadFileById * SOAP_FMAC4 soap_in___TMSServ2__DownloadFileById(struct soap *soap, const char *tag, struct __TMSServ2__DownloadFileById *a, const char *type)
{
	size_t soap_flag_TMSServ__DownloadFileById = 1;
	short soap_flag;
	a = (struct __TMSServ2__DownloadFileById *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__DownloadFileById, sizeof(struct __TMSServ2__DownloadFileById), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__DownloadFileById(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__DownloadFileById && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__DownloadFileById(soap, "TMSServ:DownloadFileById", &a->TMSServ__DownloadFileById, ""))
				{	soap_flag_TMSServ__DownloadFileById--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__DownloadFileById(struct soap *soap, const struct __TMSServ2__DownloadFileById *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__DownloadFileById(soap, tag?tag:"-TMSServ2:DownloadFileById", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__DownloadFileById * SOAP_FMAC4 soap_get___TMSServ2__DownloadFileById(struct soap *soap, struct __TMSServ2__DownloadFileById *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__DownloadFileById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__DownloadFileById * SOAP_FMAC2 soap_instantiate___TMSServ2__DownloadFileById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__DownloadFileById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__DownloadFileById, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__DownloadFileById);
		if (size)
			*size = sizeof(struct __TMSServ2__DownloadFileById);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__DownloadFileById, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__DownloadFileById);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__DownloadFileById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__DownloadFileById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__DownloadFileById %p -> %p\n", q, p));
	*(struct __TMSServ2__DownloadFileById*)p = *(struct __TMSServ2__DownloadFileById*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__DeleteObject(struct soap *soap, struct __TMSServ2__DeleteObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__DeleteObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__DeleteObject(struct soap *soap, const struct __TMSServ2__DeleteObject *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__DeleteObject(soap, &a->TMSServ__DeleteObject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__DeleteObject(struct soap *soap, const char *tag, int id, const struct __TMSServ2__DeleteObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__DeleteObject(soap, "TMSServ:DeleteObject", -1, &a->TMSServ__DeleteObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__DeleteObject * SOAP_FMAC4 soap_in___TMSServ2__DeleteObject(struct soap *soap, const char *tag, struct __TMSServ2__DeleteObject *a, const char *type)
{
	size_t soap_flag_TMSServ__DeleteObject = 1;
	short soap_flag;
	a = (struct __TMSServ2__DeleteObject *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__DeleteObject, sizeof(struct __TMSServ2__DeleteObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__DeleteObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__DeleteObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__DeleteObject(soap, "TMSServ:DeleteObject", &a->TMSServ__DeleteObject, ""))
				{	soap_flag_TMSServ__DeleteObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__DeleteObject(struct soap *soap, const struct __TMSServ2__DeleteObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__DeleteObject(soap, tag?tag:"-TMSServ2:DeleteObject", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__DeleteObject * SOAP_FMAC4 soap_get___TMSServ2__DeleteObject(struct soap *soap, struct __TMSServ2__DeleteObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__DeleteObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__DeleteObject * SOAP_FMAC2 soap_instantiate___TMSServ2__DeleteObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__DeleteObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__DeleteObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__DeleteObject);
		if (size)
			*size = sizeof(struct __TMSServ2__DeleteObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__DeleteObject, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__DeleteObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__DeleteObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__DeleteObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__DeleteObject %p -> %p\n", q, p));
	*(struct __TMSServ2__DeleteObject*)p = *(struct __TMSServ2__DeleteObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__SaveOrUpdateObjects(struct soap *soap, struct __TMSServ2__SaveOrUpdateObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__SaveOrUpdateObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__SaveOrUpdateObjects(struct soap *soap, const struct __TMSServ2__SaveOrUpdateObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__SaveOrUpdateObjects(soap, &a->TMSServ__SaveOrUpdateObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const struct __TMSServ2__SaveOrUpdateObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__SaveOrUpdateObjects(soap, "TMSServ:SaveOrUpdateObjects", -1, &a->TMSServ__SaveOrUpdateObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__SaveOrUpdateObjects * SOAP_FMAC4 soap_in___TMSServ2__SaveOrUpdateObjects(struct soap *soap, const char *tag, struct __TMSServ2__SaveOrUpdateObjects *a, const char *type)
{
	size_t soap_flag_TMSServ__SaveOrUpdateObjects = 1;
	short soap_flag;
	a = (struct __TMSServ2__SaveOrUpdateObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__SaveOrUpdateObjects, sizeof(struct __TMSServ2__SaveOrUpdateObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__SaveOrUpdateObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__SaveOrUpdateObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__SaveOrUpdateObjects(soap, "TMSServ:SaveOrUpdateObjects", &a->TMSServ__SaveOrUpdateObjects, ""))
				{	soap_flag_TMSServ__SaveOrUpdateObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__SaveOrUpdateObjects(struct soap *soap, const struct __TMSServ2__SaveOrUpdateObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__SaveOrUpdateObjects(soap, tag?tag:"-TMSServ2:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__SaveOrUpdateObjects * SOAP_FMAC4 soap_get___TMSServ2__SaveOrUpdateObjects(struct soap *soap, struct __TMSServ2__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate___TMSServ2__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(struct __TMSServ2__SaveOrUpdateObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__SaveOrUpdateObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(struct __TMSServ2__SaveOrUpdateObjects*)p = *(struct __TMSServ2__SaveOrUpdateObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__MatchTowerParts(struct soap *soap, struct __TMSServ2__MatchTowerParts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__MatchTowerParts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__MatchTowerParts(struct soap *soap, const struct __TMSServ2__MatchTowerParts *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__MatchTowerParts(soap, &a->TMSServ__MatchTowerParts);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__MatchTowerParts(struct soap *soap, const char *tag, int id, const struct __TMSServ2__MatchTowerParts *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__MatchTowerParts(soap, "TMSServ:MatchTowerParts", -1, &a->TMSServ__MatchTowerParts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__MatchTowerParts * SOAP_FMAC4 soap_in___TMSServ2__MatchTowerParts(struct soap *soap, const char *tag, struct __TMSServ2__MatchTowerParts *a, const char *type)
{
	size_t soap_flag_TMSServ__MatchTowerParts = 1;
	short soap_flag;
	a = (struct __TMSServ2__MatchTowerParts *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__MatchTowerParts, sizeof(struct __TMSServ2__MatchTowerParts), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__MatchTowerParts(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__MatchTowerParts && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__MatchTowerParts(soap, "TMSServ:MatchTowerParts", &a->TMSServ__MatchTowerParts, ""))
				{	soap_flag_TMSServ__MatchTowerParts--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__MatchTowerParts(struct soap *soap, const struct __TMSServ2__MatchTowerParts *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__MatchTowerParts(soap, tag?tag:"-TMSServ2:MatchTowerParts", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__MatchTowerParts * SOAP_FMAC4 soap_get___TMSServ2__MatchTowerParts(struct soap *soap, struct __TMSServ2__MatchTowerParts *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__MatchTowerParts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__MatchTowerParts * SOAP_FMAC2 soap_instantiate___TMSServ2__MatchTowerParts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__MatchTowerParts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__MatchTowerParts, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__MatchTowerParts);
		if (size)
			*size = sizeof(struct __TMSServ2__MatchTowerParts);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__MatchTowerParts, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__MatchTowerParts);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__MatchTowerParts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__MatchTowerParts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__MatchTowerParts %p -> %p\n", q, p));
	*(struct __TMSServ2__MatchTowerParts*)p = *(struct __TMSServ2__MatchTowerParts*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__GetTowerPartsLabelAndVersionSerial(struct soap *soap, struct __TMSServ2__GetTowerPartsLabelAndVersionSerial *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__GetTowerPartsLabelAndVersionSerial = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const struct __TMSServ2__GetTowerPartsLabelAndVersionSerial *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, &a->TMSServ__GetTowerPartsLabelAndVersionSerial);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, int id, const struct __TMSServ2__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, "TMSServ:GetTowerPartsLabelAndVersionSerial", -1, &a->TMSServ__GetTowerPartsLabelAndVersionSerial, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_in___TMSServ2__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, struct __TMSServ2__GetTowerPartsLabelAndVersionSerial *a, const char *type)
{
	size_t soap_flag_TMSServ__GetTowerPartsLabelAndVersionSerial = 1;
	short soap_flag;
	a = (struct __TMSServ2__GetTowerPartsLabelAndVersionSerial *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__GetTowerPartsLabelAndVersionSerial, sizeof(struct __TMSServ2__GetTowerPartsLabelAndVersionSerial), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__GetTowerPartsLabelAndVersionSerial(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__GetTowerPartsLabelAndVersionSerial && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, "TMSServ:GetTowerPartsLabelAndVersionSerial", &a->TMSServ__GetTowerPartsLabelAndVersionSerial, ""))
				{	soap_flag_TMSServ__GetTowerPartsLabelAndVersionSerial--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const struct __TMSServ2__GetTowerPartsLabelAndVersionSerial *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__GetTowerPartsLabelAndVersionSerial(soap, tag?tag:"-TMSServ2:GetTowerPartsLabelAndVersionSerial", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC4 soap_get___TMSServ2__GetTowerPartsLabelAndVersionSerial(struct soap *soap, struct __TMSServ2__GetTowerPartsLabelAndVersionSerial *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__GetTowerPartsLabelAndVersionSerial(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__GetTowerPartsLabelAndVersionSerial * SOAP_FMAC2 soap_instantiate___TMSServ2__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__GetTowerPartsLabelAndVersionSerial(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__GetTowerPartsLabelAndVersionSerial, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__GetTowerPartsLabelAndVersionSerial);
		if (size)
			*size = sizeof(struct __TMSServ2__GetTowerPartsLabelAndVersionSerial);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__GetTowerPartsLabelAndVersionSerial, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__GetTowerPartsLabelAndVersionSerial);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__GetTowerPartsLabelAndVersionSerial*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__GetTowerPartsLabelAndVersionSerial(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__GetTowerPartsLabelAndVersionSerial %p -> %p\n", q, p));
	*(struct __TMSServ2__GetTowerPartsLabelAndVersionSerial*)p = *(struct __TMSServ2__GetTowerPartsLabelAndVersionSerial*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__GetObjectsVersion(struct soap *soap, struct __TMSServ2__GetObjectsVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__GetObjectsVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__GetObjectsVersion(struct soap *soap, const struct __TMSServ2__GetObjectsVersion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__GetObjectsVersion(soap, &a->TMSServ__GetObjectsVersion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__GetObjectsVersion(struct soap *soap, const char *tag, int id, const struct __TMSServ2__GetObjectsVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__GetObjectsVersion(soap, "TMSServ:GetObjectsVersion", -1, &a->TMSServ__GetObjectsVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__GetObjectsVersion * SOAP_FMAC4 soap_in___TMSServ2__GetObjectsVersion(struct soap *soap, const char *tag, struct __TMSServ2__GetObjectsVersion *a, const char *type)
{
	size_t soap_flag_TMSServ__GetObjectsVersion = 1;
	short soap_flag;
	a = (struct __TMSServ2__GetObjectsVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__GetObjectsVersion, sizeof(struct __TMSServ2__GetObjectsVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__GetObjectsVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__GetObjectsVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__GetObjectsVersion(soap, "TMSServ:GetObjectsVersion", &a->TMSServ__GetObjectsVersion, ""))
				{	soap_flag_TMSServ__GetObjectsVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__GetObjectsVersion(struct soap *soap, const struct __TMSServ2__GetObjectsVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__GetObjectsVersion(soap, tag?tag:"-TMSServ2:GetObjectsVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__GetObjectsVersion * SOAP_FMAC4 soap_get___TMSServ2__GetObjectsVersion(struct soap *soap, struct __TMSServ2__GetObjectsVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__GetObjectsVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__GetObjectsVersion * SOAP_FMAC2 soap_instantiate___TMSServ2__GetObjectsVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__GetObjectsVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__GetObjectsVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__GetObjectsVersion);
		if (size)
			*size = sizeof(struct __TMSServ2__GetObjectsVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__GetObjectsVersion, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__GetObjectsVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__GetObjectsVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__GetObjectsVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__GetObjectsVersion %p -> %p\n", q, p));
	*(struct __TMSServ2__GetObjectsVersion*)p = *(struct __TMSServ2__GetObjectsVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__DownloadObjects(struct soap *soap, struct __TMSServ2__DownloadObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__DownloadObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__DownloadObjects(struct soap *soap, const struct __TMSServ2__DownloadObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__DownloadObjects(soap, &a->TMSServ__DownloadObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__DownloadObjects(struct soap *soap, const char *tag, int id, const struct __TMSServ2__DownloadObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__DownloadObjects(soap, "TMSServ:DownloadObjects", -1, &a->TMSServ__DownloadObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__DownloadObjects * SOAP_FMAC4 soap_in___TMSServ2__DownloadObjects(struct soap *soap, const char *tag, struct __TMSServ2__DownloadObjects *a, const char *type)
{
	size_t soap_flag_TMSServ__DownloadObjects = 1;
	short soap_flag;
	a = (struct __TMSServ2__DownloadObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__DownloadObjects, sizeof(struct __TMSServ2__DownloadObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__DownloadObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__DownloadObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__DownloadObjects(soap, "TMSServ:DownloadObjects", &a->TMSServ__DownloadObjects, ""))
				{	soap_flag_TMSServ__DownloadObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__DownloadObjects(struct soap *soap, const struct __TMSServ2__DownloadObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__DownloadObjects(soap, tag?tag:"-TMSServ2:DownloadObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__DownloadObjects * SOAP_FMAC4 soap_get___TMSServ2__DownloadObjects(struct soap *soap, struct __TMSServ2__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__DownloadObjects * SOAP_FMAC2 soap_instantiate___TMSServ2__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__DownloadObjects);
		if (size)
			*size = sizeof(struct __TMSServ2__DownloadObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__DownloadObjects, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__DownloadObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__DownloadObjects %p -> %p\n", q, p));
	*(struct __TMSServ2__DownloadObjects*)p = *(struct __TMSServ2__DownloadObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__QueryObjects(struct soap *soap, struct __TMSServ2__QueryObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__QueryObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__QueryObjects(struct soap *soap, const struct __TMSServ2__QueryObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__QueryObjects(soap, &a->TMSServ__QueryObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__QueryObjects(struct soap *soap, const char *tag, int id, const struct __TMSServ2__QueryObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__QueryObjects(soap, "TMSServ:QueryObjects", -1, &a->TMSServ__QueryObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__QueryObjects * SOAP_FMAC4 soap_in___TMSServ2__QueryObjects(struct soap *soap, const char *tag, struct __TMSServ2__QueryObjects *a, const char *type)
{
	size_t soap_flag_TMSServ__QueryObjects = 1;
	short soap_flag;
	a = (struct __TMSServ2__QueryObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__QueryObjects, sizeof(struct __TMSServ2__QueryObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__QueryObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__QueryObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__QueryObjects(soap, "TMSServ:QueryObjects", &a->TMSServ__QueryObjects, ""))
				{	soap_flag_TMSServ__QueryObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__QueryObjects(struct soap *soap, const struct __TMSServ2__QueryObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__QueryObjects(soap, tag?tag:"-TMSServ2:QueryObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__QueryObjects * SOAP_FMAC4 soap_get___TMSServ2__QueryObjects(struct soap *soap, struct __TMSServ2__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__QueryObjects * SOAP_FMAC2 soap_instantiate___TMSServ2__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__QueryObjects);
		if (size)
			*size = sizeof(struct __TMSServ2__QueryObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__QueryObjects, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__QueryObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__QueryObjects %p -> %p\n", q, p));
	*(struct __TMSServ2__QueryObjects*)p = *(struct __TMSServ2__QueryObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__logoutUser(struct soap *soap, struct __TMSServ2__logoutUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__logoutUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__logoutUser(struct soap *soap, const struct __TMSServ2__logoutUser *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__logoutUser(soap, &a->TMSServ__logoutUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__logoutUser(struct soap *soap, const char *tag, int id, const struct __TMSServ2__logoutUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__logoutUser(soap, "TMSServ:logoutUser", -1, &a->TMSServ__logoutUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__logoutUser * SOAP_FMAC4 soap_in___TMSServ2__logoutUser(struct soap *soap, const char *tag, struct __TMSServ2__logoutUser *a, const char *type)
{
	size_t soap_flag_TMSServ__logoutUser = 1;
	short soap_flag;
	a = (struct __TMSServ2__logoutUser *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__logoutUser, sizeof(struct __TMSServ2__logoutUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__logoutUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__logoutUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__logoutUser(soap, "TMSServ:logoutUser", &a->TMSServ__logoutUser, ""))
				{	soap_flag_TMSServ__logoutUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__logoutUser(struct soap *soap, const struct __TMSServ2__logoutUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__logoutUser(soap, tag?tag:"-TMSServ2:logoutUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__logoutUser * SOAP_FMAC4 soap_get___TMSServ2__logoutUser(struct soap *soap, struct __TMSServ2__logoutUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__logoutUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__logoutUser * SOAP_FMAC2 soap_instantiate___TMSServ2__logoutUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__logoutUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__logoutUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__logoutUser);
		if (size)
			*size = sizeof(struct __TMSServ2__logoutUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__logoutUser, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__logoutUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__logoutUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__logoutUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__logoutUser %p -> %p\n", q, p));
	*(struct __TMSServ2__logoutUser*)p = *(struct __TMSServ2__logoutUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__loginUserByByteArr(struct soap *soap, struct __TMSServ2__loginUserByByteArr *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__loginUserByByteArr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__loginUserByByteArr(struct soap *soap, const struct __TMSServ2__loginUserByByteArr *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__loginUserByByteArr(soap, &a->TMSServ__loginUserByByteArr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__loginUserByByteArr(struct soap *soap, const char *tag, int id, const struct __TMSServ2__loginUserByByteArr *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__loginUserByByteArr(soap, "TMSServ:loginUserByByteArr", -1, &a->TMSServ__loginUserByByteArr, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__loginUserByByteArr * SOAP_FMAC4 soap_in___TMSServ2__loginUserByByteArr(struct soap *soap, const char *tag, struct __TMSServ2__loginUserByByteArr *a, const char *type)
{
	size_t soap_flag_TMSServ__loginUserByByteArr = 1;
	short soap_flag;
	a = (struct __TMSServ2__loginUserByByteArr *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__loginUserByByteArr, sizeof(struct __TMSServ2__loginUserByByteArr), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__loginUserByByteArr(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__loginUserByByteArr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__loginUserByByteArr(soap, "TMSServ:loginUserByByteArr", &a->TMSServ__loginUserByByteArr, ""))
				{	soap_flag_TMSServ__loginUserByByteArr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__loginUserByByteArr(struct soap *soap, const struct __TMSServ2__loginUserByByteArr *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__loginUserByByteArr(soap, tag?tag:"-TMSServ2:loginUserByByteArr", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__loginUserByByteArr * SOAP_FMAC4 soap_get___TMSServ2__loginUserByByteArr(struct soap *soap, struct __TMSServ2__loginUserByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__loginUserByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__loginUserByByteArr * SOAP_FMAC2 soap_instantiate___TMSServ2__loginUserByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__loginUserByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__loginUserByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__loginUserByByteArr);
		if (size)
			*size = sizeof(struct __TMSServ2__loginUserByByteArr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__loginUserByByteArr, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__loginUserByByteArr);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__loginUserByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__loginUserByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__loginUserByByteArr %p -> %p\n", q, p));
	*(struct __TMSServ2__loginUserByByteArr*)p = *(struct __TMSServ2__loginUserByByteArr*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___TMSServ2__loginUser(struct soap *soap, struct __TMSServ2__loginUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->TMSServ__loginUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___TMSServ2__loginUser(struct soap *soap, const struct __TMSServ2__loginUser *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_TMSServ__loginUser(soap, &a->TMSServ__loginUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___TMSServ2__loginUser(struct soap *soap, const char *tag, int id, const struct __TMSServ2__loginUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_TMSServ__loginUser(soap, "TMSServ:loginUser", -1, &a->TMSServ__loginUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__loginUser * SOAP_FMAC4 soap_in___TMSServ2__loginUser(struct soap *soap, const char *tag, struct __TMSServ2__loginUser *a, const char *type)
{
	size_t soap_flag_TMSServ__loginUser = 1;
	short soap_flag;
	a = (struct __TMSServ2__loginUser *)soap_id_enter(soap, "", a, SOAP_TYPE___TMSServ2__loginUser, sizeof(struct __TMSServ2__loginUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___TMSServ2__loginUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TMSServ__loginUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_TMSServ__loginUser(soap, "TMSServ:loginUser", &a->TMSServ__loginUser, ""))
				{	soap_flag_TMSServ__loginUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___TMSServ2__loginUser(struct soap *soap, const struct __TMSServ2__loginUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___TMSServ2__loginUser(soap, tag?tag:"-TMSServ2:loginUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __TMSServ2__loginUser * SOAP_FMAC4 soap_get___TMSServ2__loginUser(struct soap *soap, struct __TMSServ2__loginUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___TMSServ2__loginUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __TMSServ2__loginUser * SOAP_FMAC2 soap_instantiate___TMSServ2__loginUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___TMSServ2__loginUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___TMSServ2__loginUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __TMSServ2__loginUser);
		if (size)
			*size = sizeof(struct __TMSServ2__loginUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __TMSServ2__loginUser, n);
		if (size)
			*size = n * sizeof(struct __TMSServ2__loginUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __TMSServ2__loginUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___TMSServ2__loginUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __TMSServ2__loginUser %p -> %p\n", q, p));
	*(struct __TMSServ2__loginUser*)p = *(struct __TMSServ2__loginUser*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__SaveOrUpdateObjects(struct soap *soap, _VersionServ__SaveOrUpdateObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__SaveOrUpdateObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, _VersionServ__SaveOrUpdateObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__SaveOrUpdateObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__SaveOrUpdateObjects ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__SaveOrUpdateObjects(struct soap *soap, const char *tag, _VersionServ__SaveOrUpdateObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__SaveOrUpdateObjects **)soap_malloc(soap, sizeof(_VersionServ__SaveOrUpdateObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__SaveOrUpdateObjects *)soap_instantiate__VersionServ__SaveOrUpdateObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__SaveOrUpdateObjects ** p = (_VersionServ__SaveOrUpdateObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__SaveOrUpdateObjects, sizeof(_VersionServ__SaveOrUpdateObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__SaveOrUpdateObjects(struct soap *soap, _VersionServ__SaveOrUpdateObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__SaveOrUpdateObjects);
	if (soap_out_PointerTo_VersionServ__SaveOrUpdateObjects(soap, tag?tag:"VersionServ:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__SaveOrUpdateObjects ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__SaveOrUpdateObjects(struct soap *soap, _VersionServ__SaveOrUpdateObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__DownloadObjects(struct soap *soap, _VersionServ__DownloadObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__DownloadObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__DownloadObjects(struct soap *soap, const char *tag, int id, _VersionServ__DownloadObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__DownloadObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__DownloadObjects ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__DownloadObjects(struct soap *soap, const char *tag, _VersionServ__DownloadObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__DownloadObjects **)soap_malloc(soap, sizeof(_VersionServ__DownloadObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__DownloadObjects *)soap_instantiate__VersionServ__DownloadObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__DownloadObjects ** p = (_VersionServ__DownloadObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__DownloadObjects, sizeof(_VersionServ__DownloadObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__DownloadObjects(struct soap *soap, _VersionServ__DownloadObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__DownloadObjects);
	if (soap_out_PointerTo_VersionServ__DownloadObjects(soap, tag?tag:"VersionServ:DownloadObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__DownloadObjects ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__DownloadObjects(struct soap *soap, _VersionServ__DownloadObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__QueryObjects(struct soap *soap, _VersionServ__QueryObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__QueryObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__QueryObjects(struct soap *soap, const char *tag, int id, _VersionServ__QueryObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__QueryObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__QueryObjects ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__QueryObjects(struct soap *soap, const char *tag, _VersionServ__QueryObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__QueryObjects **)soap_malloc(soap, sizeof(_VersionServ__QueryObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__QueryObjects *)soap_instantiate__VersionServ__QueryObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__QueryObjects ** p = (_VersionServ__QueryObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__QueryObjects, sizeof(_VersionServ__QueryObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__QueryObjects(struct soap *soap, _VersionServ__QueryObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__QueryObjects);
	if (soap_out_PointerTo_VersionServ__QueryObjects(soap, tag?tag:"VersionServ:QueryObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__QueryObjects ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__QueryObjects(struct soap *soap, _VersionServ__QueryObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__GetFileHeader(struct soap *soap, _VersionServ__GetFileHeader *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__GetFileHeader))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__GetFileHeader(struct soap *soap, const char *tag, int id, _VersionServ__GetFileHeader *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__GetFileHeader);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__GetFileHeader ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__GetFileHeader(struct soap *soap, const char *tag, _VersionServ__GetFileHeader **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__GetFileHeader **)soap_malloc(soap, sizeof(_VersionServ__GetFileHeader *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__GetFileHeader *)soap_instantiate__VersionServ__GetFileHeader(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__GetFileHeader ** p = (_VersionServ__GetFileHeader **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__GetFileHeader, sizeof(_VersionServ__GetFileHeader), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__GetFileHeader(struct soap *soap, _VersionServ__GetFileHeader *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__GetFileHeader);
	if (soap_out_PointerTo_VersionServ__GetFileHeader(soap, tag?tag:"VersionServ:GetFileHeader", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__GetFileHeader ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__GetFileHeader(struct soap *soap, _VersionServ__GetFileHeader **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__GetFileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, _VersionServ__QueryDownLoadItemArrByProductId *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, int id, _VersionServ__QueryDownLoadItemArrByProductId *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__QueryDownLoadItemArrByProductId ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, _VersionServ__QueryDownLoadItemArrByProductId **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__QueryDownLoadItemArrByProductId **)soap_malloc(soap, sizeof(_VersionServ__QueryDownLoadItemArrByProductId *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__QueryDownLoadItemArrByProductId *)soap_instantiate__VersionServ__QueryDownLoadItemArrByProductId(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__QueryDownLoadItemArrByProductId ** p = (_VersionServ__QueryDownLoadItemArrByProductId **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__QueryDownLoadItemArrByProductId, sizeof(_VersionServ__QueryDownLoadItemArrByProductId), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, _VersionServ__QueryDownLoadItemArrByProductId *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__QueryDownLoadItemArrByProductId);
	if (soap_out_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, tag?tag:"VersionServ:QueryDownLoadItemArrByProductId", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__QueryDownLoadItemArrByProductId ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(struct soap *soap, _VersionServ__QueryDownLoadItemArrByProductId **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__QueryDownLoadItemArrByProductId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__GetDogAccessHistory(struct soap *soap, _VersionServ__GetDogAccessHistory *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__GetDogAccessHistory))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__GetDogAccessHistory(struct soap *soap, const char *tag, int id, _VersionServ__GetDogAccessHistory *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__GetDogAccessHistory);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__GetDogAccessHistory ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__GetDogAccessHistory(struct soap *soap, const char *tag, _VersionServ__GetDogAccessHistory **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__GetDogAccessHistory **)soap_malloc(soap, sizeof(_VersionServ__GetDogAccessHistory *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__GetDogAccessHistory *)soap_instantiate__VersionServ__GetDogAccessHistory(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__GetDogAccessHistory ** p = (_VersionServ__GetDogAccessHistory **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__GetDogAccessHistory, sizeof(_VersionServ__GetDogAccessHistory), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__GetDogAccessHistory(struct soap *soap, _VersionServ__GetDogAccessHistory *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__GetDogAccessHistory);
	if (soap_out_PointerTo_VersionServ__GetDogAccessHistory(soap, tag?tag:"VersionServ:GetDogAccessHistory", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__GetDogAccessHistory ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__GetDogAccessHistory(struct soap *soap, _VersionServ__GetDogAccessHistory **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__GetDogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__GetVersionReleaseNotes(struct soap *soap, _VersionServ__GetVersionReleaseNotes *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__GetVersionReleaseNotes))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__GetVersionReleaseNotes(struct soap *soap, const char *tag, int id, _VersionServ__GetVersionReleaseNotes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__GetVersionReleaseNotes);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__GetVersionReleaseNotes ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__GetVersionReleaseNotes(struct soap *soap, const char *tag, _VersionServ__GetVersionReleaseNotes **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__GetVersionReleaseNotes **)soap_malloc(soap, sizeof(_VersionServ__GetVersionReleaseNotes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__GetVersionReleaseNotes *)soap_instantiate__VersionServ__GetVersionReleaseNotes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__GetVersionReleaseNotes ** p = (_VersionServ__GetVersionReleaseNotes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__GetVersionReleaseNotes, sizeof(_VersionServ__GetVersionReleaseNotes), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__GetVersionReleaseNotes(struct soap *soap, _VersionServ__GetVersionReleaseNotes *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__GetVersionReleaseNotes);
	if (soap_out_PointerTo_VersionServ__GetVersionReleaseNotes(soap, tag?tag:"VersionServ:GetVersionReleaseNotes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__GetVersionReleaseNotes ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__GetVersionReleaseNotes(struct soap *soap, _VersionServ__GetVersionReleaseNotes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__GetVersionReleaseNotes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__CompareVersion(struct soap *soap, _VersionServ__CompareVersion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__CompareVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__CompareVersion(struct soap *soap, const char *tag, int id, _VersionServ__CompareVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__CompareVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__CompareVersion ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__CompareVersion(struct soap *soap, const char *tag, _VersionServ__CompareVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__CompareVersion **)soap_malloc(soap, sizeof(_VersionServ__CompareVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__CompareVersion *)soap_instantiate__VersionServ__CompareVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__CompareVersion ** p = (_VersionServ__CompareVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__CompareVersion, sizeof(_VersionServ__CompareVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__CompareVersion(struct soap *soap, _VersionServ__CompareVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__CompareVersion);
	if (soap_out_PointerTo_VersionServ__CompareVersion(soap, tag?tag:"VersionServ:CompareVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__CompareVersion ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__CompareVersion(struct soap *soap, _VersionServ__CompareVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__CompareVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__SetRevisionReadFlag(struct soap *soap, _VersionServ__SetRevisionReadFlag *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__SetRevisionReadFlag))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__SetRevisionReadFlag(struct soap *soap, const char *tag, int id, _VersionServ__SetRevisionReadFlag *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__SetRevisionReadFlag);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__SetRevisionReadFlag ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__SetRevisionReadFlag(struct soap *soap, const char *tag, _VersionServ__SetRevisionReadFlag **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__SetRevisionReadFlag **)soap_malloc(soap, sizeof(_VersionServ__SetRevisionReadFlag *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__SetRevisionReadFlag *)soap_instantiate__VersionServ__SetRevisionReadFlag(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__SetRevisionReadFlag ** p = (_VersionServ__SetRevisionReadFlag **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__SetRevisionReadFlag, sizeof(_VersionServ__SetRevisionReadFlag), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__SetRevisionReadFlag(struct soap *soap, _VersionServ__SetRevisionReadFlag *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__SetRevisionReadFlag);
	if (soap_out_PointerTo_VersionServ__SetRevisionReadFlag(soap, tag?tag:"VersionServ:SetRevisionReadFlag", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__SetRevisionReadFlag ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__SetRevisionReadFlag(struct soap *soap, _VersionServ__SetRevisionReadFlag **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__SetRevisionReadFlag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__GetUpdateVerByCurVer(struct soap *soap, _VersionServ__GetUpdateVerByCurVer *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__GetUpdateVerByCurVer))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__GetUpdateVerByCurVer(struct soap *soap, const char *tag, int id, _VersionServ__GetUpdateVerByCurVer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__GetUpdateVerByCurVer);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__GetUpdateVerByCurVer ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__GetUpdateVerByCurVer(struct soap *soap, const char *tag, _VersionServ__GetUpdateVerByCurVer **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__GetUpdateVerByCurVer **)soap_malloc(soap, sizeof(_VersionServ__GetUpdateVerByCurVer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__GetUpdateVerByCurVer *)soap_instantiate__VersionServ__GetUpdateVerByCurVer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__GetUpdateVerByCurVer ** p = (_VersionServ__GetUpdateVerByCurVer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__GetUpdateVerByCurVer, sizeof(_VersionServ__GetUpdateVerByCurVer), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__GetUpdateVerByCurVer(struct soap *soap, _VersionServ__GetUpdateVerByCurVer *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__GetUpdateVerByCurVer);
	if (soap_out_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, tag?tag:"VersionServ:GetUpdateVerByCurVer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__GetUpdateVerByCurVer ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__GetUpdateVerByCurVer(struct soap *soap, _VersionServ__GetUpdateVerByCurVer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__GetUpdateVerByCurVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__LoginByByteArr(struct soap *soap, _VersionServ__LoginByByteArr *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__LoginByByteArr))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__LoginByByteArr(struct soap *soap, const char *tag, int id, _VersionServ__LoginByByteArr *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__LoginByByteArr);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__LoginByByteArr ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__LoginByByteArr(struct soap *soap, const char *tag, _VersionServ__LoginByByteArr **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__LoginByByteArr **)soap_malloc(soap, sizeof(_VersionServ__LoginByByteArr *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__LoginByByteArr *)soap_instantiate__VersionServ__LoginByByteArr(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__LoginByByteArr ** p = (_VersionServ__LoginByByteArr **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__LoginByByteArr, sizeof(_VersionServ__LoginByByteArr), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__LoginByByteArr(struct soap *soap, _VersionServ__LoginByByteArr *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__LoginByByteArr);
	if (soap_out_PointerTo_VersionServ__LoginByByteArr(soap, tag?tag:"VersionServ:LoginByByteArr", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__LoginByByteArr ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__LoginByByteArr(struct soap *soap, _VersionServ__LoginByByteArr **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__LoginByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_VersionServ__Login(struct soap *soap, _VersionServ__Login *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__VersionServ__Login))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_VersionServ__Login(struct soap *soap, const char *tag, int id, _VersionServ__Login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__VersionServ__Login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _VersionServ__Login ** SOAP_FMAC4 soap_in_PointerTo_VersionServ__Login(struct soap *soap, const char *tag, _VersionServ__Login **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_VersionServ__Login **)soap_malloc(soap, sizeof(_VersionServ__Login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_VersionServ__Login *)soap_instantiate__VersionServ__Login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_VersionServ__Login ** p = (_VersionServ__Login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__VersionServ__Login, sizeof(_VersionServ__Login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_VersionServ__Login(struct soap *soap, _VersionServ__Login *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_VersionServ__Login);
	if (soap_out_PointerTo_VersionServ__Login(soap, tag?tag:"VersionServ:Login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _VersionServ__Login ** SOAP_FMAC4 soap_get_PointerTo_VersionServ__Login(struct soap *soap, _VersionServ__Login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_VersionServ__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__FileHeader(struct soap *soap, VersionServ__FileHeader *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__FileHeader))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__FileHeader(struct soap *soap, const char *tag, int id, VersionServ__FileHeader *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__FileHeader);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__FileHeader ** SOAP_FMAC4 soap_in_PointerToVersionServ__FileHeader(struct soap *soap, const char *tag, VersionServ__FileHeader **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__FileHeader **)soap_malloc(soap, sizeof(VersionServ__FileHeader *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__FileHeader *)soap_instantiate_VersionServ__FileHeader(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__FileHeader ** p = (VersionServ__FileHeader **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__FileHeader, sizeof(VersionServ__FileHeader), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__FileHeader(struct soap *soap, VersionServ__FileHeader *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__FileHeader);
	if (soap_out_PointerToVersionServ__FileHeader(soap, tag?tag:"VersionServ:FileHeader", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__FileHeader ** SOAP_FMAC4 soap_get_PointerToVersionServ__FileHeader(struct soap *soap, VersionServ__FileHeader **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__FileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__ArrayOfDownLoadItem(struct soap *soap, VersionServ__ArrayOfDownLoadItem *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__ArrayOfDownLoadItem))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__ArrayOfDownLoadItem(struct soap *soap, const char *tag, int id, VersionServ__ArrayOfDownLoadItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__ArrayOfDownLoadItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__ArrayOfDownLoadItem ** SOAP_FMAC4 soap_in_PointerToVersionServ__ArrayOfDownLoadItem(struct soap *soap, const char *tag, VersionServ__ArrayOfDownLoadItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__ArrayOfDownLoadItem **)soap_malloc(soap, sizeof(VersionServ__ArrayOfDownLoadItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__ArrayOfDownLoadItem *)soap_instantiate_VersionServ__ArrayOfDownLoadItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__ArrayOfDownLoadItem ** p = (VersionServ__ArrayOfDownLoadItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__ArrayOfDownLoadItem, sizeof(VersionServ__ArrayOfDownLoadItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__ArrayOfDownLoadItem(struct soap *soap, VersionServ__ArrayOfDownLoadItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__ArrayOfDownLoadItem);
	if (soap_out_PointerToVersionServ__ArrayOfDownLoadItem(soap, tag?tag:"VersionServ:ArrayOfDownLoadItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__ArrayOfDownLoadItem ** SOAP_FMAC4 soap_get_PointerToVersionServ__ArrayOfDownLoadItem(struct soap *soap, VersionServ__ArrayOfDownLoadItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__ArrayOfDownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__DogAccessHistory(struct soap *soap, VersionServ__DogAccessHistory *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__DogAccessHistory))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__DogAccessHistory(struct soap *soap, const char *tag, int id, VersionServ__DogAccessHistory *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__DogAccessHistory);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__DogAccessHistory ** SOAP_FMAC4 soap_in_PointerToVersionServ__DogAccessHistory(struct soap *soap, const char *tag, VersionServ__DogAccessHistory **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__DogAccessHistory **)soap_malloc(soap, sizeof(VersionServ__DogAccessHistory *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__DogAccessHistory *)soap_instantiate_VersionServ__DogAccessHistory(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__DogAccessHistory ** p = (VersionServ__DogAccessHistory **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__DogAccessHistory, sizeof(VersionServ__DogAccessHistory), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__DogAccessHistory(struct soap *soap, VersionServ__DogAccessHistory *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__DogAccessHistory);
	if (soap_out_PointerToVersionServ__DogAccessHistory(soap, tag?tag:"VersionServ:DogAccessHistory", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__DogAccessHistory ** SOAP_FMAC4 soap_get_PointerToVersionServ__DogAccessHistory(struct soap *soap, VersionServ__DogAccessHistory **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__DogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__ArrayOfVersionRevision(struct soap *soap, VersionServ__ArrayOfVersionRevision *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__ArrayOfVersionRevision))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__ArrayOfVersionRevision(struct soap *soap, const char *tag, int id, VersionServ__ArrayOfVersionRevision *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__ArrayOfVersionRevision);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__ArrayOfVersionRevision ** SOAP_FMAC4 soap_in_PointerToVersionServ__ArrayOfVersionRevision(struct soap *soap, const char *tag, VersionServ__ArrayOfVersionRevision **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__ArrayOfVersionRevision **)soap_malloc(soap, sizeof(VersionServ__ArrayOfVersionRevision *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__ArrayOfVersionRevision *)soap_instantiate_VersionServ__ArrayOfVersionRevision(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__ArrayOfVersionRevision ** p = (VersionServ__ArrayOfVersionRevision **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__ArrayOfVersionRevision, sizeof(VersionServ__ArrayOfVersionRevision), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__ArrayOfVersionRevision(struct soap *soap, VersionServ__ArrayOfVersionRevision *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__ArrayOfVersionRevision);
	if (soap_out_PointerToVersionServ__ArrayOfVersionRevision(soap, tag?tag:"VersionServ:ArrayOfVersionRevision", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__ArrayOfVersionRevision ** SOAP_FMAC4 soap_get_PointerToVersionServ__ArrayOfVersionRevision(struct soap *soap, VersionServ__ArrayOfVersionRevision **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__ArrayOfVersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__ArrayOfInt(struct soap *soap, VersionServ__ArrayOfInt *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__ArrayOfInt))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__ArrayOfInt(struct soap *soap, const char *tag, int id, VersionServ__ArrayOfInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__ArrayOfInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__ArrayOfInt ** SOAP_FMAC4 soap_in_PointerToVersionServ__ArrayOfInt(struct soap *soap, const char *tag, VersionServ__ArrayOfInt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__ArrayOfInt **)soap_malloc(soap, sizeof(VersionServ__ArrayOfInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__ArrayOfInt *)soap_instantiate_VersionServ__ArrayOfInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__ArrayOfInt ** p = (VersionServ__ArrayOfInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__ArrayOfInt, sizeof(VersionServ__ArrayOfInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__ArrayOfInt(struct soap *soap, VersionServ__ArrayOfInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__ArrayOfInt);
	if (soap_out_PointerToVersionServ__ArrayOfInt(soap, tag?tag:"VersionServ:ArrayOfInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__ArrayOfInt ** SOAP_FMAC4 soap_get_PointerToVersionServ__ArrayOfInt(struct soap *soap, VersionServ__ArrayOfInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__ArrayOfProductVersion(struct soap *soap, VersionServ__ArrayOfProductVersion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__ArrayOfProductVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__ArrayOfProductVersion(struct soap *soap, const char *tag, int id, VersionServ__ArrayOfProductVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__ArrayOfProductVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__ArrayOfProductVersion ** SOAP_FMAC4 soap_in_PointerToVersionServ__ArrayOfProductVersion(struct soap *soap, const char *tag, VersionServ__ArrayOfProductVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__ArrayOfProductVersion **)soap_malloc(soap, sizeof(VersionServ__ArrayOfProductVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__ArrayOfProductVersion *)soap_instantiate_VersionServ__ArrayOfProductVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__ArrayOfProductVersion ** p = (VersionServ__ArrayOfProductVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__ArrayOfProductVersion, sizeof(VersionServ__ArrayOfProductVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__ArrayOfProductVersion(struct soap *soap, VersionServ__ArrayOfProductVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__ArrayOfProductVersion);
	if (soap_out_PointerToVersionServ__ArrayOfProductVersion(soap, tag?tag:"VersionServ:ArrayOfProductVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__ArrayOfProductVersion ** SOAP_FMAC4 soap_get_PointerToVersionServ__ArrayOfProductVersion(struct soap *soap, VersionServ__ArrayOfProductVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__ArrayOfProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToVersionServ__DownLoadItem(struct soap *soap, VersionServ__DownLoadItem **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToVersionServ__DownLoadItem))
		soap_serialize_PointerToVersionServ__DownLoadItem(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToVersionServ__DownLoadItem(struct soap *soap, const char *tag, int id, VersionServ__DownLoadItem **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToVersionServ__DownLoadItem);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToVersionServ__DownLoadItem(soap, tag, id, *a, type);
}

SOAP_FMAC3 VersionServ__DownLoadItem *** SOAP_FMAC4 soap_in_PointerToPointerToVersionServ__DownLoadItem(struct soap *soap, const char *tag, VersionServ__DownLoadItem ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__DownLoadItem ***)soap_malloc(soap, sizeof(VersionServ__DownLoadItem **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToVersionServ__DownLoadItem(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (VersionServ__DownLoadItem ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToVersionServ__DownLoadItem, sizeof(VersionServ__DownLoadItem *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToVersionServ__DownLoadItem(struct soap *soap, VersionServ__DownLoadItem **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToVersionServ__DownLoadItem);
	if (soap_out_PointerToPointerToVersionServ__DownLoadItem(soap, tag?tag:"VersionServ:DownLoadItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__DownLoadItem *** SOAP_FMAC4 soap_get_PointerToPointerToVersionServ__DownLoadItem(struct soap *soap, VersionServ__DownLoadItem ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToVersionServ__DownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__DownLoadItem(struct soap *soap, VersionServ__DownLoadItem *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__DownLoadItem))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__DownLoadItem(struct soap *soap, const char *tag, int id, VersionServ__DownLoadItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__DownLoadItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__DownLoadItem ** SOAP_FMAC4 soap_in_PointerToVersionServ__DownLoadItem(struct soap *soap, const char *tag, VersionServ__DownLoadItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__DownLoadItem **)soap_malloc(soap, sizeof(VersionServ__DownLoadItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__DownLoadItem *)soap_instantiate_VersionServ__DownLoadItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__DownLoadItem ** p = (VersionServ__DownLoadItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__DownLoadItem, sizeof(VersionServ__DownLoadItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__DownLoadItem(struct soap *soap, VersionServ__DownLoadItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__DownLoadItem);
	if (soap_out_PointerToVersionServ__DownLoadItem(soap, tag?tag:"VersionServ:DownLoadItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__DownLoadItem ** SOAP_FMAC4 soap_get_PointerToVersionServ__DownLoadItem(struct soap *soap, VersionServ__DownLoadItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__DownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToVersionServ__VersionRevision(struct soap *soap, VersionServ__VersionRevision **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToVersionServ__VersionRevision))
		soap_serialize_PointerToVersionServ__VersionRevision(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToVersionServ__VersionRevision(struct soap *soap, const char *tag, int id, VersionServ__VersionRevision **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToVersionServ__VersionRevision);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToVersionServ__VersionRevision(soap, tag, id, *a, type);
}

SOAP_FMAC3 VersionServ__VersionRevision *** SOAP_FMAC4 soap_in_PointerToPointerToVersionServ__VersionRevision(struct soap *soap, const char *tag, VersionServ__VersionRevision ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__VersionRevision ***)soap_malloc(soap, sizeof(VersionServ__VersionRevision **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToVersionServ__VersionRevision(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (VersionServ__VersionRevision ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToVersionServ__VersionRevision, sizeof(VersionServ__VersionRevision *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToVersionServ__VersionRevision(struct soap *soap, VersionServ__VersionRevision **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToVersionServ__VersionRevision);
	if (soap_out_PointerToPointerToVersionServ__VersionRevision(soap, tag?tag:"VersionServ:VersionRevision", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__VersionRevision *** SOAP_FMAC4 soap_get_PointerToPointerToVersionServ__VersionRevision(struct soap *soap, VersionServ__VersionRevision ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToVersionServ__VersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__VersionRevision(struct soap *soap, VersionServ__VersionRevision *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__VersionRevision))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__VersionRevision(struct soap *soap, const char *tag, int id, VersionServ__VersionRevision *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__VersionRevision);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__VersionRevision ** SOAP_FMAC4 soap_in_PointerToVersionServ__VersionRevision(struct soap *soap, const char *tag, VersionServ__VersionRevision **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__VersionRevision **)soap_malloc(soap, sizeof(VersionServ__VersionRevision *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__VersionRevision *)soap_instantiate_VersionServ__VersionRevision(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__VersionRevision ** p = (VersionServ__VersionRevision **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__VersionRevision, sizeof(VersionServ__VersionRevision), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__VersionRevision(struct soap *soap, VersionServ__VersionRevision *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__VersionRevision);
	if (soap_out_PointerToVersionServ__VersionRevision(soap, tag?tag:"VersionServ:VersionRevision", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__VersionRevision ** SOAP_FMAC4 soap_get_PointerToVersionServ__VersionRevision(struct soap *soap, VersionServ__VersionRevision **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__VersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToVersionServ__ProductVersion(struct soap *soap, VersionServ__ProductVersion **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToVersionServ__ProductVersion))
		soap_serialize_PointerToVersionServ__ProductVersion(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToVersionServ__ProductVersion(struct soap *soap, const char *tag, int id, VersionServ__ProductVersion **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToVersionServ__ProductVersion);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToVersionServ__ProductVersion(soap, tag, id, *a, type);
}

SOAP_FMAC3 VersionServ__ProductVersion *** SOAP_FMAC4 soap_in_PointerToPointerToVersionServ__ProductVersion(struct soap *soap, const char *tag, VersionServ__ProductVersion ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__ProductVersion ***)soap_malloc(soap, sizeof(VersionServ__ProductVersion **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToVersionServ__ProductVersion(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (VersionServ__ProductVersion ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToVersionServ__ProductVersion, sizeof(VersionServ__ProductVersion *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToVersionServ__ProductVersion(struct soap *soap, VersionServ__ProductVersion **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToVersionServ__ProductVersion);
	if (soap_out_PointerToPointerToVersionServ__ProductVersion(soap, tag?tag:"VersionServ:ProductVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__ProductVersion *** SOAP_FMAC4 soap_get_PointerToPointerToVersionServ__ProductVersion(struct soap *soap, VersionServ__ProductVersion ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToVersionServ__ProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToVersionServ__ProductVersion(struct soap *soap, VersionServ__ProductVersion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_VersionServ__ProductVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToVersionServ__ProductVersion(struct soap *soap, const char *tag, int id, VersionServ__ProductVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_VersionServ__ProductVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 VersionServ__ProductVersion ** SOAP_FMAC4 soap_in_PointerToVersionServ__ProductVersion(struct soap *soap, const char *tag, VersionServ__ProductVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (VersionServ__ProductVersion **)soap_malloc(soap, sizeof(VersionServ__ProductVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (VersionServ__ProductVersion *)soap_instantiate_VersionServ__ProductVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	VersionServ__ProductVersion ** p = (VersionServ__ProductVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_VersionServ__ProductVersion, sizeof(VersionServ__ProductVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToVersionServ__ProductVersion(struct soap *soap, VersionServ__ProductVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToVersionServ__ProductVersion);
	if (soap_out_PointerToVersionServ__ProductVersion(soap, tag?tag:"VersionServ:ProductVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 VersionServ__ProductVersion ** SOAP_FMAC4 soap_get_PointerToVersionServ__ProductVersion(struct soap *soap, VersionServ__ProductVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToVersionServ__ProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__CloseFileObjectDataProvider(struct soap *soap, _TMSServ__CloseFileObjectDataProvider *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__CloseFileObjectDataProvider))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__CloseFileObjectDataProvider(struct soap *soap, const char *tag, int id, _TMSServ__CloseFileObjectDataProvider *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__CloseFileObjectDataProvider);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__CloseFileObjectDataProvider ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__CloseFileObjectDataProvider(struct soap *soap, const char *tag, _TMSServ__CloseFileObjectDataProvider **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__CloseFileObjectDataProvider **)soap_malloc(soap, sizeof(_TMSServ__CloseFileObjectDataProvider *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__CloseFileObjectDataProvider *)soap_instantiate__TMSServ__CloseFileObjectDataProvider(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__CloseFileObjectDataProvider ** p = (_TMSServ__CloseFileObjectDataProvider **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__CloseFileObjectDataProvider, sizeof(_TMSServ__CloseFileObjectDataProvider), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__CloseFileObjectDataProvider(struct soap *soap, _TMSServ__CloseFileObjectDataProvider *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__CloseFileObjectDataProvider);
	if (soap_out_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, tag?tag:"TMSServ:CloseFileObjectDataProvider", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__CloseFileObjectDataProvider ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__CloseFileObjectDataProvider(struct soap *soap, _TMSServ__CloseFileObjectDataProvider **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__CloseFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__DownloadFileObject(struct soap *soap, _TMSServ__DownloadFileObject *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__DownloadFileObject))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__DownloadFileObject(struct soap *soap, const char *tag, int id, _TMSServ__DownloadFileObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__DownloadFileObject);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileObject ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__DownloadFileObject(struct soap *soap, const char *tag, _TMSServ__DownloadFileObject **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__DownloadFileObject **)soap_malloc(soap, sizeof(_TMSServ__DownloadFileObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__DownloadFileObject *)soap_instantiate__TMSServ__DownloadFileObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__DownloadFileObject ** p = (_TMSServ__DownloadFileObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__DownloadFileObject, sizeof(_TMSServ__DownloadFileObject), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__DownloadFileObject(struct soap *soap, _TMSServ__DownloadFileObject *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__DownloadFileObject);
	if (soap_out_PointerTo_TMSServ__DownloadFileObject(soap, tag?tag:"TMSServ:DownloadFileObject", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__DownloadFileObject ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__DownloadFileObject(struct soap *soap, _TMSServ__DownloadFileObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__DownloadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__OpenServerObjectDataProvider(struct soap *soap, _TMSServ__OpenServerObjectDataProvider *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__OpenServerObjectDataProvider))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__OpenServerObjectDataProvider(struct soap *soap, const char *tag, int id, _TMSServ__OpenServerObjectDataProvider *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__OpenServerObjectDataProvider);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__OpenServerObjectDataProvider ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__OpenServerObjectDataProvider(struct soap *soap, const char *tag, _TMSServ__OpenServerObjectDataProvider **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__OpenServerObjectDataProvider **)soap_malloc(soap, sizeof(_TMSServ__OpenServerObjectDataProvider *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__OpenServerObjectDataProvider *)soap_instantiate__TMSServ__OpenServerObjectDataProvider(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__OpenServerObjectDataProvider ** p = (_TMSServ__OpenServerObjectDataProvider **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__OpenServerObjectDataProvider, sizeof(_TMSServ__OpenServerObjectDataProvider), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__OpenServerObjectDataProvider(struct soap *soap, _TMSServ__OpenServerObjectDataProvider *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__OpenServerObjectDataProvider);
	if (soap_out_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, tag?tag:"TMSServ:OpenServerObjectDataProvider", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__OpenServerObjectDataProvider ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__OpenServerObjectDataProvider(struct soap *soap, _TMSServ__OpenServerObjectDataProvider **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__OpenServerObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__OpenTapModelDataProvider(struct soap *soap, _TMSServ__OpenTapModelDataProvider *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__OpenTapModelDataProvider))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__OpenTapModelDataProvider(struct soap *soap, const char *tag, int id, _TMSServ__OpenTapModelDataProvider *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__OpenTapModelDataProvider);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__OpenTapModelDataProvider ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__OpenTapModelDataProvider(struct soap *soap, const char *tag, _TMSServ__OpenTapModelDataProvider **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__OpenTapModelDataProvider **)soap_malloc(soap, sizeof(_TMSServ__OpenTapModelDataProvider *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__OpenTapModelDataProvider *)soap_instantiate__TMSServ__OpenTapModelDataProvider(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__OpenTapModelDataProvider ** p = (_TMSServ__OpenTapModelDataProvider **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__OpenTapModelDataProvider, sizeof(_TMSServ__OpenTapModelDataProvider), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__OpenTapModelDataProvider(struct soap *soap, _TMSServ__OpenTapModelDataProvider *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__OpenTapModelDataProvider);
	if (soap_out_PointerTo_TMSServ__OpenTapModelDataProvider(soap, tag?tag:"TMSServ:OpenTapModelDataProvider", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__OpenTapModelDataProvider ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__OpenTapModelDataProvider(struct soap *soap, _TMSServ__OpenTapModelDataProvider **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__OpenTapModelDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__OpenFileObjectDataProvider(struct soap *soap, _TMSServ__OpenFileObjectDataProvider *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__OpenFileObjectDataProvider))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__OpenFileObjectDataProvider(struct soap *soap, const char *tag, int id, _TMSServ__OpenFileObjectDataProvider *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__OpenFileObjectDataProvider);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__OpenFileObjectDataProvider ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__OpenFileObjectDataProvider(struct soap *soap, const char *tag, _TMSServ__OpenFileObjectDataProvider **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__OpenFileObjectDataProvider **)soap_malloc(soap, sizeof(_TMSServ__OpenFileObjectDataProvider *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__OpenFileObjectDataProvider *)soap_instantiate__TMSServ__OpenFileObjectDataProvider(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__OpenFileObjectDataProvider ** p = (_TMSServ__OpenFileObjectDataProvider **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__OpenFileObjectDataProvider, sizeof(_TMSServ__OpenFileObjectDataProvider), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__OpenFileObjectDataProvider(struct soap *soap, _TMSServ__OpenFileObjectDataProvider *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__OpenFileObjectDataProvider);
	if (soap_out_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, tag?tag:"TMSServ:OpenFileObjectDataProvider", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__OpenFileObjectDataProvider ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__OpenFileObjectDataProvider(struct soap *soap, _TMSServ__OpenFileObjectDataProvider **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__OpenFileObjectDataProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__FinalizeFileObjectData(struct soap *soap, _TMSServ__FinalizeFileObjectData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__FinalizeFileObjectData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__FinalizeFileObjectData(struct soap *soap, const char *tag, int id, _TMSServ__FinalizeFileObjectData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__FinalizeFileObjectData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__FinalizeFileObjectData ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__FinalizeFileObjectData(struct soap *soap, const char *tag, _TMSServ__FinalizeFileObjectData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__FinalizeFileObjectData **)soap_malloc(soap, sizeof(_TMSServ__FinalizeFileObjectData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__FinalizeFileObjectData *)soap_instantiate__TMSServ__FinalizeFileObjectData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__FinalizeFileObjectData ** p = (_TMSServ__FinalizeFileObjectData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__FinalizeFileObjectData, sizeof(_TMSServ__FinalizeFileObjectData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__FinalizeFileObjectData(struct soap *soap, _TMSServ__FinalizeFileObjectData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__FinalizeFileObjectData);
	if (soap_out_PointerTo_TMSServ__FinalizeFileObjectData(soap, tag?tag:"TMSServ:FinalizeFileObjectData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__FinalizeFileObjectData ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__FinalizeFileObjectData(struct soap *soap, _TMSServ__FinalizeFileObjectData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__FinalizeFileObjectData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__UploadFileObject(struct soap *soap, _TMSServ__UploadFileObject *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__UploadFileObject))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__UploadFileObject(struct soap *soap, const char *tag, int id, _TMSServ__UploadFileObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__UploadFileObject);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__UploadFileObject ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__UploadFileObject(struct soap *soap, const char *tag, _TMSServ__UploadFileObject **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__UploadFileObject **)soap_malloc(soap, sizeof(_TMSServ__UploadFileObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__UploadFileObject *)soap_instantiate__TMSServ__UploadFileObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__UploadFileObject ** p = (_TMSServ__UploadFileObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__UploadFileObject, sizeof(_TMSServ__UploadFileObject), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__UploadFileObject(struct soap *soap, _TMSServ__UploadFileObject *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__UploadFileObject);
	if (soap_out_PointerTo_TMSServ__UploadFileObject(soap, tag?tag:"TMSServ:UploadFileObject", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__UploadFileObject ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__UploadFileObject(struct soap *soap, _TMSServ__UploadFileObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__UploadFileObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__DownloadFileById(struct soap *soap, _TMSServ__DownloadFileById *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__DownloadFileById))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__DownloadFileById(struct soap *soap, const char *tag, int id, _TMSServ__DownloadFileById *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__DownloadFileById);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__DownloadFileById ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__DownloadFileById(struct soap *soap, const char *tag, _TMSServ__DownloadFileById **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__DownloadFileById **)soap_malloc(soap, sizeof(_TMSServ__DownloadFileById *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__DownloadFileById *)soap_instantiate__TMSServ__DownloadFileById(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__DownloadFileById ** p = (_TMSServ__DownloadFileById **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__DownloadFileById, sizeof(_TMSServ__DownloadFileById), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__DownloadFileById(struct soap *soap, _TMSServ__DownloadFileById *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__DownloadFileById);
	if (soap_out_PointerTo_TMSServ__DownloadFileById(soap, tag?tag:"TMSServ:DownloadFileById", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__DownloadFileById ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__DownloadFileById(struct soap *soap, _TMSServ__DownloadFileById **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__DownloadFileById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__DeleteObject(struct soap *soap, _TMSServ__DeleteObject *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__DeleteObject))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__DeleteObject(struct soap *soap, const char *tag, int id, _TMSServ__DeleteObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__DeleteObject);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__DeleteObject ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__DeleteObject(struct soap *soap, const char *tag, _TMSServ__DeleteObject **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__DeleteObject **)soap_malloc(soap, sizeof(_TMSServ__DeleteObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__DeleteObject *)soap_instantiate__TMSServ__DeleteObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__DeleteObject ** p = (_TMSServ__DeleteObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__DeleteObject, sizeof(_TMSServ__DeleteObject), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__DeleteObject(struct soap *soap, _TMSServ__DeleteObject *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__DeleteObject);
	if (soap_out_PointerTo_TMSServ__DeleteObject(soap, tag?tag:"TMSServ:DeleteObject", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__DeleteObject ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__DeleteObject(struct soap *soap, _TMSServ__DeleteObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__DeleteObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__SaveOrUpdateObjects(struct soap *soap, _TMSServ__SaveOrUpdateObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__SaveOrUpdateObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, _TMSServ__SaveOrUpdateObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__SaveOrUpdateObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__SaveOrUpdateObjects ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__SaveOrUpdateObjects(struct soap *soap, const char *tag, _TMSServ__SaveOrUpdateObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__SaveOrUpdateObjects **)soap_malloc(soap, sizeof(_TMSServ__SaveOrUpdateObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__SaveOrUpdateObjects *)soap_instantiate__TMSServ__SaveOrUpdateObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__SaveOrUpdateObjects ** p = (_TMSServ__SaveOrUpdateObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__SaveOrUpdateObjects, sizeof(_TMSServ__SaveOrUpdateObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__SaveOrUpdateObjects(struct soap *soap, _TMSServ__SaveOrUpdateObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__SaveOrUpdateObjects);
	if (soap_out_PointerTo_TMSServ__SaveOrUpdateObjects(soap, tag?tag:"TMSServ:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__SaveOrUpdateObjects ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__SaveOrUpdateObjects(struct soap *soap, _TMSServ__SaveOrUpdateObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__MatchTowerParts(struct soap *soap, _TMSServ__MatchTowerParts *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__MatchTowerParts))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__MatchTowerParts(struct soap *soap, const char *tag, int id, _TMSServ__MatchTowerParts *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__MatchTowerParts);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__MatchTowerParts ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__MatchTowerParts(struct soap *soap, const char *tag, _TMSServ__MatchTowerParts **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__MatchTowerParts **)soap_malloc(soap, sizeof(_TMSServ__MatchTowerParts *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__MatchTowerParts *)soap_instantiate__TMSServ__MatchTowerParts(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__MatchTowerParts ** p = (_TMSServ__MatchTowerParts **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__MatchTowerParts, sizeof(_TMSServ__MatchTowerParts), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__MatchTowerParts(struct soap *soap, _TMSServ__MatchTowerParts *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__MatchTowerParts);
	if (soap_out_PointerTo_TMSServ__MatchTowerParts(soap, tag?tag:"TMSServ:MatchTowerParts", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__MatchTowerParts ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__MatchTowerParts(struct soap *soap, _TMSServ__MatchTowerParts **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__MatchTowerParts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, _TMSServ__GetTowerPartsLabelAndVersionSerial *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, int id, _TMSServ__GetTowerPartsLabelAndVersionSerial *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__GetTowerPartsLabelAndVersionSerial ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, const char *tag, _TMSServ__GetTowerPartsLabelAndVersionSerial **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__GetTowerPartsLabelAndVersionSerial **)soap_malloc(soap, sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerial *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__GetTowerPartsLabelAndVersionSerial *)soap_instantiate__TMSServ__GetTowerPartsLabelAndVersionSerial(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__GetTowerPartsLabelAndVersionSerial ** p = (_TMSServ__GetTowerPartsLabelAndVersionSerial **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__GetTowerPartsLabelAndVersionSerial, sizeof(_TMSServ__GetTowerPartsLabelAndVersionSerial), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, _TMSServ__GetTowerPartsLabelAndVersionSerial *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial);
	if (soap_out_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, tag?tag:"TMSServ:GetTowerPartsLabelAndVersionSerial", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__GetTowerPartsLabelAndVersionSerial ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(struct soap *soap, _TMSServ__GetTowerPartsLabelAndVersionSerial **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__GetTowerPartsLabelAndVersionSerial(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__GetObjectsVersion(struct soap *soap, _TMSServ__GetObjectsVersion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__GetObjectsVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__GetObjectsVersion(struct soap *soap, const char *tag, int id, _TMSServ__GetObjectsVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__GetObjectsVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__GetObjectsVersion ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__GetObjectsVersion(struct soap *soap, const char *tag, _TMSServ__GetObjectsVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__GetObjectsVersion **)soap_malloc(soap, sizeof(_TMSServ__GetObjectsVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__GetObjectsVersion *)soap_instantiate__TMSServ__GetObjectsVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__GetObjectsVersion ** p = (_TMSServ__GetObjectsVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__GetObjectsVersion, sizeof(_TMSServ__GetObjectsVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__GetObjectsVersion(struct soap *soap, _TMSServ__GetObjectsVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__GetObjectsVersion);
	if (soap_out_PointerTo_TMSServ__GetObjectsVersion(soap, tag?tag:"TMSServ:GetObjectsVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__GetObjectsVersion ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__GetObjectsVersion(struct soap *soap, _TMSServ__GetObjectsVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__GetObjectsVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__DownloadObjects(struct soap *soap, _TMSServ__DownloadObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__DownloadObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__DownloadObjects(struct soap *soap, const char *tag, int id, _TMSServ__DownloadObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__DownloadObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__DownloadObjects ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__DownloadObjects(struct soap *soap, const char *tag, _TMSServ__DownloadObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__DownloadObjects **)soap_malloc(soap, sizeof(_TMSServ__DownloadObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__DownloadObjects *)soap_instantiate__TMSServ__DownloadObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__DownloadObjects ** p = (_TMSServ__DownloadObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__DownloadObjects, sizeof(_TMSServ__DownloadObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__DownloadObjects(struct soap *soap, _TMSServ__DownloadObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__DownloadObjects);
	if (soap_out_PointerTo_TMSServ__DownloadObjects(soap, tag?tag:"TMSServ:DownloadObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__DownloadObjects ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__DownloadObjects(struct soap *soap, _TMSServ__DownloadObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__QueryObjects(struct soap *soap, _TMSServ__QueryObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__QueryObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__QueryObjects(struct soap *soap, const char *tag, int id, _TMSServ__QueryObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__QueryObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__QueryObjects ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__QueryObjects(struct soap *soap, const char *tag, _TMSServ__QueryObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__QueryObjects **)soap_malloc(soap, sizeof(_TMSServ__QueryObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__QueryObjects *)soap_instantiate__TMSServ__QueryObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__QueryObjects ** p = (_TMSServ__QueryObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__QueryObjects, sizeof(_TMSServ__QueryObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__QueryObjects(struct soap *soap, _TMSServ__QueryObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__QueryObjects);
	if (soap_out_PointerTo_TMSServ__QueryObjects(soap, tag?tag:"TMSServ:QueryObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__QueryObjects ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__QueryObjects(struct soap *soap, _TMSServ__QueryObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__logoutUser(struct soap *soap, _TMSServ__logoutUser *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__logoutUser))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__logoutUser(struct soap *soap, const char *tag, int id, _TMSServ__logoutUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__logoutUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__logoutUser ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__logoutUser(struct soap *soap, const char *tag, _TMSServ__logoutUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__logoutUser **)soap_malloc(soap, sizeof(_TMSServ__logoutUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__logoutUser *)soap_instantiate__TMSServ__logoutUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__logoutUser ** p = (_TMSServ__logoutUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__logoutUser, sizeof(_TMSServ__logoutUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__logoutUser(struct soap *soap, _TMSServ__logoutUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__logoutUser);
	if (soap_out_PointerTo_TMSServ__logoutUser(soap, tag?tag:"TMSServ:logoutUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__logoutUser ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__logoutUser(struct soap *soap, _TMSServ__logoutUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__logoutUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__loginUserByByteArr(struct soap *soap, _TMSServ__loginUserByByteArr *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__loginUserByByteArr))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__loginUserByByteArr(struct soap *soap, const char *tag, int id, _TMSServ__loginUserByByteArr *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__loginUserByByteArr);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__loginUserByByteArr ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__loginUserByByteArr(struct soap *soap, const char *tag, _TMSServ__loginUserByByteArr **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__loginUserByByteArr **)soap_malloc(soap, sizeof(_TMSServ__loginUserByByteArr *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__loginUserByByteArr *)soap_instantiate__TMSServ__loginUserByByteArr(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__loginUserByByteArr ** p = (_TMSServ__loginUserByByteArr **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__loginUserByByteArr, sizeof(_TMSServ__loginUserByByteArr), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__loginUserByByteArr(struct soap *soap, _TMSServ__loginUserByByteArr *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__loginUserByByteArr);
	if (soap_out_PointerTo_TMSServ__loginUserByByteArr(soap, tag?tag:"TMSServ:loginUserByByteArr", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__loginUserByByteArr ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__loginUserByByteArr(struct soap *soap, _TMSServ__loginUserByByteArr **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__loginUserByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_TMSServ__loginUser(struct soap *soap, _TMSServ__loginUser *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__TMSServ__loginUser))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_TMSServ__loginUser(struct soap *soap, const char *tag, int id, _TMSServ__loginUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__TMSServ__loginUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _TMSServ__loginUser ** SOAP_FMAC4 soap_in_PointerTo_TMSServ__loginUser(struct soap *soap, const char *tag, _TMSServ__loginUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_TMSServ__loginUser **)soap_malloc(soap, sizeof(_TMSServ__loginUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_TMSServ__loginUser *)soap_instantiate__TMSServ__loginUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_TMSServ__loginUser ** p = (_TMSServ__loginUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__TMSServ__loginUser, sizeof(_TMSServ__loginUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_TMSServ__loginUser(struct soap *soap, _TMSServ__loginUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_TMSServ__loginUser);
	if (soap_out_PointerTo_TMSServ__loginUser(soap, tag?tag:"TMSServ:loginUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _TMSServ__loginUser ** SOAP_FMAC4 soap_get_PointerTo_TMSServ__loginUser(struct soap *soap, _TMSServ__loginUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_TMSServ__loginUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTMSServ__ArrayOfUnsignedInt(struct soap *soap, TMSServ__ArrayOfUnsignedInt *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_TMSServ__ArrayOfUnsignedInt))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTMSServ__ArrayOfUnsignedInt(struct soap *soap, const char *tag, int id, TMSServ__ArrayOfUnsignedInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_TMSServ__ArrayOfUnsignedInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 TMSServ__ArrayOfUnsignedInt ** SOAP_FMAC4 soap_in_PointerToTMSServ__ArrayOfUnsignedInt(struct soap *soap, const char *tag, TMSServ__ArrayOfUnsignedInt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (TMSServ__ArrayOfUnsignedInt **)soap_malloc(soap, sizeof(TMSServ__ArrayOfUnsignedInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (TMSServ__ArrayOfUnsignedInt *)soap_instantiate_TMSServ__ArrayOfUnsignedInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	TMSServ__ArrayOfUnsignedInt ** p = (TMSServ__ArrayOfUnsignedInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_TMSServ__ArrayOfUnsignedInt, sizeof(TMSServ__ArrayOfUnsignedInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTMSServ__ArrayOfUnsignedInt(struct soap *soap, TMSServ__ArrayOfUnsignedInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToTMSServ__ArrayOfUnsignedInt);
	if (soap_out_PointerToTMSServ__ArrayOfUnsignedInt(soap, tag?tag:"TMSServ:ArrayOfUnsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 TMSServ__ArrayOfUnsignedInt ** SOAP_FMAC4 soap_get_PointerToTMSServ__ArrayOfUnsignedInt(struct soap *soap, TMSServ__ArrayOfUnsignedInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToTMSServ__ArrayOfUnsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTMSServ__ArrayOfInt(struct soap *soap, TMSServ__ArrayOfInt *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_TMSServ__ArrayOfInt))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTMSServ__ArrayOfInt(struct soap *soap, const char *tag, int id, TMSServ__ArrayOfInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_TMSServ__ArrayOfInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 TMSServ__ArrayOfInt ** SOAP_FMAC4 soap_in_PointerToTMSServ__ArrayOfInt(struct soap *soap, const char *tag, TMSServ__ArrayOfInt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (TMSServ__ArrayOfInt **)soap_malloc(soap, sizeof(TMSServ__ArrayOfInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (TMSServ__ArrayOfInt *)soap_instantiate_TMSServ__ArrayOfInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	TMSServ__ArrayOfInt ** p = (TMSServ__ArrayOfInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_TMSServ__ArrayOfInt, sizeof(TMSServ__ArrayOfInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTMSServ__ArrayOfInt(struct soap *soap, TMSServ__ArrayOfInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToTMSServ__ArrayOfInt);
	if (soap_out_PointerToTMSServ__ArrayOfInt(soap, tag?tag:"TMSServ:ArrayOfInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 TMSServ__ArrayOfInt ** SOAP_FMAC4 soap_get_PointerToTMSServ__ArrayOfInt(struct soap *soap, TMSServ__ArrayOfInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToTMSServ__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)(void*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"xsd:base64Binary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap *soap, unsigned int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedInt);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap *soap, const char *tag, int id, unsigned int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedInt);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedInt(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap *soap, const char *tag, unsigned int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned int **)soap_malloc(soap, sizeof(unsigned int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedInt(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedInt, sizeof(unsigned int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap *soap, unsigned int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedInt);
	if (soap_out_PointerTounsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap *soap, unsigned int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
