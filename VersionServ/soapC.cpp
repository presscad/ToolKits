/* soapC.cpp
   Generated by gSOAP 2.8.19 from D:\Structure\VersionServTemp\VerServer.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.19 2018-09-21 03:08:48 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__FileHeader:
		return soap_in_ns1__FileHeader(soap, NULL, NULL, "ns1:FileHeader");
	case SOAP_TYPE_ns1__DownLoadItem:
		return soap_in_ns1__DownLoadItem(soap, NULL, NULL, "ns1:DownLoadItem");
	case SOAP_TYPE_ns1__ArrayOfDownLoadItem:
		return soap_in_ns1__ArrayOfDownLoadItem(soap, NULL, NULL, "ns1:ArrayOfDownLoadItem");
	case SOAP_TYPE_ns1__ObjectV:
		return soap_in_ns1__ObjectV(soap, NULL, NULL, "ns1:ObjectV");
	case SOAP_TYPE_ns1__DogAccessHistory:
		return soap_in_ns1__DogAccessHistory(soap, NULL, NULL, "ns1:DogAccessHistory");
	case SOAP_TYPE_ns1__VersionRevision:
		return soap_in_ns1__VersionRevision(soap, NULL, NULL, "ns1:VersionRevision");
	case SOAP_TYPE_ns1__ArrayOfVersionRevision:
		return soap_in_ns1__ArrayOfVersionRevision(soap, NULL, NULL, "ns1:ArrayOfVersionRevision");
	case SOAP_TYPE_ns1__ArrayOfInt:
		return soap_in_ns1__ArrayOfInt(soap, NULL, NULL, "ns1:ArrayOfInt");
	case SOAP_TYPE_ns1__ProductVersion:
		return soap_in_ns1__ProductVersion(soap, NULL, NULL, "ns1:ProductVersion");
	case SOAP_TYPE_ns1__ArrayOfProductVersion:
		return soap_in_ns1__ArrayOfProductVersion(soap, NULL, NULL, "ns1:ArrayOfProductVersion");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__SaveOrUpdateObjects:
		return soap_in_PointerTo_ns1__SaveOrUpdateObjects(soap, NULL, NULL, "ns1:SaveOrUpdateObjects");
	case SOAP_TYPE_PointerTo_ns1__DownloadObjects:
		return soap_in_PointerTo_ns1__DownloadObjects(soap, NULL, NULL, "ns1:DownloadObjects");
	case SOAP_TYPE_PointerTo_ns1__QueryObjects:
		return soap_in_PointerTo_ns1__QueryObjects(soap, NULL, NULL, "ns1:QueryObjects");
	case SOAP_TYPE_PointerTo_ns1__GetFileHeader:
		return soap_in_PointerTo_ns1__GetFileHeader(soap, NULL, NULL, "ns1:GetFileHeader");
	case SOAP_TYPE_PointerTo_ns1__QueryDownLoadItemArrByProductId:
		return soap_in_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, NULL, NULL, "ns1:QueryDownLoadItemArrByProductId");
	case SOAP_TYPE_PointerTo_ns1__GetDogAccessHistory:
		return soap_in_PointerTo_ns1__GetDogAccessHistory(soap, NULL, NULL, "ns1:GetDogAccessHistory");
	case SOAP_TYPE_PointerTo_ns1__GetVersionReleaseNotes:
		return soap_in_PointerTo_ns1__GetVersionReleaseNotes(soap, NULL, NULL, "ns1:GetVersionReleaseNotes");
	case SOAP_TYPE_PointerTo_ns1__CompareVersion:
		return soap_in_PointerTo_ns1__CompareVersion(soap, NULL, NULL, "ns1:CompareVersion");
	case SOAP_TYPE_PointerTo_ns1__SetRevisionReadFlag:
		return soap_in_PointerTo_ns1__SetRevisionReadFlag(soap, NULL, NULL, "ns1:SetRevisionReadFlag");
	case SOAP_TYPE_PointerTo_ns1__GetUpdateVerByCurVer:
		return soap_in_PointerTo_ns1__GetUpdateVerByCurVer(soap, NULL, NULL, "ns1:GetUpdateVerByCurVer");
	case SOAP_TYPE_PointerTo_ns1__LoginByByteArr:
		return soap_in_PointerTo_ns1__LoginByByteArr(soap, NULL, NULL, "ns1:LoginByByteArr");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_in_PointerTo_ns1__Login(soap, NULL, NULL, "ns1:Login");
	case SOAP_TYPE_PointerTons1__FileHeader:
		return soap_in_PointerTons1__FileHeader(soap, NULL, NULL, "ns1:FileHeader");
	case SOAP_TYPE_PointerTons1__ArrayOfDownLoadItem:
		return soap_in_PointerTons1__ArrayOfDownLoadItem(soap, NULL, NULL, "ns1:ArrayOfDownLoadItem");
	case SOAP_TYPE_PointerTons1__DogAccessHistory:
		return soap_in_PointerTons1__DogAccessHistory(soap, NULL, NULL, "ns1:DogAccessHistory");
	case SOAP_TYPE_PointerTons1__ArrayOfVersionRevision:
		return soap_in_PointerTons1__ArrayOfVersionRevision(soap, NULL, NULL, "ns1:ArrayOfVersionRevision");
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		return soap_in_PointerTons1__ArrayOfInt(soap, NULL, NULL, "ns1:ArrayOfInt");
	case SOAP_TYPE_PointerTons1__ArrayOfProductVersion:
		return soap_in_PointerTons1__ArrayOfProductVersion(soap, NULL, NULL, "ns1:ArrayOfProductVersion");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerToPointerTons1__DownLoadItem:
		return soap_in_PointerToPointerTons1__DownLoadItem(soap, NULL, NULL, "ns1:DownLoadItem");
	case SOAP_TYPE_PointerTons1__DownLoadItem:
		return soap_in_PointerTons1__DownLoadItem(soap, NULL, NULL, "ns1:DownLoadItem");
	case SOAP_TYPE_PointerToPointerTons1__VersionRevision:
		return soap_in_PointerToPointerTons1__VersionRevision(soap, NULL, NULL, "ns1:VersionRevision");
	case SOAP_TYPE_PointerTons1__VersionRevision:
		return soap_in_PointerTons1__VersionRevision(soap, NULL, NULL, "ns1:VersionRevision");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerToPointerTons1__ProductVersion:
		return soap_in_PointerToPointerTons1__ProductVersion(soap, NULL, NULL, "ns1:ProductVersion");
	case SOAP_TYPE_PointerTons1__ProductVersion:
		return soap_in_PointerTons1__ProductVersion(soap, NULL, NULL, "ns1:ProductVersion");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:FileHeader"))
		{	*type = SOAP_TYPE_ns1__FileHeader;
			return soap_in_ns1__FileHeader(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownLoadItem"))
		{	*type = SOAP_TYPE_ns1__DownLoadItem;
			return soap_in_ns1__DownLoadItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfDownLoadItem"))
		{	*type = SOAP_TYPE_ns1__ArrayOfDownLoadItem;
			return soap_in_ns1__ArrayOfDownLoadItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ObjectV"))
		{	*type = SOAP_TYPE_ns1__ObjectV;
			return soap_in_ns1__ObjectV(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DogAccessHistory"))
		{	*type = SOAP_TYPE_ns1__DogAccessHistory;
			return soap_in_ns1__DogAccessHistory(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:VersionRevision"))
		{	*type = SOAP_TYPE_ns1__VersionRevision;
			return soap_in_ns1__VersionRevision(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfVersionRevision"))
		{	*type = SOAP_TYPE_ns1__ArrayOfVersionRevision;
			return soap_in_ns1__ArrayOfVersionRevision(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfInt"))
		{	*type = SOAP_TYPE_ns1__ArrayOfInt;
			return soap_in_ns1__ArrayOfInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ProductVersion"))
		{	*type = SOAP_TYPE_ns1__ProductVersion;
			return soap_in_ns1__ProductVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfProductVersion"))
		{	*type = SOAP_TYPE_ns1__ArrayOfProductVersion;
			return soap_in_ns1__ArrayOfProductVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:SaveOrUpdateObjectsResponse"))
		{	*type = SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse;
			return soap_in__ns1__SaveOrUpdateObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SaveOrUpdateObjects"))
		{	*type = SOAP_TYPE__ns1__SaveOrUpdateObjects;
			return soap_in__ns1__SaveOrUpdateObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadObjectsResponse"))
		{	*type = SOAP_TYPE__ns1__DownloadObjectsResponse;
			return soap_in__ns1__DownloadObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadObjects"))
		{	*type = SOAP_TYPE__ns1__DownloadObjects;
			return soap_in__ns1__DownloadObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:QueryObjectsResponse"))
		{	*type = SOAP_TYPE__ns1__QueryObjectsResponse;
			return soap_in__ns1__QueryObjectsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:QueryObjects"))
		{	*type = SOAP_TYPE__ns1__QueryObjects;
			return soap_in__ns1__QueryObjects(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetFileHeaderResponse"))
		{	*type = SOAP_TYPE__ns1__GetFileHeaderResponse;
			return soap_in__ns1__GetFileHeaderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetFileHeader"))
		{	*type = SOAP_TYPE__ns1__GetFileHeader;
			return soap_in__ns1__GetFileHeader(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:QueryDownLoadItemArrByProductIdResponse"))
		{	*type = SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse;
			return soap_in__ns1__QueryDownLoadItemArrByProductIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:QueryDownLoadItemArrByProductId"))
		{	*type = SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId;
			return soap_in__ns1__QueryDownLoadItemArrByProductId(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetDogAccessHistoryResponse"))
		{	*type = SOAP_TYPE__ns1__GetDogAccessHistoryResponse;
			return soap_in__ns1__GetDogAccessHistoryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetDogAccessHistory"))
		{	*type = SOAP_TYPE__ns1__GetDogAccessHistory;
			return soap_in__ns1__GetDogAccessHistory(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVersionReleaseNotesResponse"))
		{	*type = SOAP_TYPE__ns1__GetVersionReleaseNotesResponse;
			return soap_in__ns1__GetVersionReleaseNotesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVersionReleaseNotes"))
		{	*type = SOAP_TYPE__ns1__GetVersionReleaseNotes;
			return soap_in__ns1__GetVersionReleaseNotes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CompareVersionResponse"))
		{	*type = SOAP_TYPE__ns1__CompareVersionResponse;
			return soap_in__ns1__CompareVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CompareVersion"))
		{	*type = SOAP_TYPE__ns1__CompareVersion;
			return soap_in__ns1__CompareVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRevisionReadFlagResponse"))
		{	*type = SOAP_TYPE__ns1__SetRevisionReadFlagResponse;
			return soap_in__ns1__SetRevisionReadFlagResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRevisionReadFlag"))
		{	*type = SOAP_TYPE__ns1__SetRevisionReadFlag;
			return soap_in__ns1__SetRevisionReadFlag(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetUpdateVerByCurVerResponse"))
		{	*type = SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse;
			return soap_in__ns1__GetUpdateVerByCurVerResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetUpdateVerByCurVer"))
		{	*type = SOAP_TYPE__ns1__GetUpdateVerByCurVer;
			return soap_in__ns1__GetUpdateVerByCurVer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LoginByByteArrResponse"))
		{	*type = SOAP_TYPE__ns1__LoginByByteArrResponse;
			return soap_in__ns1__LoginByByteArrResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LoginByByteArr"))
		{	*type = SOAP_TYPE__ns1__LoginByByteArr;
			return soap_in__ns1__LoginByByteArr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LoginResponse"))
		{	*type = SOAP_TYPE__ns1__LoginResponse;
			return soap_in__ns1__LoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Login"))
		{	*type = SOAP_TYPE__ns1__Login;
			return soap_in__ns1__Login(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse:
		return ((_ns1__SaveOrUpdateObjectsResponse *)ptr)->soap_out(soap, "ns1:SaveOrUpdateObjectsResponse", id, NULL);
	case SOAP_TYPE__ns1__SaveOrUpdateObjects:
		return ((_ns1__SaveOrUpdateObjects *)ptr)->soap_out(soap, "ns1:SaveOrUpdateObjects", id, NULL);
	case SOAP_TYPE__ns1__DownloadObjectsResponse:
		return ((_ns1__DownloadObjectsResponse *)ptr)->soap_out(soap, "ns1:DownloadObjectsResponse", id, NULL);
	case SOAP_TYPE__ns1__DownloadObjects:
		return ((_ns1__DownloadObjects *)ptr)->soap_out(soap, "ns1:DownloadObjects", id, NULL);
	case SOAP_TYPE__ns1__QueryObjectsResponse:
		return ((_ns1__QueryObjectsResponse *)ptr)->soap_out(soap, "ns1:QueryObjectsResponse", id, NULL);
	case SOAP_TYPE__ns1__QueryObjects:
		return ((_ns1__QueryObjects *)ptr)->soap_out(soap, "ns1:QueryObjects", id, NULL);
	case SOAP_TYPE__ns1__GetFileHeaderResponse:
		return ((_ns1__GetFileHeaderResponse *)ptr)->soap_out(soap, "ns1:GetFileHeaderResponse", id, NULL);
	case SOAP_TYPE__ns1__GetFileHeader:
		return ((_ns1__GetFileHeader *)ptr)->soap_out(soap, "ns1:GetFileHeader", id, NULL);
	case SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse:
		return ((_ns1__QueryDownLoadItemArrByProductIdResponse *)ptr)->soap_out(soap, "ns1:QueryDownLoadItemArrByProductIdResponse", id, NULL);
	case SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId:
		return ((_ns1__QueryDownLoadItemArrByProductId *)ptr)->soap_out(soap, "ns1:QueryDownLoadItemArrByProductId", id, NULL);
	case SOAP_TYPE__ns1__GetDogAccessHistoryResponse:
		return ((_ns1__GetDogAccessHistoryResponse *)ptr)->soap_out(soap, "ns1:GetDogAccessHistoryResponse", id, NULL);
	case SOAP_TYPE__ns1__GetDogAccessHistory:
		return ((_ns1__GetDogAccessHistory *)ptr)->soap_out(soap, "ns1:GetDogAccessHistory", id, NULL);
	case SOAP_TYPE__ns1__GetVersionReleaseNotesResponse:
		return ((_ns1__GetVersionReleaseNotesResponse *)ptr)->soap_out(soap, "ns1:GetVersionReleaseNotesResponse", id, NULL);
	case SOAP_TYPE__ns1__GetVersionReleaseNotes:
		return ((_ns1__GetVersionReleaseNotes *)ptr)->soap_out(soap, "ns1:GetVersionReleaseNotes", id, NULL);
	case SOAP_TYPE__ns1__CompareVersionResponse:
		return ((_ns1__CompareVersionResponse *)ptr)->soap_out(soap, "ns1:CompareVersionResponse", id, NULL);
	case SOAP_TYPE__ns1__CompareVersion:
		return ((_ns1__CompareVersion *)ptr)->soap_out(soap, "ns1:CompareVersion", id, NULL);
	case SOAP_TYPE__ns1__SetRevisionReadFlagResponse:
		return ((_ns1__SetRevisionReadFlagResponse *)ptr)->soap_out(soap, "ns1:SetRevisionReadFlagResponse", id, NULL);
	case SOAP_TYPE__ns1__SetRevisionReadFlag:
		return ((_ns1__SetRevisionReadFlag *)ptr)->soap_out(soap, "ns1:SetRevisionReadFlag", id, NULL);
	case SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse:
		return ((_ns1__GetUpdateVerByCurVerResponse *)ptr)->soap_out(soap, "ns1:GetUpdateVerByCurVerResponse", id, NULL);
	case SOAP_TYPE__ns1__GetUpdateVerByCurVer:
		return ((_ns1__GetUpdateVerByCurVer *)ptr)->soap_out(soap, "ns1:GetUpdateVerByCurVer", id, NULL);
	case SOAP_TYPE__ns1__LoginByByteArrResponse:
		return ((_ns1__LoginByByteArrResponse *)ptr)->soap_out(soap, "ns1:LoginByByteArrResponse", id, NULL);
	case SOAP_TYPE__ns1__LoginByByteArr:
		return ((_ns1__LoginByByteArr *)ptr)->soap_out(soap, "ns1:LoginByByteArr", id, NULL);
	case SOAP_TYPE__ns1__LoginResponse:
		return ((_ns1__LoginResponse *)ptr)->soap_out(soap, "ns1:LoginResponse", id, NULL);
	case SOAP_TYPE__ns1__Login:
		return ((_ns1__Login *)ptr)->soap_out(soap, "ns1:Login", id, NULL);
	case SOAP_TYPE_ns1__FileHeader:
		return ((ns1__FileHeader *)ptr)->soap_out(soap, tag, id, "ns1:FileHeader");
	case SOAP_TYPE_ns1__DownLoadItem:
		return ((ns1__DownLoadItem *)ptr)->soap_out(soap, tag, id, "ns1:DownLoadItem");
	case SOAP_TYPE_ns1__ArrayOfDownLoadItem:
		return ((ns1__ArrayOfDownLoadItem *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfDownLoadItem");
	case SOAP_TYPE_ns1__ObjectV:
		return ((ns1__ObjectV *)ptr)->soap_out(soap, tag, id, "ns1:ObjectV");
	case SOAP_TYPE_ns1__DogAccessHistory:
		return ((ns1__DogAccessHistory *)ptr)->soap_out(soap, tag, id, "ns1:DogAccessHistory");
	case SOAP_TYPE_ns1__VersionRevision:
		return ((ns1__VersionRevision *)ptr)->soap_out(soap, tag, id, "ns1:VersionRevision");
	case SOAP_TYPE_ns1__ArrayOfVersionRevision:
		return ((ns1__ArrayOfVersionRevision *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfVersionRevision");
	case SOAP_TYPE_ns1__ArrayOfInt:
		return ((ns1__ArrayOfInt *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfInt");
	case SOAP_TYPE_ns1__ProductVersion:
		return ((ns1__ProductVersion *)ptr)->soap_out(soap, tag, id, "ns1:ProductVersion");
	case SOAP_TYPE_ns1__ArrayOfProductVersion:
		return ((ns1__ArrayOfProductVersion *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfProductVersion");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__SaveOrUpdateObjects:
		return soap_out_PointerTo_ns1__SaveOrUpdateObjects(soap, tag, id, (_ns1__SaveOrUpdateObjects *const*)ptr, "ns1:SaveOrUpdateObjects");
	case SOAP_TYPE_PointerTo_ns1__DownloadObjects:
		return soap_out_PointerTo_ns1__DownloadObjects(soap, tag, id, (_ns1__DownloadObjects *const*)ptr, "ns1:DownloadObjects");
	case SOAP_TYPE_PointerTo_ns1__QueryObjects:
		return soap_out_PointerTo_ns1__QueryObjects(soap, tag, id, (_ns1__QueryObjects *const*)ptr, "ns1:QueryObjects");
	case SOAP_TYPE_PointerTo_ns1__GetFileHeader:
		return soap_out_PointerTo_ns1__GetFileHeader(soap, tag, id, (_ns1__GetFileHeader *const*)ptr, "ns1:GetFileHeader");
	case SOAP_TYPE_PointerTo_ns1__QueryDownLoadItemArrByProductId:
		return soap_out_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, tag, id, (_ns1__QueryDownLoadItemArrByProductId *const*)ptr, "ns1:QueryDownLoadItemArrByProductId");
	case SOAP_TYPE_PointerTo_ns1__GetDogAccessHistory:
		return soap_out_PointerTo_ns1__GetDogAccessHistory(soap, tag, id, (_ns1__GetDogAccessHistory *const*)ptr, "ns1:GetDogAccessHistory");
	case SOAP_TYPE_PointerTo_ns1__GetVersionReleaseNotes:
		return soap_out_PointerTo_ns1__GetVersionReleaseNotes(soap, tag, id, (_ns1__GetVersionReleaseNotes *const*)ptr, "ns1:GetVersionReleaseNotes");
	case SOAP_TYPE_PointerTo_ns1__CompareVersion:
		return soap_out_PointerTo_ns1__CompareVersion(soap, tag, id, (_ns1__CompareVersion *const*)ptr, "ns1:CompareVersion");
	case SOAP_TYPE_PointerTo_ns1__SetRevisionReadFlag:
		return soap_out_PointerTo_ns1__SetRevisionReadFlag(soap, tag, id, (_ns1__SetRevisionReadFlag *const*)ptr, "ns1:SetRevisionReadFlag");
	case SOAP_TYPE_PointerTo_ns1__GetUpdateVerByCurVer:
		return soap_out_PointerTo_ns1__GetUpdateVerByCurVer(soap, tag, id, (_ns1__GetUpdateVerByCurVer *const*)ptr, "ns1:GetUpdateVerByCurVer");
	case SOAP_TYPE_PointerTo_ns1__LoginByByteArr:
		return soap_out_PointerTo_ns1__LoginByByteArr(soap, tag, id, (_ns1__LoginByByteArr *const*)ptr, "ns1:LoginByByteArr");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_out_PointerTo_ns1__Login(soap, tag, id, (_ns1__Login *const*)ptr, "ns1:Login");
	case SOAP_TYPE_PointerTons1__FileHeader:
		return soap_out_PointerTons1__FileHeader(soap, tag, id, (ns1__FileHeader *const*)ptr, "ns1:FileHeader");
	case SOAP_TYPE_PointerTons1__ArrayOfDownLoadItem:
		return soap_out_PointerTons1__ArrayOfDownLoadItem(soap, tag, id, (ns1__ArrayOfDownLoadItem *const*)ptr, "ns1:ArrayOfDownLoadItem");
	case SOAP_TYPE_PointerTons1__DogAccessHistory:
		return soap_out_PointerTons1__DogAccessHistory(soap, tag, id, (ns1__DogAccessHistory *const*)ptr, "ns1:DogAccessHistory");
	case SOAP_TYPE_PointerTons1__ArrayOfVersionRevision:
		return soap_out_PointerTons1__ArrayOfVersionRevision(soap, tag, id, (ns1__ArrayOfVersionRevision *const*)ptr, "ns1:ArrayOfVersionRevision");
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		return soap_out_PointerTons1__ArrayOfInt(soap, tag, id, (ns1__ArrayOfInt *const*)ptr, "ns1:ArrayOfInt");
	case SOAP_TYPE_PointerTons1__ArrayOfProductVersion:
		return soap_out_PointerTons1__ArrayOfProductVersion(soap, tag, id, (ns1__ArrayOfProductVersion *const*)ptr, "ns1:ArrayOfProductVersion");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerToPointerTons1__DownLoadItem:
		return soap_out_PointerToPointerTons1__DownLoadItem(soap, tag, id, (ns1__DownLoadItem **const*)ptr, "ns1:DownLoadItem");
	case SOAP_TYPE_PointerTons1__DownLoadItem:
		return soap_out_PointerTons1__DownLoadItem(soap, tag, id, (ns1__DownLoadItem *const*)ptr, "ns1:DownLoadItem");
	case SOAP_TYPE_PointerToPointerTons1__VersionRevision:
		return soap_out_PointerToPointerTons1__VersionRevision(soap, tag, id, (ns1__VersionRevision **const*)ptr, "ns1:VersionRevision");
	case SOAP_TYPE_PointerTons1__VersionRevision:
		return soap_out_PointerTons1__VersionRevision(soap, tag, id, (ns1__VersionRevision *const*)ptr, "ns1:VersionRevision");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerToPointerTons1__ProductVersion:
		return soap_out_PointerToPointerTons1__ProductVersion(soap, tag, id, (ns1__ProductVersion **const*)ptr, "ns1:ProductVersion");
	case SOAP_TYPE_PointerTons1__ProductVersion:
		return soap_out_PointerTons1__ProductVersion(soap, tag, id, (ns1__ProductVersion *const*)ptr, "ns1:ProductVersion");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse:
		((_ns1__SaveOrUpdateObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SaveOrUpdateObjects:
		((_ns1__SaveOrUpdateObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadObjectsResponse:
		((_ns1__DownloadObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadObjects:
		((_ns1__DownloadObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__QueryObjectsResponse:
		((_ns1__QueryObjectsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__QueryObjects:
		((_ns1__QueryObjects *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetFileHeaderResponse:
		((_ns1__GetFileHeaderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetFileHeader:
		((_ns1__GetFileHeader *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse:
		((_ns1__QueryDownLoadItemArrByProductIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId:
		((_ns1__QueryDownLoadItemArrByProductId *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetDogAccessHistoryResponse:
		((_ns1__GetDogAccessHistoryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetDogAccessHistory:
		((_ns1__GetDogAccessHistory *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVersionReleaseNotesResponse:
		((_ns1__GetVersionReleaseNotesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVersionReleaseNotes:
		((_ns1__GetVersionReleaseNotes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CompareVersionResponse:
		((_ns1__CompareVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CompareVersion:
		((_ns1__CompareVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRevisionReadFlagResponse:
		((_ns1__SetRevisionReadFlagResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRevisionReadFlag:
		((_ns1__SetRevisionReadFlag *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse:
		((_ns1__GetUpdateVerByCurVerResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetUpdateVerByCurVer:
		((_ns1__GetUpdateVerByCurVer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LoginByByteArrResponse:
		((_ns1__LoginByByteArrResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LoginByByteArr:
		((_ns1__LoginByByteArr *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		((_ns1__LoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Login:
		((_ns1__Login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__FileHeader:
		((ns1__FileHeader *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__DownLoadItem:
		((ns1__DownLoadItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfDownLoadItem:
		((ns1__ArrayOfDownLoadItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ObjectV:
		((ns1__ObjectV *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__DogAccessHistory:
		((ns1__DogAccessHistory *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__VersionRevision:
		((ns1__VersionRevision *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfVersionRevision:
		((ns1__ArrayOfVersionRevision *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfInt:
		((ns1__ArrayOfInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ProductVersion:
		((ns1__ProductVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfProductVersion:
		((ns1__ArrayOfProductVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__SaveOrUpdateObjects_:
		soap_serialize___ns1__SaveOrUpdateObjects_(soap, (const struct __ns1__SaveOrUpdateObjects_ *)ptr);
		break;
	case SOAP_TYPE___ns1__DownloadObjects_:
		soap_serialize___ns1__DownloadObjects_(soap, (const struct __ns1__DownloadObjects_ *)ptr);
		break;
	case SOAP_TYPE___ns1__QueryObjects_:
		soap_serialize___ns1__QueryObjects_(soap, (const struct __ns1__QueryObjects_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetFileHeader_:
		soap_serialize___ns1__GetFileHeader_(soap, (const struct __ns1__GetFileHeader_ *)ptr);
		break;
	case SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId_:
		soap_serialize___ns1__QueryDownLoadItemArrByProductId_(soap, (const struct __ns1__QueryDownLoadItemArrByProductId_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetDogAccessHistory_:
		soap_serialize___ns1__GetDogAccessHistory_(soap, (const struct __ns1__GetDogAccessHistory_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetVersionReleaseNotes_:
		soap_serialize___ns1__GetVersionReleaseNotes_(soap, (const struct __ns1__GetVersionReleaseNotes_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CompareVersion_:
		soap_serialize___ns1__CompareVersion_(soap, (const struct __ns1__CompareVersion_ *)ptr);
		break;
	case SOAP_TYPE___ns1__SetRevisionReadFlag_:
		soap_serialize___ns1__SetRevisionReadFlag_(soap, (const struct __ns1__SetRevisionReadFlag_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetUpdateVerByCurVer_:
		soap_serialize___ns1__GetUpdateVerByCurVer_(soap, (const struct __ns1__GetUpdateVerByCurVer_ *)ptr);
		break;
	case SOAP_TYPE___ns1__LoginByByteArr_:
		soap_serialize___ns1__LoginByByteArr_(soap, (const struct __ns1__LoginByByteArr_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Login_:
		soap_serialize___ns1__Login_(soap, (const struct __ns1__Login_ *)ptr);
		break;
	case SOAP_TYPE___ns1__SaveOrUpdateObjects:
		soap_serialize___ns1__SaveOrUpdateObjects(soap, (const struct __ns1__SaveOrUpdateObjects *)ptr);
		break;
	case SOAP_TYPE___ns1__DownloadObjects:
		soap_serialize___ns1__DownloadObjects(soap, (const struct __ns1__DownloadObjects *)ptr);
		break;
	case SOAP_TYPE___ns1__QueryObjects:
		soap_serialize___ns1__QueryObjects(soap, (const struct __ns1__QueryObjects *)ptr);
		break;
	case SOAP_TYPE___ns1__GetFileHeader:
		soap_serialize___ns1__GetFileHeader(soap, (const struct __ns1__GetFileHeader *)ptr);
		break;
	case SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId:
		soap_serialize___ns1__QueryDownLoadItemArrByProductId(soap, (const struct __ns1__QueryDownLoadItemArrByProductId *)ptr);
		break;
	case SOAP_TYPE___ns1__GetDogAccessHistory:
		soap_serialize___ns1__GetDogAccessHistory(soap, (const struct __ns1__GetDogAccessHistory *)ptr);
		break;
	case SOAP_TYPE___ns1__GetVersionReleaseNotes:
		soap_serialize___ns1__GetVersionReleaseNotes(soap, (const struct __ns1__GetVersionReleaseNotes *)ptr);
		break;
	case SOAP_TYPE___ns1__CompareVersion:
		soap_serialize___ns1__CompareVersion(soap, (const struct __ns1__CompareVersion *)ptr);
		break;
	case SOAP_TYPE___ns1__SetRevisionReadFlag:
		soap_serialize___ns1__SetRevisionReadFlag(soap, (const struct __ns1__SetRevisionReadFlag *)ptr);
		break;
	case SOAP_TYPE___ns1__GetUpdateVerByCurVer:
		soap_serialize___ns1__GetUpdateVerByCurVer(soap, (const struct __ns1__GetUpdateVerByCurVer *)ptr);
		break;
	case SOAP_TYPE___ns1__LoginByByteArr:
		soap_serialize___ns1__LoginByByteArr(soap, (const struct __ns1__LoginByByteArr *)ptr);
		break;
	case SOAP_TYPE___ns1__Login:
		soap_serialize___ns1__Login(soap, (const struct __ns1__Login *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SaveOrUpdateObjects:
		soap_serialize_PointerTo_ns1__SaveOrUpdateObjects(soap, (_ns1__SaveOrUpdateObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DownloadObjects:
		soap_serialize_PointerTo_ns1__DownloadObjects(soap, (_ns1__DownloadObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__QueryObjects:
		soap_serialize_PointerTo_ns1__QueryObjects(soap, (_ns1__QueryObjects *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetFileHeader:
		soap_serialize_PointerTo_ns1__GetFileHeader(soap, (_ns1__GetFileHeader *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__QueryDownLoadItemArrByProductId:
		soap_serialize_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, (_ns1__QueryDownLoadItemArrByProductId *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetDogAccessHistory:
		soap_serialize_PointerTo_ns1__GetDogAccessHistory(soap, (_ns1__GetDogAccessHistory *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetVersionReleaseNotes:
		soap_serialize_PointerTo_ns1__GetVersionReleaseNotes(soap, (_ns1__GetVersionReleaseNotes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CompareVersion:
		soap_serialize_PointerTo_ns1__CompareVersion(soap, (_ns1__CompareVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRevisionReadFlag:
		soap_serialize_PointerTo_ns1__SetRevisionReadFlag(soap, (_ns1__SetRevisionReadFlag *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetUpdateVerByCurVer:
		soap_serialize_PointerTo_ns1__GetUpdateVerByCurVer(soap, (_ns1__GetUpdateVerByCurVer *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LoginByByteArr:
		soap_serialize_PointerTo_ns1__LoginByByteArr(soap, (_ns1__LoginByByteArr *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Login:
		soap_serialize_PointerTo_ns1__Login(soap, (_ns1__Login *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__FileHeader:
		soap_serialize_PointerTons1__FileHeader(soap, (ns1__FileHeader *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfDownLoadItem:
		soap_serialize_PointerTons1__ArrayOfDownLoadItem(soap, (ns1__ArrayOfDownLoadItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__DogAccessHistory:
		soap_serialize_PointerTons1__DogAccessHistory(soap, (ns1__DogAccessHistory *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfVersionRevision:
		soap_serialize_PointerTons1__ArrayOfVersionRevision(soap, (ns1__ArrayOfVersionRevision *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		soap_serialize_PointerTons1__ArrayOfInt(soap, (ns1__ArrayOfInt *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfProductVersion:
		soap_serialize_PointerTons1__ArrayOfProductVersion(soap, (ns1__ArrayOfProductVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__DownLoadItem:
		soap_serialize_PointerToPointerTons1__DownLoadItem(soap, (ns1__DownLoadItem **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__DownLoadItem:
		soap_serialize_PointerTons1__DownLoadItem(soap, (ns1__DownLoadItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__VersionRevision:
		soap_serialize_PointerToPointerTons1__VersionRevision(soap, (ns1__VersionRevision **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__VersionRevision:
		soap_serialize_PointerTons1__VersionRevision(soap, (ns1__VersionRevision *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__ProductVersion:
		soap_serialize_PointerToPointerTons1__ProductVersion(soap, (ns1__ProductVersion **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ProductVersion:
		soap_serialize_PointerTons1__ProductVersion(soap, (ns1__ProductVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfProductVersion:
		return (void*)soap_instantiate_ns1__ArrayOfProductVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ProductVersion:
		return (void*)soap_instantiate_ns1__ProductVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfInt:
		return (void*)soap_instantiate_ns1__ArrayOfInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfVersionRevision:
		return (void*)soap_instantiate_ns1__ArrayOfVersionRevision(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__VersionRevision:
		return (void*)soap_instantiate_ns1__VersionRevision(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ObjectV:
		return (void*)soap_instantiate_ns1__ObjectV(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfDownLoadItem:
		return (void*)soap_instantiate_ns1__ArrayOfDownLoadItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Login:
		return (void*)soap_instantiate__ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LoginResponse:
		return (void*)soap_instantiate__ns1__LoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LoginByByteArr:
		return (void*)soap_instantiate__ns1__LoginByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LoginByByteArrResponse:
		return (void*)soap_instantiate__ns1__LoginByByteArrResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetUpdateVerByCurVer:
		return (void*)soap_instantiate__ns1__GetUpdateVerByCurVer(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse:
		return (void*)soap_instantiate__ns1__GetUpdateVerByCurVerResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRevisionReadFlag:
		return (void*)soap_instantiate__ns1__SetRevisionReadFlag(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRevisionReadFlagResponse:
		return (void*)soap_instantiate__ns1__SetRevisionReadFlagResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CompareVersion:
		return (void*)soap_instantiate__ns1__CompareVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CompareVersionResponse:
		return (void*)soap_instantiate__ns1__CompareVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVersionReleaseNotes:
		return (void*)soap_instantiate__ns1__GetVersionReleaseNotes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVersionReleaseNotesResponse:
		return (void*)soap_instantiate__ns1__GetVersionReleaseNotesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetDogAccessHistory:
		return (void*)soap_instantiate__ns1__GetDogAccessHistory(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetDogAccessHistoryResponse:
		return (void*)soap_instantiate__ns1__GetDogAccessHistoryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId:
		return (void*)soap_instantiate__ns1__QueryDownLoadItemArrByProductId(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse:
		return (void*)soap_instantiate__ns1__QueryDownLoadItemArrByProductIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetFileHeader:
		return (void*)soap_instantiate__ns1__GetFileHeader(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetFileHeaderResponse:
		return (void*)soap_instantiate__ns1__GetFileHeaderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__QueryObjects:
		return (void*)soap_instantiate__ns1__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__QueryObjectsResponse:
		return (void*)soap_instantiate__ns1__QueryObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadObjects:
		return (void*)soap_instantiate__ns1__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadObjectsResponse:
		return (void*)soap_instantiate__ns1__DownloadObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SaveOrUpdateObjects:
		return (void*)soap_instantiate__ns1__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse:
		return (void*)soap_instantiate__ns1__SaveOrUpdateObjectsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__DogAccessHistory:
		return (void*)soap_instantiate_ns1__DogAccessHistory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__DownLoadItem:
		return (void*)soap_instantiate_ns1__DownLoadItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__FileHeader:
		return (void*)soap_instantiate_ns1__FileHeader(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Login:
		return (void*)soap_instantiate___ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__LoginByByteArr:
		return (void*)soap_instantiate___ns1__LoginByByteArr(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetUpdateVerByCurVer:
		return (void*)soap_instantiate___ns1__GetUpdateVerByCurVer(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetRevisionReadFlag:
		return (void*)soap_instantiate___ns1__SetRevisionReadFlag(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CompareVersion:
		return (void*)soap_instantiate___ns1__CompareVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetVersionReleaseNotes:
		return (void*)soap_instantiate___ns1__GetVersionReleaseNotes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetDogAccessHistory:
		return (void*)soap_instantiate___ns1__GetDogAccessHistory(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId:
		return (void*)soap_instantiate___ns1__QueryDownLoadItemArrByProductId(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetFileHeader:
		return (void*)soap_instantiate___ns1__GetFileHeader(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__QueryObjects:
		return (void*)soap_instantiate___ns1__QueryObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DownloadObjects:
		return (void*)soap_instantiate___ns1__DownloadObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SaveOrUpdateObjects:
		return (void*)soap_instantiate___ns1__SaveOrUpdateObjects(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Login_:
		return (void*)soap_instantiate___ns1__Login_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__LoginByByteArr_:
		return (void*)soap_instantiate___ns1__LoginByByteArr_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetUpdateVerByCurVer_:
		return (void*)soap_instantiate___ns1__GetUpdateVerByCurVer_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetRevisionReadFlag_:
		return (void*)soap_instantiate___ns1__SetRevisionReadFlag_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CompareVersion_:
		return (void*)soap_instantiate___ns1__CompareVersion_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetVersionReleaseNotes_:
		return (void*)soap_instantiate___ns1__GetVersionReleaseNotes_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetDogAccessHistory_:
		return (void*)soap_instantiate___ns1__GetDogAccessHistory_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId_:
		return (void*)soap_instantiate___ns1__QueryDownLoadItemArrByProductId_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetFileHeader_:
		return (void*)soap_instantiate___ns1__GetFileHeader_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__QueryObjects_:
		return (void*)soap_instantiate___ns1__QueryObjects_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DownloadObjects_:
		return (void*)soap_instantiate___ns1__DownloadObjects_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SaveOrUpdateObjects_:
		return (void*)soap_instantiate___ns1__SaveOrUpdateObjects_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfProductVersion:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfProductVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfProductVersion*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ProductVersion:
		if (p->size < 0)
			SOAP_DELETE((ns1__ProductVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ProductVersion*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfInt:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfInt*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfVersionRevision:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfVersionRevision*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfVersionRevision*)p->ptr);
		break;
	case SOAP_TYPE_ns1__VersionRevision:
		if (p->size < 0)
			SOAP_DELETE((ns1__VersionRevision*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__VersionRevision*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ObjectV:
		if (p->size < 0)
			SOAP_DELETE((ns1__ObjectV*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ObjectV*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfDownLoadItem:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfDownLoadItem*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfDownLoadItem*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Login:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Login*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LoginResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LoginResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LoginByByteArr:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LoginByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LoginByByteArr*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LoginByByteArrResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LoginByByteArrResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LoginByByteArrResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetUpdateVerByCurVer:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetUpdateVerByCurVer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetUpdateVerByCurVer*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetUpdateVerByCurVerResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetUpdateVerByCurVerResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRevisionReadFlag:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRevisionReadFlag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRevisionReadFlag*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRevisionReadFlagResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRevisionReadFlagResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRevisionReadFlagResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CompareVersion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CompareVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CompareVersion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CompareVersionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CompareVersionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CompareVersionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetVersionReleaseNotes:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetVersionReleaseNotes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetVersionReleaseNotes*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetVersionReleaseNotesResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetVersionReleaseNotesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetVersionReleaseNotesResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetDogAccessHistory:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetDogAccessHistory*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetDogAccessHistory*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetDogAccessHistoryResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetDogAccessHistoryResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetDogAccessHistoryResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId:
		if (p->size < 0)
			SOAP_DELETE((_ns1__QueryDownLoadItemArrByProductId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__QueryDownLoadItemArrByProductId*)p->ptr);
		break;
	case SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__QueryDownLoadItemArrByProductIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__QueryDownLoadItemArrByProductIdResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetFileHeader:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetFileHeader*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetFileHeader*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetFileHeaderResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetFileHeaderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetFileHeaderResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((_ns1__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE__ns1__QueryObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__QueryObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__QueryObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DownloadObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DownloadObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DownloadObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SaveOrUpdateObjectsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SaveOrUpdateObjectsResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__DogAccessHistory:
		if (p->size < 0)
			SOAP_DELETE((ns1__DogAccessHistory*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__DogAccessHistory*)p->ptr);
		break;
	case SOAP_TYPE_ns1__DownLoadItem:
		if (p->size < 0)
			SOAP_DELETE((ns1__DownLoadItem*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__DownLoadItem*)p->ptr);
		break;
	case SOAP_TYPE_ns1__FileHeader:
		if (p->size < 0)
			SOAP_DELETE((ns1__FileHeader*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__FileHeader*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Login:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Login*)p->ptr);
		break;
	case SOAP_TYPE___ns1__LoginByByteArr:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__LoginByByteArr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__LoginByByteArr*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetUpdateVerByCurVer:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetUpdateVerByCurVer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetUpdateVerByCurVer*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetRevisionReadFlag:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetRevisionReadFlag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetRevisionReadFlag*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CompareVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CompareVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CompareVersion*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetVersionReleaseNotes:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetVersionReleaseNotes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetVersionReleaseNotes*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetDogAccessHistory:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetDogAccessHistory*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetDogAccessHistory*)p->ptr);
		break;
	case SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__QueryDownLoadItemArrByProductId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__QueryDownLoadItemArrByProductId*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetFileHeader:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetFileHeader*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetFileHeader*)p->ptr);
		break;
	case SOAP_TYPE___ns1__QueryObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__QueryObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__QueryObjects*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DownloadObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DownloadObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DownloadObjects*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SaveOrUpdateObjects:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SaveOrUpdateObjects*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SaveOrUpdateObjects*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Login_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Login_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Login_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__LoginByByteArr_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__LoginByByteArr_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__LoginByByteArr_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetUpdateVerByCurVer_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetUpdateVerByCurVer_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetUpdateVerByCurVer_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetRevisionReadFlag_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetRevisionReadFlag_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetRevisionReadFlag_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CompareVersion_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CompareVersion_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CompareVersion_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetVersionReleaseNotes_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetVersionReleaseNotes_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetVersionReleaseNotes_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetDogAccessHistory_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetDogAccessHistory_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetDogAccessHistory_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__QueryDownLoadItemArrByProductId_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__QueryDownLoadItemArrByProductId_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetFileHeader_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetFileHeader_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetFileHeader_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__QueryObjects_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__QueryObjects_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__QueryObjects_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DownloadObjects_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DownloadObjects_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DownloadObjects_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SaveOrUpdateObjects_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SaveOrUpdateObjects_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SaveOrUpdateObjects_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__byte);
	if (soap_out_xsd__byte(soap, tag?tag:"xsd:byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__SaveOrUpdateObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult);
	/* transient soap skipped */
}

void _ns1__SaveOrUpdateObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult);
	/* transient soap skipped */
#endif
}

int _ns1__SaveOrUpdateObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SaveOrUpdateObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, const char *tag, int id, const _ns1__SaveOrUpdateObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse), type))
		return soap->error;
	if (a->SaveOrUpdateObjectsResult)
		soap_element_result(soap, "ns1:SaveOrUpdateObjectsResult");
	if (soap_out_string(soap, "ns1:SaveOrUpdateObjectsResult", -1, &(a->_ns1__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SaveOrUpdateObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SaveOrUpdateObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjectsResponse * SOAP_FMAC4 soap_in__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, const char *tag, _ns1__SaveOrUpdateObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SaveOrUpdateObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse, sizeof(_ns1__SaveOrUpdateObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SaveOrUpdateObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SaveOrUpdateObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SaveOrUpdateObjectsResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:SaveOrUpdateObjectsResult", &(a->_ns1__SaveOrUpdateObjectsResponse::SaveOrUpdateObjectsResult), "xsd:string"))
				{	soap_flag_SaveOrUpdateObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SaveOrUpdateObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SaveOrUpdateObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse, 0, sizeof(_ns1__SaveOrUpdateObjectsResponse), 0, soap_copy__ns1__SaveOrUpdateObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SaveOrUpdateObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SaveOrUpdateObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SaveOrUpdateObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SaveOrUpdateObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjectsResponse * SOAP_FMAC4 soap_get__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, _ns1__SaveOrUpdateObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SaveOrUpdateObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SaveOrUpdateObjectsResponse * SOAP_FMAC2 soap_instantiate__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SaveOrUpdateObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SaveOrUpdateObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SaveOrUpdateObjectsResponse);
		if (size)
			*size = sizeof(_ns1__SaveOrUpdateObjectsResponse);
		((_ns1__SaveOrUpdateObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__SaveOrUpdateObjectsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SaveOrUpdateObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SaveOrUpdateObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SaveOrUpdateObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SaveOrUpdateObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SaveOrUpdateObjectsResponse %p -> %p\n", q, p));
	*(_ns1__SaveOrUpdateObjectsResponse*)p = *(_ns1__SaveOrUpdateObjectsResponse*)q;
}

void _ns1__SaveOrUpdateObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__SaveOrUpdateObjects::sessionId);
	soap_default_string(soap, &this->_ns1__SaveOrUpdateObjects::clsName);
	soap_default_string(soap, &this->_ns1__SaveOrUpdateObjects::xmlformat);
	this->_ns1__SaveOrUpdateObjects::byteArr = NULL;
	/* transient soap skipped */
}

void _ns1__SaveOrUpdateObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__SaveOrUpdateObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__SaveOrUpdateObjects::clsName);
	soap_serialize_string(soap, &this->_ns1__SaveOrUpdateObjects::xmlformat);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__SaveOrUpdateObjects::byteArr);
	/* transient soap skipped */
#endif
}

int _ns1__SaveOrUpdateObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SaveOrUpdateObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const _ns1__SaveOrUpdateObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SaveOrUpdateObjects), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__SaveOrUpdateObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__SaveOrUpdateObjects::clsName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:xmlformat", -1, &(a->_ns1__SaveOrUpdateObjects::xmlformat), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:byteArr", -1, &(a->_ns1__SaveOrUpdateObjects::byteArr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SaveOrUpdateObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SaveOrUpdateObjects(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjects * SOAP_FMAC4 soap_in__ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, _ns1__SaveOrUpdateObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SaveOrUpdateObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SaveOrUpdateObjects, sizeof(_ns1__SaveOrUpdateObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SaveOrUpdateObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SaveOrUpdateObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_xmlformat1 = 1;
	size_t soap_flag_byteArr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__SaveOrUpdateObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__SaveOrUpdateObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_xmlformat1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:xmlformat", &(a->_ns1__SaveOrUpdateObjects::xmlformat), "xsd:string"))
				{	soap_flag_xmlformat1--;
					continue;
				}
			if (soap_flag_byteArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:byteArr", &(a->_ns1__SaveOrUpdateObjects::byteArr), "xsd:base64Binary"))
				{	soap_flag_byteArr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SaveOrUpdateObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SaveOrUpdateObjects, 0, sizeof(_ns1__SaveOrUpdateObjects), 0, soap_copy__ns1__SaveOrUpdateObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__SaveOrUpdateObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SaveOrUpdateObjects);
	if (this->soap_out(soap, tag?tag:"ns1:SaveOrUpdateObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SaveOrUpdateObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SaveOrUpdateObjects(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjects * SOAP_FMAC4 soap_get__ns1__SaveOrUpdateObjects(struct soap *soap, _ns1__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate__ns1__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(_ns1__SaveOrUpdateObjects);
		((_ns1__SaveOrUpdateObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(_ns1__SaveOrUpdateObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SaveOrUpdateObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(_ns1__SaveOrUpdateObjects*)p = *(_ns1__SaveOrUpdateObjects*)q;
}

void _ns1__DownloadObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DownloadObjectsResponse::DownloadObjectsResult = NULL;
	/* transient soap skipped */
}

void _ns1__DownloadObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__DownloadObjectsResponse::DownloadObjectsResult);
	/* transient soap skipped */
#endif
}

int _ns1__DownloadObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadObjectsResponse(struct soap *soap, const char *tag, int id, const _ns1__DownloadObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadObjectsResponse), type))
		return soap->error;
	if (a->DownloadObjectsResult)
		soap_element_result(soap, "ns1:DownloadObjectsResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:DownloadObjectsResult", -1, &(a->_ns1__DownloadObjectsResponse::DownloadObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadObjectsResponse * SOAP_FMAC4 soap_in__ns1__DownloadObjectsResponse(struct soap *soap, const char *tag, _ns1__DownloadObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadObjectsResponse, sizeof(_ns1__DownloadObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DownloadObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadObjectsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:DownloadObjectsResult", &(a->_ns1__DownloadObjectsResponse::DownloadObjectsResult), "xsd:base64Binary"))
				{	soap_flag_DownloadObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DownloadObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadObjectsResponse, 0, sizeof(_ns1__DownloadObjectsResponse), 0, soap_copy__ns1__DownloadObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__DownloadObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadObjectsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:DownloadObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DownloadObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadObjectsResponse * SOAP_FMAC4 soap_get__ns1__DownloadObjectsResponse(struct soap *soap, _ns1__DownloadObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DownloadObjectsResponse * SOAP_FMAC2 soap_instantiate__ns1__DownloadObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DownloadObjectsResponse);
		if (size)
			*size = sizeof(_ns1__DownloadObjectsResponse);
		((_ns1__DownloadObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DownloadObjectsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__DownloadObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DownloadObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DownloadObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadObjectsResponse %p -> %p\n", q, p));
	*(_ns1__DownloadObjectsResponse*)p = *(_ns1__DownloadObjectsResponse*)q;
}

void _ns1__DownloadObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__DownloadObjects::sessionId);
	soap_default_string(soap, &this->_ns1__DownloadObjects::clsName);
	this->_ns1__DownloadObjects::idarr = NULL;
	soap_default_unsignedInt(soap, &this->_ns1__DownloadObjects::serialize);
	/* transient soap skipped */
}

void _ns1__DownloadObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__DownloadObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__DownloadObjects::clsName);
	soap_serialize_PointerTons1__ArrayOfInt(soap, &this->_ns1__DownloadObjects::idarr);
	/* transient soap skipped */
#endif
}

int _ns1__DownloadObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadObjects(struct soap *soap, const char *tag, int id, const _ns1__DownloadObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadObjects), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__DownloadObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__DownloadObjects::clsName), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfInt(soap, "ns1:idarr", -1, &(a->_ns1__DownloadObjects::idarr), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:serialize", -1, &(a->_ns1__DownloadObjects::serialize), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadObjects(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadObjects * SOAP_FMAC4 soap_in__ns1__DownloadObjects(struct soap *soap, const char *tag, _ns1__DownloadObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadObjects, sizeof(_ns1__DownloadObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_idarr1 = 1;
	size_t soap_flag_serialize1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__DownloadObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__DownloadObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_idarr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfInt(soap, "ns1:idarr", &(a->_ns1__DownloadObjects::idarr), "ns1:ArrayOfInt"))
				{	soap_flag_idarr1--;
					continue;
				}
			if (soap_flag_serialize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:serialize", &(a->_ns1__DownloadObjects::serialize), "xsd:unsignedInt"))
				{	soap_flag_serialize1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadObjects, 0, sizeof(_ns1__DownloadObjects), 0, soap_copy__ns1__DownloadObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0 || soap_flag_serialize1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DownloadObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadObjects);
	if (this->soap_out(soap, tag?tag:"ns1:DownloadObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DownloadObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadObjects(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadObjects * SOAP_FMAC4 soap_get__ns1__DownloadObjects(struct soap *soap, _ns1__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DownloadObjects * SOAP_FMAC2 soap_instantiate__ns1__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DownloadObjects);
		if (size)
			*size = sizeof(_ns1__DownloadObjects);
		((_ns1__DownloadObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__DownloadObjects, n);
		if (size)
			*size = n * sizeof(_ns1__DownloadObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DownloadObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadObjects %p -> %p\n", q, p));
	*(_ns1__DownloadObjects*)p = *(_ns1__DownloadObjects*)q;
}

void _ns1__QueryObjectsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__QueryObjectsResponse::QueryObjectsResult = NULL;
	/* transient soap skipped */
}

void _ns1__QueryObjectsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__QueryObjectsResponse::QueryObjectsResult);
	/* transient soap skipped */
#endif
}

int _ns1__QueryObjectsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__QueryObjectsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryObjectsResponse(struct soap *soap, const char *tag, int id, const _ns1__QueryObjectsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__QueryObjectsResponse), type))
		return soap->error;
	if (a->QueryObjectsResult)
		soap_element_result(soap, "ns1:QueryObjectsResult");
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:QueryObjectsResult", -1, &(a->_ns1__QueryObjectsResponse::QueryObjectsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__QueryObjectsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__QueryObjectsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__QueryObjectsResponse * SOAP_FMAC4 soap_in__ns1__QueryObjectsResponse(struct soap *soap, const char *tag, _ns1__QueryObjectsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__QueryObjectsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__QueryObjectsResponse, sizeof(_ns1__QueryObjectsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__QueryObjectsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__QueryObjectsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_QueryObjectsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_QueryObjectsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:QueryObjectsResult", &(a->_ns1__QueryObjectsResponse::QueryObjectsResult), "xsd:base64Binary"))
				{	soap_flag_QueryObjectsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:QueryObjectsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__QueryObjectsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__QueryObjectsResponse, 0, sizeof(_ns1__QueryObjectsResponse), 0, soap_copy__ns1__QueryObjectsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__QueryObjectsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__QueryObjectsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:QueryObjectsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__QueryObjectsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__QueryObjectsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__QueryObjectsResponse * SOAP_FMAC4 soap_get__ns1__QueryObjectsResponse(struct soap *soap, _ns1__QueryObjectsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__QueryObjectsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__QueryObjectsResponse * SOAP_FMAC2 soap_instantiate__ns1__QueryObjectsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__QueryObjectsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__QueryObjectsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__QueryObjectsResponse);
		if (size)
			*size = sizeof(_ns1__QueryObjectsResponse);
		((_ns1__QueryObjectsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__QueryObjectsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__QueryObjectsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__QueryObjectsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__QueryObjectsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__QueryObjectsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__QueryObjectsResponse %p -> %p\n", q, p));
	*(_ns1__QueryObjectsResponse*)p = *(_ns1__QueryObjectsResponse*)q;
}

void _ns1__QueryObjects::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__QueryObjects::sessionId);
	soap_default_string(soap, &this->_ns1__QueryObjects::clsName);
	soap_default_string(soap, &this->_ns1__QueryObjects::xmlScope);
	/* transient soap skipped */
}

void _ns1__QueryObjects::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__QueryObjects::sessionId, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__QueryObjects::clsName);
	soap_serialize_string(soap, &this->_ns1__QueryObjects::xmlScope);
	/* transient soap skipped */
#endif
}

int _ns1__QueryObjects::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__QueryObjects(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryObjects(struct soap *soap, const char *tag, int id, const _ns1__QueryObjects *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__QueryObjects), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:sessionId", -1, &(a->_ns1__QueryObjects::sessionId), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clsName", -1, &(a->_ns1__QueryObjects::clsName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:xmlScope", -1, &(a->_ns1__QueryObjects::xmlScope), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__QueryObjects::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__QueryObjects(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__QueryObjects * SOAP_FMAC4 soap_in__ns1__QueryObjects(struct soap *soap, const char *tag, _ns1__QueryObjects *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__QueryObjects *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__QueryObjects, sizeof(_ns1__QueryObjects), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__QueryObjects)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__QueryObjects *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_clsName1 = 1;
	size_t soap_flag_xmlScope1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:sessionId", &(a->_ns1__QueryObjects::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_clsName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clsName", &(a->_ns1__QueryObjects::clsName), "xsd:string"))
				{	soap_flag_clsName1--;
					continue;
				}
			if (soap_flag_xmlScope1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:xmlScope", &(a->_ns1__QueryObjects::xmlScope), "xsd:string"))
				{	soap_flag_xmlScope1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__QueryObjects *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__QueryObjects, 0, sizeof(_ns1__QueryObjects), 0, soap_copy__ns1__QueryObjects);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__QueryObjects::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__QueryObjects);
	if (this->soap_out(soap, tag?tag:"ns1:QueryObjects", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__QueryObjects::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__QueryObjects(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__QueryObjects * SOAP_FMAC4 soap_get__ns1__QueryObjects(struct soap *soap, _ns1__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__QueryObjects * SOAP_FMAC2 soap_instantiate__ns1__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__QueryObjects);
		if (size)
			*size = sizeof(_ns1__QueryObjects);
		((_ns1__QueryObjects*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__QueryObjects, n);
		if (size)
			*size = n * sizeof(_ns1__QueryObjects);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__QueryObjects*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__QueryObjects %p -> %p\n", q, p));
	*(_ns1__QueryObjects*)p = *(_ns1__QueryObjects*)q;
}

void _ns1__GetFileHeaderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetFileHeaderResponse::GetFileHeaderResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetFileHeaderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__FileHeader(soap, &this->_ns1__GetFileHeaderResponse::GetFileHeaderResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetFileHeaderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetFileHeaderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFileHeaderResponse(struct soap *soap, const char *tag, int id, const _ns1__GetFileHeaderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetFileHeaderResponse), type))
		return soap->error;
	if (a->GetFileHeaderResult)
		soap_element_result(soap, "ns1:GetFileHeaderResult");
	if (soap_out_PointerTons1__FileHeader(soap, "ns1:GetFileHeaderResult", -1, &(a->_ns1__GetFileHeaderResponse::GetFileHeaderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetFileHeaderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetFileHeaderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetFileHeaderResponse * SOAP_FMAC4 soap_in__ns1__GetFileHeaderResponse(struct soap *soap, const char *tag, _ns1__GetFileHeaderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetFileHeaderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetFileHeaderResponse, sizeof(_ns1__GetFileHeaderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetFileHeaderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetFileHeaderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetFileHeaderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetFileHeaderResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__FileHeader(soap, "ns1:GetFileHeaderResult", &(a->_ns1__GetFileHeaderResponse::GetFileHeaderResult), "ns1:FileHeader"))
				{	soap_flag_GetFileHeaderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetFileHeaderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetFileHeaderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetFileHeaderResponse, 0, sizeof(_ns1__GetFileHeaderResponse), 0, soap_copy__ns1__GetFileHeaderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetFileHeaderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetFileHeaderResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetFileHeaderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetFileHeaderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetFileHeaderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetFileHeaderResponse * SOAP_FMAC4 soap_get__ns1__GetFileHeaderResponse(struct soap *soap, _ns1__GetFileHeaderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetFileHeaderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetFileHeaderResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFileHeaderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetFileHeaderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetFileHeaderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetFileHeaderResponse);
		if (size)
			*size = sizeof(_ns1__GetFileHeaderResponse);
		((_ns1__GetFileHeaderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetFileHeaderResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetFileHeaderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetFileHeaderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetFileHeaderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetFileHeaderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetFileHeaderResponse %p -> %p\n", q, p));
	*(_ns1__GetFileHeaderResponse*)p = *(_ns1__GetFileHeaderResponse*)q;
}

void _ns1__GetFileHeader::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__GetFileHeader::downLoadItemId);
	/* transient soap skipped */
}

void _ns1__GetFileHeader::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__GetFileHeader::downLoadItemId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__GetFileHeader::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetFileHeader(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFileHeader(struct soap *soap, const char *tag, int id, const _ns1__GetFileHeader *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetFileHeader), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:downLoadItemId", -1, &(a->_ns1__GetFileHeader::downLoadItemId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetFileHeader::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetFileHeader(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetFileHeader * SOAP_FMAC4 soap_in__ns1__GetFileHeader(struct soap *soap, const char *tag, _ns1__GetFileHeader *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetFileHeader *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetFileHeader, sizeof(_ns1__GetFileHeader), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetFileHeader)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetFileHeader *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_downLoadItemId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_downLoadItemId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:downLoadItemId", &(a->_ns1__GetFileHeader::downLoadItemId), "xsd:int"))
				{	soap_flag_downLoadItemId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetFileHeader *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetFileHeader, 0, sizeof(_ns1__GetFileHeader), 0, soap_copy__ns1__GetFileHeader);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_downLoadItemId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetFileHeader::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetFileHeader);
	if (this->soap_out(soap, tag?tag:"ns1:GetFileHeader", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetFileHeader::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetFileHeader(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetFileHeader * SOAP_FMAC4 soap_get__ns1__GetFileHeader(struct soap *soap, _ns1__GetFileHeader *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetFileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetFileHeader * SOAP_FMAC2 soap_instantiate__ns1__GetFileHeader(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetFileHeader(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetFileHeader, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetFileHeader);
		if (size)
			*size = sizeof(_ns1__GetFileHeader);
		((_ns1__GetFileHeader*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetFileHeader, n);
		if (size)
			*size = n * sizeof(_ns1__GetFileHeader);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetFileHeader*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetFileHeader*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetFileHeader(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetFileHeader %p -> %p\n", q, p));
	*(_ns1__GetFileHeader*)p = *(_ns1__GetFileHeader*)q;
}

void _ns1__QueryDownLoadItemArrByProductIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__QueryDownLoadItemArrByProductIdResponse::QueryDownLoadItemArrByProductIdResult = NULL;
	/* transient soap skipped */
}

void _ns1__QueryDownLoadItemArrByProductIdResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfDownLoadItem(soap, &this->_ns1__QueryDownLoadItemArrByProductIdResponse::QueryDownLoadItemArrByProductIdResult);
	/* transient soap skipped */
#endif
}

int _ns1__QueryDownLoadItemArrByProductIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__QueryDownLoadItemArrByProductIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, const char *tag, int id, const _ns1__QueryDownLoadItemArrByProductIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse), type))
		return soap->error;
	if (a->QueryDownLoadItemArrByProductIdResult)
		soap_element_result(soap, "ns1:QueryDownLoadItemArrByProductIdResult");
	if (soap_out_PointerTons1__ArrayOfDownLoadItem(soap, "ns1:QueryDownLoadItemArrByProductIdResult", -1, &(a->_ns1__QueryDownLoadItemArrByProductIdResponse::QueryDownLoadItemArrByProductIdResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__QueryDownLoadItemArrByProductIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__QueryDownLoadItemArrByProductIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__QueryDownLoadItemArrByProductIdResponse * SOAP_FMAC4 soap_in__ns1__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, const char *tag, _ns1__QueryDownLoadItemArrByProductIdResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__QueryDownLoadItemArrByProductIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse, sizeof(_ns1__QueryDownLoadItemArrByProductIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__QueryDownLoadItemArrByProductIdResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_QueryDownLoadItemArrByProductIdResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_QueryDownLoadItemArrByProductIdResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfDownLoadItem(soap, "ns1:QueryDownLoadItemArrByProductIdResult", &(a->_ns1__QueryDownLoadItemArrByProductIdResponse::QueryDownLoadItemArrByProductIdResult), "ns1:ArrayOfDownLoadItem"))
				{	soap_flag_QueryDownLoadItemArrByProductIdResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:QueryDownLoadItemArrByProductIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__QueryDownLoadItemArrByProductIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse, 0, sizeof(_ns1__QueryDownLoadItemArrByProductIdResponse), 0, soap_copy__ns1__QueryDownLoadItemArrByProductIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__QueryDownLoadItemArrByProductIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse);
	if (this->soap_out(soap, tag?tag:"ns1:QueryDownLoadItemArrByProductIdResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__QueryDownLoadItemArrByProductIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__QueryDownLoadItemArrByProductIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__QueryDownLoadItemArrByProductIdResponse * SOAP_FMAC4 soap_get__ns1__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, _ns1__QueryDownLoadItemArrByProductIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__QueryDownLoadItemArrByProductIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__QueryDownLoadItemArrByProductIdResponse * SOAP_FMAC2 soap_instantiate__ns1__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__QueryDownLoadItemArrByProductIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductIdResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__QueryDownLoadItemArrByProductIdResponse);
		if (size)
			*size = sizeof(_ns1__QueryDownLoadItemArrByProductIdResponse);
		((_ns1__QueryDownLoadItemArrByProductIdResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__QueryDownLoadItemArrByProductIdResponse, n);
		if (size)
			*size = n * sizeof(_ns1__QueryDownLoadItemArrByProductIdResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__QueryDownLoadItemArrByProductIdResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__QueryDownLoadItemArrByProductIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__QueryDownLoadItemArrByProductIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__QueryDownLoadItemArrByProductIdResponse %p -> %p\n", q, p));
	*(_ns1__QueryDownLoadItemArrByProductIdResponse*)p = *(_ns1__QueryDownLoadItemArrByProductIdResponse*)q;
}

void _ns1__QueryDownLoadItemArrByProductId::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__QueryDownLoadItemArrByProductId::dogNo);
	soap_default_int(soap, &this->_ns1__QueryDownLoadItemArrByProductId::productId);
	/* transient soap skipped */
}

void _ns1__QueryDownLoadItemArrByProductId::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__QueryDownLoadItemArrByProductId::dogNo);
	soap_embedded(soap, &this->_ns1__QueryDownLoadItemArrByProductId::productId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__QueryDownLoadItemArrByProductId::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__QueryDownLoadItemArrByProductId(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, int id, const _ns1__QueryDownLoadItemArrByProductId *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:dogNo", -1, &(a->_ns1__QueryDownLoadItemArrByProductId::dogNo), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:productId", -1, &(a->_ns1__QueryDownLoadItemArrByProductId::productId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__QueryDownLoadItemArrByProductId::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__QueryDownLoadItemArrByProductId(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_in__ns1__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, _ns1__QueryDownLoadItemArrByProductId *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__QueryDownLoadItemArrByProductId *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId, sizeof(_ns1__QueryDownLoadItemArrByProductId), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__QueryDownLoadItemArrByProductId *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_dogNo1 = 1;
	size_t soap_flag_productId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dogNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:dogNo", &(a->_ns1__QueryDownLoadItemArrByProductId::dogNo), "xsd:string"))
				{	soap_flag_dogNo1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:productId", &(a->_ns1__QueryDownLoadItemArrByProductId::productId), "xsd:int"))
				{	soap_flag_productId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__QueryDownLoadItemArrByProductId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId, 0, sizeof(_ns1__QueryDownLoadItemArrByProductId), 0, soap_copy__ns1__QueryDownLoadItemArrByProductId);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_productId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__QueryDownLoadItemArrByProductId::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId);
	if (this->soap_out(soap, tag?tag:"ns1:QueryDownLoadItemArrByProductId", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__QueryDownLoadItemArrByProductId::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__QueryDownLoadItemArrByProductId(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_get__ns1__QueryDownLoadItemArrByProductId(struct soap *soap, _ns1__QueryDownLoadItemArrByProductId *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__QueryDownLoadItemArrByProductId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__QueryDownLoadItemArrByProductId * SOAP_FMAC2 soap_instantiate__ns1__QueryDownLoadItemArrByProductId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__QueryDownLoadItemArrByProductId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__QueryDownLoadItemArrByProductId);
		if (size)
			*size = sizeof(_ns1__QueryDownLoadItemArrByProductId);
		((_ns1__QueryDownLoadItemArrByProductId*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__QueryDownLoadItemArrByProductId, n);
		if (size)
			*size = n * sizeof(_ns1__QueryDownLoadItemArrByProductId);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__QueryDownLoadItemArrByProductId*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__QueryDownLoadItemArrByProductId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__QueryDownLoadItemArrByProductId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__QueryDownLoadItemArrByProductId %p -> %p\n", q, p));
	*(_ns1__QueryDownLoadItemArrByProductId*)p = *(_ns1__QueryDownLoadItemArrByProductId*)q;
}

void _ns1__GetDogAccessHistoryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetDogAccessHistoryResponse::GetDogAccessHistoryResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetDogAccessHistoryResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__DogAccessHistory(soap, &this->_ns1__GetDogAccessHistoryResponse::GetDogAccessHistoryResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetDogAccessHistoryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetDogAccessHistoryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetDogAccessHistoryResponse(struct soap *soap, const char *tag, int id, const _ns1__GetDogAccessHistoryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetDogAccessHistoryResponse), type))
		return soap->error;
	if (a->GetDogAccessHistoryResult)
		soap_element_result(soap, "ns1:GetDogAccessHistoryResult");
	if (soap_out_PointerTons1__DogAccessHistory(soap, "ns1:GetDogAccessHistoryResult", -1, &(a->_ns1__GetDogAccessHistoryResponse::GetDogAccessHistoryResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetDogAccessHistoryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetDogAccessHistoryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetDogAccessHistoryResponse * SOAP_FMAC4 soap_in__ns1__GetDogAccessHistoryResponse(struct soap *soap, const char *tag, _ns1__GetDogAccessHistoryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetDogAccessHistoryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetDogAccessHistoryResponse, sizeof(_ns1__GetDogAccessHistoryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetDogAccessHistoryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetDogAccessHistoryResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDogAccessHistoryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDogAccessHistoryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__DogAccessHistory(soap, "ns1:GetDogAccessHistoryResult", &(a->_ns1__GetDogAccessHistoryResponse::GetDogAccessHistoryResult), "ns1:DogAccessHistory"))
				{	soap_flag_GetDogAccessHistoryResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetDogAccessHistoryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetDogAccessHistoryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetDogAccessHistoryResponse, 0, sizeof(_ns1__GetDogAccessHistoryResponse), 0, soap_copy__ns1__GetDogAccessHistoryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetDogAccessHistoryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetDogAccessHistoryResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetDogAccessHistoryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetDogAccessHistoryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetDogAccessHistoryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetDogAccessHistoryResponse * SOAP_FMAC4 soap_get__ns1__GetDogAccessHistoryResponse(struct soap *soap, _ns1__GetDogAccessHistoryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetDogAccessHistoryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetDogAccessHistoryResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDogAccessHistoryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetDogAccessHistoryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetDogAccessHistoryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetDogAccessHistoryResponse);
		if (size)
			*size = sizeof(_ns1__GetDogAccessHistoryResponse);
		((_ns1__GetDogAccessHistoryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetDogAccessHistoryResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetDogAccessHistoryResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetDogAccessHistoryResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetDogAccessHistoryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetDogAccessHistoryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetDogAccessHistoryResponse %p -> %p\n", q, p));
	*(_ns1__GetDogAccessHistoryResponse*)p = *(_ns1__GetDogAccessHistoryResponse*)q;
}

void _ns1__GetDogAccessHistory::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetDogAccessHistory::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__GetDogAccessHistory::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetDogAccessHistory(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetDogAccessHistory(struct soap *soap, const char *tag, int id, const _ns1__GetDogAccessHistory *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetDogAccessHistory), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetDogAccessHistory::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetDogAccessHistory(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetDogAccessHistory * SOAP_FMAC4 soap_in__ns1__GetDogAccessHistory(struct soap *soap, const char *tag, _ns1__GetDogAccessHistory *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetDogAccessHistory *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetDogAccessHistory, sizeof(_ns1__GetDogAccessHistory), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetDogAccessHistory)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetDogAccessHistory *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetDogAccessHistory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetDogAccessHistory, 0, sizeof(_ns1__GetDogAccessHistory), 0, soap_copy__ns1__GetDogAccessHistory);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetDogAccessHistory::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetDogAccessHistory);
	if (this->soap_out(soap, tag?tag:"ns1:GetDogAccessHistory", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetDogAccessHistory::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetDogAccessHistory(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetDogAccessHistory * SOAP_FMAC4 soap_get__ns1__GetDogAccessHistory(struct soap *soap, _ns1__GetDogAccessHistory *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetDogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetDogAccessHistory * SOAP_FMAC2 soap_instantiate__ns1__GetDogAccessHistory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetDogAccessHistory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetDogAccessHistory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetDogAccessHistory);
		if (size)
			*size = sizeof(_ns1__GetDogAccessHistory);
		((_ns1__GetDogAccessHistory*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetDogAccessHistory, n);
		if (size)
			*size = n * sizeof(_ns1__GetDogAccessHistory);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetDogAccessHistory*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetDogAccessHistory*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetDogAccessHistory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetDogAccessHistory %p -> %p\n", q, p));
	*(_ns1__GetDogAccessHistory*)p = *(_ns1__GetDogAccessHistory*)q;
}

void _ns1__GetVersionReleaseNotesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetVersionReleaseNotesResponse::GetVersionReleaseNotesResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetVersionReleaseNotesResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfVersionRevision(soap, &this->_ns1__GetVersionReleaseNotesResponse::GetVersionReleaseNotesResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetVersionReleaseNotesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVersionReleaseNotesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersionReleaseNotesResponse(struct soap *soap, const char *tag, int id, const _ns1__GetVersionReleaseNotesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVersionReleaseNotesResponse), type))
		return soap->error;
	if (a->GetVersionReleaseNotesResult)
		soap_element_result(soap, "ns1:GetVersionReleaseNotesResult");
	if (soap_out_PointerTons1__ArrayOfVersionRevision(soap, "ns1:GetVersionReleaseNotesResult", -1, &(a->_ns1__GetVersionReleaseNotesResponse::GetVersionReleaseNotesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVersionReleaseNotesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetVersionReleaseNotesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVersionReleaseNotesResponse * SOAP_FMAC4 soap_in__ns1__GetVersionReleaseNotesResponse(struct soap *soap, const char *tag, _ns1__GetVersionReleaseNotesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVersionReleaseNotesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVersionReleaseNotesResponse, sizeof(_ns1__GetVersionReleaseNotesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetVersionReleaseNotesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetVersionReleaseNotesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetVersionReleaseNotesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetVersionReleaseNotesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfVersionRevision(soap, "ns1:GetVersionReleaseNotesResult", &(a->_ns1__GetVersionReleaseNotesResponse::GetVersionReleaseNotesResult), "ns1:ArrayOfVersionRevision"))
				{	soap_flag_GetVersionReleaseNotesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetVersionReleaseNotesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVersionReleaseNotesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVersionReleaseNotesResponse, 0, sizeof(_ns1__GetVersionReleaseNotesResponse), 0, soap_copy__ns1__GetVersionReleaseNotesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetVersionReleaseNotesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetVersionReleaseNotesResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetVersionReleaseNotesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetVersionReleaseNotesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVersionReleaseNotesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVersionReleaseNotesResponse * SOAP_FMAC4 soap_get__ns1__GetVersionReleaseNotesResponse(struct soap *soap, _ns1__GetVersionReleaseNotesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVersionReleaseNotesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetVersionReleaseNotesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVersionReleaseNotesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVersionReleaseNotesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetVersionReleaseNotesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetVersionReleaseNotesResponse);
		if (size)
			*size = sizeof(_ns1__GetVersionReleaseNotesResponse);
		((_ns1__GetVersionReleaseNotesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetVersionReleaseNotesResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetVersionReleaseNotesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetVersionReleaseNotesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetVersionReleaseNotesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVersionReleaseNotesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetVersionReleaseNotesResponse %p -> %p\n", q, p));
	*(_ns1__GetVersionReleaseNotesResponse*)p = *(_ns1__GetVersionReleaseNotesResponse*)q;
}

void _ns1__GetVersionReleaseNotes::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_ns1__GetVersionReleaseNotes::product_USCOREid);
	soap_default_unsignedInt(soap, &this->_ns1__GetVersionReleaseNotes::uCurVersion);
	/* transient soap skipped */
}

void _ns1__GetVersionReleaseNotes::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__GetVersionReleaseNotes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVersionReleaseNotes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersionReleaseNotes(struct soap *soap, const char *tag, int id, const _ns1__GetVersionReleaseNotes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVersionReleaseNotes), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:product_id", -1, &(a->_ns1__GetVersionReleaseNotes::product_USCOREid), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:uCurVersion", -1, &(a->_ns1__GetVersionReleaseNotes::uCurVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVersionReleaseNotes::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetVersionReleaseNotes(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVersionReleaseNotes * SOAP_FMAC4 soap_in__ns1__GetVersionReleaseNotes(struct soap *soap, const char *tag, _ns1__GetVersionReleaseNotes *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVersionReleaseNotes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVersionReleaseNotes, sizeof(_ns1__GetVersionReleaseNotes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetVersionReleaseNotes)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetVersionReleaseNotes *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_product_USCOREid1 = 1;
	size_t soap_flag_uCurVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_product_USCOREid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:product_id", &(a->_ns1__GetVersionReleaseNotes::product_USCOREid), "xsd:unsignedInt"))
				{	soap_flag_product_USCOREid1--;
					continue;
				}
			if (soap_flag_uCurVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:uCurVersion", &(a->_ns1__GetVersionReleaseNotes::uCurVersion), "xsd:unsignedInt"))
				{	soap_flag_uCurVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVersionReleaseNotes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVersionReleaseNotes, 0, sizeof(_ns1__GetVersionReleaseNotes), 0, soap_copy__ns1__GetVersionReleaseNotes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_product_USCOREid1 > 0 || soap_flag_uCurVersion1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetVersionReleaseNotes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetVersionReleaseNotes);
	if (this->soap_out(soap, tag?tag:"ns1:GetVersionReleaseNotes", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetVersionReleaseNotes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVersionReleaseNotes(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVersionReleaseNotes * SOAP_FMAC4 soap_get__ns1__GetVersionReleaseNotes(struct soap *soap, _ns1__GetVersionReleaseNotes *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVersionReleaseNotes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetVersionReleaseNotes * SOAP_FMAC2 soap_instantiate__ns1__GetVersionReleaseNotes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVersionReleaseNotes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetVersionReleaseNotes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetVersionReleaseNotes);
		if (size)
			*size = sizeof(_ns1__GetVersionReleaseNotes);
		((_ns1__GetVersionReleaseNotes*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetVersionReleaseNotes, n);
		if (size)
			*size = n * sizeof(_ns1__GetVersionReleaseNotes);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetVersionReleaseNotes*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetVersionReleaseNotes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVersionReleaseNotes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetVersionReleaseNotes %p -> %p\n", q, p));
	*(_ns1__GetVersionReleaseNotes*)p = *(_ns1__GetVersionReleaseNotes*)q;
}

void _ns1__CompareVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CompareVersionResponse::CompareVersionResult = NULL;
	/* transient soap skipped */
}

void _ns1__CompareVersionResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfVersionRevision(soap, &this->_ns1__CompareVersionResponse::CompareVersionResult);
	/* transient soap skipped */
#endif
}

int _ns1__CompareVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CompareVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CompareVersionResponse(struct soap *soap, const char *tag, int id, const _ns1__CompareVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CompareVersionResponse), type))
		return soap->error;
	if (a->CompareVersionResult)
		soap_element_result(soap, "ns1:CompareVersionResult");
	if (soap_out_PointerTons1__ArrayOfVersionRevision(soap, "ns1:CompareVersionResult", -1, &(a->_ns1__CompareVersionResponse::CompareVersionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CompareVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CompareVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CompareVersionResponse * SOAP_FMAC4 soap_in__ns1__CompareVersionResponse(struct soap *soap, const char *tag, _ns1__CompareVersionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CompareVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CompareVersionResponse, sizeof(_ns1__CompareVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CompareVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CompareVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CompareVersionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CompareVersionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfVersionRevision(soap, "ns1:CompareVersionResult", &(a->_ns1__CompareVersionResponse::CompareVersionResult), "ns1:ArrayOfVersionRevision"))
				{	soap_flag_CompareVersionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CompareVersionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CompareVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CompareVersionResponse, 0, sizeof(_ns1__CompareVersionResponse), 0, soap_copy__ns1__CompareVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CompareVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CompareVersionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CompareVersionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CompareVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CompareVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CompareVersionResponse * SOAP_FMAC4 soap_get__ns1__CompareVersionResponse(struct soap *soap, _ns1__CompareVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CompareVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CompareVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__CompareVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CompareVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CompareVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CompareVersionResponse);
		if (size)
			*size = sizeof(_ns1__CompareVersionResponse);
		((_ns1__CompareVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CompareVersionResponse, n);
		if (size)
			*size = n * sizeof(_ns1__CompareVersionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CompareVersionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CompareVersionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CompareVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CompareVersionResponse %p -> %p\n", q, p));
	*(_ns1__CompareVersionResponse*)p = *(_ns1__CompareVersionResponse*)q;
}

void _ns1__CompareVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__CompareVersion::userId);
	soap_default_unsignedInt(soap, &this->_ns1__CompareVersion::product_USCOREid);
	soap_default_unsignedInt(soap, &this->_ns1__CompareVersion::uCurVersion);
	soap_default_unsignedInt(soap, &this->_ns1__CompareVersion::uUpdateVersion);
	soap_default_bool(soap, &this->_ns1__CompareVersion::bLoadOnHasNew);
	/* transient soap skipped */
}

void _ns1__CompareVersion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__CompareVersion::userId, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int _ns1__CompareVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CompareVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CompareVersion(struct soap *soap, const char *tag, int id, const _ns1__CompareVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CompareVersion), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:userId", -1, &(a->_ns1__CompareVersion::userId), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:product_id", -1, &(a->_ns1__CompareVersion::product_USCOREid), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:uCurVersion", -1, &(a->_ns1__CompareVersion::uCurVersion), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:uUpdateVersion", -1, &(a->_ns1__CompareVersion::uUpdateVersion), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:bLoadOnHasNew", -1, &(a->_ns1__CompareVersion::bLoadOnHasNew), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CompareVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CompareVersion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CompareVersion * SOAP_FMAC4 soap_in__ns1__CompareVersion(struct soap *soap, const char *tag, _ns1__CompareVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CompareVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CompareVersion, sizeof(_ns1__CompareVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CompareVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CompareVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_product_USCOREid1 = 1;
	size_t soap_flag_uCurVersion1 = 1;
	size_t soap_flag_uUpdateVersion1 = 1;
	size_t soap_flag_bLoadOnHasNew1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:userId", &(a->_ns1__CompareVersion::userId), "xsd:int"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_product_USCOREid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:product_id", &(a->_ns1__CompareVersion::product_USCOREid), "xsd:unsignedInt"))
				{	soap_flag_product_USCOREid1--;
					continue;
				}
			if (soap_flag_uCurVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:uCurVersion", &(a->_ns1__CompareVersion::uCurVersion), "xsd:unsignedInt"))
				{	soap_flag_uCurVersion1--;
					continue;
				}
			if (soap_flag_uUpdateVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:uUpdateVersion", &(a->_ns1__CompareVersion::uUpdateVersion), "xsd:unsignedInt"))
				{	soap_flag_uUpdateVersion1--;
					continue;
				}
			if (soap_flag_bLoadOnHasNew1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:bLoadOnHasNew", &(a->_ns1__CompareVersion::bLoadOnHasNew), "xsd:boolean"))
				{	soap_flag_bLoadOnHasNew1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CompareVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CompareVersion, 0, sizeof(_ns1__CompareVersion), 0, soap_copy__ns1__CompareVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0 || soap_flag_product_USCOREid1 > 0 || soap_flag_uCurVersion1 > 0 || soap_flag_uUpdateVersion1 > 0 || soap_flag_bLoadOnHasNew1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CompareVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CompareVersion);
	if (this->soap_out(soap, tag?tag:"ns1:CompareVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CompareVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CompareVersion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CompareVersion * SOAP_FMAC4 soap_get__ns1__CompareVersion(struct soap *soap, _ns1__CompareVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CompareVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CompareVersion * SOAP_FMAC2 soap_instantiate__ns1__CompareVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CompareVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CompareVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CompareVersion);
		if (size)
			*size = sizeof(_ns1__CompareVersion);
		((_ns1__CompareVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CompareVersion, n);
		if (size)
			*size = n * sizeof(_ns1__CompareVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CompareVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CompareVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CompareVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CompareVersion %p -> %p\n", q, p));
	*(_ns1__CompareVersion*)p = *(_ns1__CompareVersion*)q;
}

void _ns1__SetRevisionReadFlagResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__SetRevisionReadFlagResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__SetRevisionReadFlagResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRevisionReadFlagResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRevisionReadFlagResponse(struct soap *soap, const char *tag, int id, const _ns1__SetRevisionReadFlagResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRevisionReadFlagResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRevisionReadFlagResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRevisionReadFlagResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRevisionReadFlagResponse * SOAP_FMAC4 soap_in__ns1__SetRevisionReadFlagResponse(struct soap *soap, const char *tag, _ns1__SetRevisionReadFlagResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRevisionReadFlagResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRevisionReadFlagResponse, sizeof(_ns1__SetRevisionReadFlagResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRevisionReadFlagResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRevisionReadFlagResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRevisionReadFlagResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRevisionReadFlagResponse, 0, sizeof(_ns1__SetRevisionReadFlagResponse), 0, soap_copy__ns1__SetRevisionReadFlagResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRevisionReadFlagResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRevisionReadFlagResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetRevisionReadFlagResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRevisionReadFlagResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRevisionReadFlagResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRevisionReadFlagResponse * SOAP_FMAC4 soap_get__ns1__SetRevisionReadFlagResponse(struct soap *soap, _ns1__SetRevisionReadFlagResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRevisionReadFlagResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRevisionReadFlagResponse * SOAP_FMAC2 soap_instantiate__ns1__SetRevisionReadFlagResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRevisionReadFlagResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRevisionReadFlagResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRevisionReadFlagResponse);
		if (size)
			*size = sizeof(_ns1__SetRevisionReadFlagResponse);
		((_ns1__SetRevisionReadFlagResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__SetRevisionReadFlagResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SetRevisionReadFlagResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetRevisionReadFlagResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetRevisionReadFlagResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRevisionReadFlagResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRevisionReadFlagResponse %p -> %p\n", q, p));
	*(_ns1__SetRevisionReadFlagResponse*)p = *(_ns1__SetRevisionReadFlagResponse*)q;
}

void _ns1__SetRevisionReadFlag::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__SetRevisionReadFlag::userId);
	this->_ns1__SetRevisionReadFlag::revisionIdArr = NULL;
	/* transient soap skipped */
}

void _ns1__SetRevisionReadFlag::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__SetRevisionReadFlag::userId, SOAP_TYPE_int);
	soap_serialize_PointerTons1__ArrayOfInt(soap, &this->_ns1__SetRevisionReadFlag::revisionIdArr);
	/* transient soap skipped */
#endif
}

int _ns1__SetRevisionReadFlag::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRevisionReadFlag(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRevisionReadFlag(struct soap *soap, const char *tag, int id, const _ns1__SetRevisionReadFlag *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRevisionReadFlag), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:userId", -1, &(a->_ns1__SetRevisionReadFlag::userId), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfInt(soap, "ns1:revisionIdArr", -1, &(a->_ns1__SetRevisionReadFlag::revisionIdArr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRevisionReadFlag::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRevisionReadFlag(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRevisionReadFlag * SOAP_FMAC4 soap_in__ns1__SetRevisionReadFlag(struct soap *soap, const char *tag, _ns1__SetRevisionReadFlag *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRevisionReadFlag *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRevisionReadFlag, sizeof(_ns1__SetRevisionReadFlag), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRevisionReadFlag)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRevisionReadFlag *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_revisionIdArr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:userId", &(a->_ns1__SetRevisionReadFlag::userId), "xsd:int"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_revisionIdArr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfInt(soap, "ns1:revisionIdArr", &(a->_ns1__SetRevisionReadFlag::revisionIdArr), "ns1:ArrayOfInt"))
				{	soap_flag_revisionIdArr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRevisionReadFlag *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRevisionReadFlag, 0, sizeof(_ns1__SetRevisionReadFlag), 0, soap_copy__ns1__SetRevisionReadFlag);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__SetRevisionReadFlag::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRevisionReadFlag);
	if (this->soap_out(soap, tag?tag:"ns1:SetRevisionReadFlag", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRevisionReadFlag::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRevisionReadFlag(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRevisionReadFlag * SOAP_FMAC4 soap_get__ns1__SetRevisionReadFlag(struct soap *soap, _ns1__SetRevisionReadFlag *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRevisionReadFlag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRevisionReadFlag * SOAP_FMAC2 soap_instantiate__ns1__SetRevisionReadFlag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRevisionReadFlag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRevisionReadFlag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRevisionReadFlag);
		if (size)
			*size = sizeof(_ns1__SetRevisionReadFlag);
		((_ns1__SetRevisionReadFlag*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__SetRevisionReadFlag, n);
		if (size)
			*size = n * sizeof(_ns1__SetRevisionReadFlag);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetRevisionReadFlag*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetRevisionReadFlag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRevisionReadFlag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRevisionReadFlag %p -> %p\n", q, p));
	*(_ns1__SetRevisionReadFlag*)p = *(_ns1__SetRevisionReadFlag*)q;
}

void _ns1__GetUpdateVerByCurVerResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetUpdateVerByCurVerResponse::GetUpdateVerByCurVerResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetUpdateVerByCurVerResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfProductVersion(soap, &this->_ns1__GetUpdateVerByCurVerResponse::GetUpdateVerByCurVerResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetUpdateVerByCurVerResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetUpdateVerByCurVerResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetUpdateVerByCurVerResponse(struct soap *soap, const char *tag, int id, const _ns1__GetUpdateVerByCurVerResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse), type))
		return soap->error;
	if (a->GetUpdateVerByCurVerResult)
		soap_element_result(soap, "ns1:GetUpdateVerByCurVerResult");
	if (soap_out_PointerTons1__ArrayOfProductVersion(soap, "ns1:GetUpdateVerByCurVerResult", -1, &(a->_ns1__GetUpdateVerByCurVerResponse::GetUpdateVerByCurVerResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetUpdateVerByCurVerResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetUpdateVerByCurVerResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetUpdateVerByCurVerResponse * SOAP_FMAC4 soap_in__ns1__GetUpdateVerByCurVerResponse(struct soap *soap, const char *tag, _ns1__GetUpdateVerByCurVerResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetUpdateVerByCurVerResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse, sizeof(_ns1__GetUpdateVerByCurVerResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetUpdateVerByCurVerResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetUpdateVerByCurVerResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetUpdateVerByCurVerResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfProductVersion(soap, "ns1:GetUpdateVerByCurVerResult", &(a->_ns1__GetUpdateVerByCurVerResponse::GetUpdateVerByCurVerResult), "ns1:ArrayOfProductVersion"))
				{	soap_flag_GetUpdateVerByCurVerResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetUpdateVerByCurVerResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetUpdateVerByCurVerResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse, 0, sizeof(_ns1__GetUpdateVerByCurVerResponse), 0, soap_copy__ns1__GetUpdateVerByCurVerResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetUpdateVerByCurVerResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetUpdateVerByCurVerResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetUpdateVerByCurVerResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetUpdateVerByCurVerResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetUpdateVerByCurVerResponse * SOAP_FMAC4 soap_get__ns1__GetUpdateVerByCurVerResponse(struct soap *soap, _ns1__GetUpdateVerByCurVerResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetUpdateVerByCurVerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetUpdateVerByCurVerResponse * SOAP_FMAC2 soap_instantiate__ns1__GetUpdateVerByCurVerResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetUpdateVerByCurVerResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetUpdateVerByCurVerResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetUpdateVerByCurVerResponse);
		if (size)
			*size = sizeof(_ns1__GetUpdateVerByCurVerResponse);
		((_ns1__GetUpdateVerByCurVerResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetUpdateVerByCurVerResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetUpdateVerByCurVerResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetUpdateVerByCurVerResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetUpdateVerByCurVerResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetUpdateVerByCurVerResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetUpdateVerByCurVerResponse %p -> %p\n", q, p));
	*(_ns1__GetUpdateVerByCurVerResponse*)p = *(_ns1__GetUpdateVerByCurVerResponse*)q;
}

void _ns1__GetUpdateVerByCurVer::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_ns1__GetUpdateVerByCurVer::userId);
	soap_default_unsignedInt(soap, &this->_ns1__GetUpdateVerByCurVer::product_USCOREid);
	soap_default_unsignedInt(soap, &this->_ns1__GetUpdateVerByCurVer::uCurVersion);
	/* transient soap skipped */
}

void _ns1__GetUpdateVerByCurVer::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__GetUpdateVerByCurVer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetUpdateVerByCurVer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetUpdateVerByCurVer(struct soap *soap, const char *tag, int id, const _ns1__GetUpdateVerByCurVer *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetUpdateVerByCurVer), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:userId", -1, &(a->_ns1__GetUpdateVerByCurVer::userId), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:product_id", -1, &(a->_ns1__GetUpdateVerByCurVer::product_USCOREid), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:uCurVersion", -1, &(a->_ns1__GetUpdateVerByCurVer::uCurVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetUpdateVerByCurVer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetUpdateVerByCurVer(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetUpdateVerByCurVer * SOAP_FMAC4 soap_in__ns1__GetUpdateVerByCurVer(struct soap *soap, const char *tag, _ns1__GetUpdateVerByCurVer *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetUpdateVerByCurVer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetUpdateVerByCurVer, sizeof(_ns1__GetUpdateVerByCurVer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetUpdateVerByCurVer)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetUpdateVerByCurVer *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_product_USCOREid1 = 1;
	size_t soap_flag_uCurVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:userId", &(a->_ns1__GetUpdateVerByCurVer::userId), "xsd:unsignedInt"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_product_USCOREid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:product_id", &(a->_ns1__GetUpdateVerByCurVer::product_USCOREid), "xsd:unsignedInt"))
				{	soap_flag_product_USCOREid1--;
					continue;
				}
			if (soap_flag_uCurVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:uCurVersion", &(a->_ns1__GetUpdateVerByCurVer::uCurVersion), "xsd:unsignedInt"))
				{	soap_flag_uCurVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetUpdateVerByCurVer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetUpdateVerByCurVer, 0, sizeof(_ns1__GetUpdateVerByCurVer), 0, soap_copy__ns1__GetUpdateVerByCurVer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userId1 > 0 || soap_flag_product_USCOREid1 > 0 || soap_flag_uCurVersion1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetUpdateVerByCurVer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetUpdateVerByCurVer);
	if (this->soap_out(soap, tag?tag:"ns1:GetUpdateVerByCurVer", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetUpdateVerByCurVer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetUpdateVerByCurVer(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetUpdateVerByCurVer * SOAP_FMAC4 soap_get__ns1__GetUpdateVerByCurVer(struct soap *soap, _ns1__GetUpdateVerByCurVer *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetUpdateVerByCurVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetUpdateVerByCurVer * SOAP_FMAC2 soap_instantiate__ns1__GetUpdateVerByCurVer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetUpdateVerByCurVer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetUpdateVerByCurVer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetUpdateVerByCurVer);
		if (size)
			*size = sizeof(_ns1__GetUpdateVerByCurVer);
		((_ns1__GetUpdateVerByCurVer*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetUpdateVerByCurVer, n);
		if (size)
			*size = n * sizeof(_ns1__GetUpdateVerByCurVer);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetUpdateVerByCurVer*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetUpdateVerByCurVer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetUpdateVerByCurVer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetUpdateVerByCurVer %p -> %p\n", q, p));
	*(_ns1__GetUpdateVerByCurVer*)p = *(_ns1__GetUpdateVerByCurVer*)q;
}

void _ns1__LoginByByteArrResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_ns1__LoginByByteArrResponse::LoginByByteArrResult);
	/* transient soap skipped */
}

void _ns1__LoginByByteArrResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__LoginByByteArrResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LoginByByteArrResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginByByteArrResponse(struct soap *soap, const char *tag, int id, const _ns1__LoginByByteArrResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LoginByByteArrResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:LoginByByteArrResult");
	if (soap_out_unsignedInt(soap, "ns1:LoginByByteArrResult", -1, &(a->_ns1__LoginByByteArrResponse::LoginByByteArrResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LoginByByteArrResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LoginByByteArrResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LoginByByteArrResponse * SOAP_FMAC4 soap_in__ns1__LoginByByteArrResponse(struct soap *soap, const char *tag, _ns1__LoginByByteArrResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LoginByByteArrResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LoginByByteArrResponse, sizeof(_ns1__LoginByByteArrResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LoginByByteArrResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LoginByByteArrResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LoginByByteArrResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginByByteArrResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:LoginByByteArrResult", &(a->_ns1__LoginByByteArrResponse::LoginByByteArrResult), "xsd:unsignedInt"))
				{	soap_flag_LoginByByteArrResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LoginByByteArrResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LoginByByteArrResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LoginByByteArrResponse, 0, sizeof(_ns1__LoginByByteArrResponse), 0, soap_copy__ns1__LoginByByteArrResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LoginByByteArrResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__LoginByByteArrResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LoginByByteArrResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LoginByByteArrResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LoginByByteArrResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LoginByByteArrResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LoginByByteArrResponse * SOAP_FMAC4 soap_get__ns1__LoginByByteArrResponse(struct soap *soap, _ns1__LoginByByteArrResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LoginByByteArrResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LoginByByteArrResponse * SOAP_FMAC2 soap_instantiate__ns1__LoginByByteArrResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LoginByByteArrResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LoginByByteArrResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LoginByByteArrResponse);
		if (size)
			*size = sizeof(_ns1__LoginByByteArrResponse);
		((_ns1__LoginByByteArrResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LoginByByteArrResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LoginByByteArrResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LoginByByteArrResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LoginByByteArrResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LoginByByteArrResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LoginByByteArrResponse %p -> %p\n", q, p));
	*(_ns1__LoginByByteArrResponse*)p = *(_ns1__LoginByByteArrResponse*)q;
}

void _ns1__LoginByByteArr::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LoginByByteArr::userInfo = NULL;
	/* transient soap skipped */
}

void _ns1__LoginByByteArr::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__LoginByByteArr::userInfo);
	/* transient soap skipped */
#endif
}

int _ns1__LoginByByteArr::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LoginByByteArr(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginByByteArr(struct soap *soap, const char *tag, int id, const _ns1__LoginByByteArr *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LoginByByteArr), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:userInfo", -1, &(a->_ns1__LoginByByteArr::userInfo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LoginByByteArr::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LoginByByteArr(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LoginByByteArr * SOAP_FMAC4 soap_in__ns1__LoginByByteArr(struct soap *soap, const char *tag, _ns1__LoginByByteArr *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LoginByByteArr *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LoginByByteArr, sizeof(_ns1__LoginByByteArr), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LoginByByteArr)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LoginByByteArr *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:userInfo", &(a->_ns1__LoginByByteArr::userInfo), "xsd:base64Binary"))
				{	soap_flag_userInfo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LoginByByteArr *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LoginByByteArr, 0, sizeof(_ns1__LoginByByteArr), 0, soap_copy__ns1__LoginByByteArr);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LoginByByteArr::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LoginByByteArr);
	if (this->soap_out(soap, tag?tag:"ns1:LoginByByteArr", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LoginByByteArr::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LoginByByteArr(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LoginByByteArr * SOAP_FMAC4 soap_get__ns1__LoginByByteArr(struct soap *soap, _ns1__LoginByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LoginByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LoginByByteArr * SOAP_FMAC2 soap_instantiate__ns1__LoginByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LoginByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LoginByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LoginByByteArr);
		if (size)
			*size = sizeof(_ns1__LoginByByteArr);
		((_ns1__LoginByByteArr*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LoginByByteArr, n);
		if (size)
			*size = n * sizeof(_ns1__LoginByByteArr);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LoginByByteArr*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LoginByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LoginByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LoginByByteArr %p -> %p\n", q, p));
	*(_ns1__LoginByByteArr*)p = *(_ns1__LoginByByteArr*)q;
}

void _ns1__LoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_ns1__LoginResponse::LoginResult);
	/* transient soap skipped */
}

void _ns1__LoginResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__LoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginResponse(struct soap *soap, const char *tag, int id, const _ns1__LoginResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LoginResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:LoginResult");
	if (soap_out_unsignedInt(soap, "ns1:LoginResult", -1, &(a->_ns1__LoginResponse::LoginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_in__ns1__LoginResponse(struct soap *soap, const char *tag, _ns1__LoginResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LoginResponse, sizeof(_ns1__LoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:LoginResult", &(a->_ns1__LoginResponse::LoginResult), "xsd:unsignedInt"))
				{	soap_flag_LoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LoginResponse, 0, sizeof(_ns1__LoginResponse), 0, soap_copy__ns1__LoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LoginResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__LoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LoginResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LoginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_get__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LoginResponse * SOAP_FMAC2 soap_instantiate__ns1__LoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LoginResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LoginResponse);
		if (size)
			*size = sizeof(_ns1__LoginResponse);
		((_ns1__LoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LoginResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LoginResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LoginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LoginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LoginResponse %p -> %p\n", q, p));
	*(_ns1__LoginResponse*)p = *(_ns1__LoginResponse*)q;
}

void _ns1__Login::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Login::computerMac = NULL;
	this->_ns1__Login::computerIp = NULL;
	soap_default_string(soap, &this->_ns1__Login::computerName);
	soap_default_unsignedInt(soap, &this->_ns1__Login::dogSerial);
	/* transient soap skipped */
}

void _ns1__Login::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__Login::computerMac);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__Login::computerIp);
	soap_serialize_string(soap, &this->_ns1__Login::computerName);
	/* transient soap skipped */
#endif
}

int _ns1__Login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login(struct soap *soap, const char *tag, int id, const _ns1__Login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Login), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:computerMac", -1, &(a->_ns1__Login::computerMac), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:computerIp", -1, &(a->_ns1__Login::computerIp), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:computerName", -1, &(a->_ns1__Login::computerName), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:dogSerial", -1, &(a->_ns1__Login::dogSerial), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Login(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_in__ns1__Login(struct soap *soap, const char *tag, _ns1__Login *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Login *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_computerMac1 = 1;
	size_t soap_flag_computerIp1 = 1;
	size_t soap_flag_computerName1 = 1;
	size_t soap_flag_dogSerial1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_computerMac1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:computerMac", &(a->_ns1__Login::computerMac), "xsd:base64Binary"))
				{	soap_flag_computerMac1--;
					continue;
				}
			if (soap_flag_computerIp1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:computerIp", &(a->_ns1__Login::computerIp), "xsd:base64Binary"))
				{	soap_flag_computerIp1--;
					continue;
				}
			if (soap_flag_computerName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:computerName", &(a->_ns1__Login::computerName), "xsd:string"))
				{	soap_flag_computerName1--;
					continue;
				}
			if (soap_flag_dogSerial1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:dogSerial", &(a->_ns1__Login::dogSerial), "xsd:unsignedInt"))
				{	soap_flag_dogSerial1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Login, 0, sizeof(_ns1__Login), 0, soap_copy__ns1__Login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dogSerial1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Login);
	if (this->soap_out(soap, tag?tag:"ns1:Login", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Login(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_get__ns1__Login(struct soap *soap, _ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Login * SOAP_FMAC2 soap_instantiate__ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Login);
		if (size)
			*size = sizeof(_ns1__Login);
		((_ns1__Login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Login, n);
		if (size)
			*size = n * sizeof(_ns1__Login);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Login*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Login %p -> %p\n", q, p));
	*(_ns1__Login*)p = *(_ns1__Login*)q;
}

void ns1__FileHeader::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ObjectV::soap_default(soap);
	soap_default_string(soap, &this->ns1__FileHeader::filePath);
	soap_default_int(soap, &this->ns1__FileHeader::fileType);
	soap_default_string(soap, &this->ns1__FileHeader::fileName);
	soap_default_string(soap, &this->ns1__FileHeader::fileNameServer);
	soap_default_int(soap, &this->ns1__FileHeader::hostId);
	soap_default_int(soap, &this->ns1__FileHeader::ownerId);
	this->ns1__FileHeader::matter = NULL;
	soap_default_string(soap, &this->ns1__FileHeader::description);
	soap_default_time(soap, &this->ns1__FileHeader::occurDateValue);
	soap_default_int(soap, &this->ns1__FileHeader::serialNo);
}

void ns1__FileHeader::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__FileHeader::filePath);
	soap_embedded(soap, &this->ns1__FileHeader::fileType, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->ns1__FileHeader::fileName);
	soap_serialize_string(soap, &this->ns1__FileHeader::fileNameServer);
	soap_embedded(soap, &this->ns1__FileHeader::hostId, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__FileHeader::ownerId, SOAP_TYPE_int);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__FileHeader::matter);
	soap_serialize_string(soap, &this->ns1__FileHeader::description);
	soap_embedded(soap, &this->ns1__FileHeader::serialNo, SOAP_TYPE_int);
	this->ns1__ObjectV::soap_serialize(soap);
#endif
}

int ns1__FileHeader::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__FileHeader(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FileHeader(struct soap *soap, const char *tag, int id, const ns1__FileHeader *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__FileHeader), "ns1:FileHeader"))
		return soap->error;
	if (soap_out_int(soap, "ns1:id", -1, &(a->ns1__ObjectV::id), ""))
		return soap->error;
	soap_outliteral(soap, "ns1:tag", &(a->ns1__ObjectV::tag), NULL);
	/* transient soap skipped */
	if (soap_out_string(soap, "ns1:filePath", -1, &(a->ns1__FileHeader::filePath), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:fileType", -1, &(a->ns1__FileHeader::fileType), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:fileName", -1, &(a->ns1__FileHeader::fileName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:fileNameServer", -1, &(a->ns1__FileHeader::fileNameServer), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:hostId", -1, &(a->ns1__FileHeader::hostId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:ownerId", -1, &(a->ns1__FileHeader::ownerId), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:matter", -1, &(a->ns1__FileHeader::matter), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:description", -1, &(a->ns1__FileHeader::description), ""))
		return soap->error;
	if (soap_out_time(soap, "ns1:occurDateValue", -1, &(a->ns1__FileHeader::occurDateValue), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:serialNo", -1, &(a->ns1__FileHeader::serialNo), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__FileHeader::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__FileHeader(soap, tag, this, type);
}

SOAP_FMAC3 ns1__FileHeader * SOAP_FMAC4 soap_in_ns1__FileHeader(struct soap *soap, const char *tag, ns1__FileHeader *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__FileHeader *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__FileHeader, sizeof(ns1__FileHeader), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__FileHeader)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__FileHeader *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_tag2 = 1;
	size_t soap_flag_filePath1 = 1;
	size_t soap_flag_fileType1 = 1;
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_fileNameServer1 = 1;
	size_t soap_flag_hostId1 = 1;
	size_t soap_flag_ownerId1 = 1;
	size_t soap_flag_matter1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_occurDateValue1 = 1;
	size_t soap_flag_serialNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:id", &(a->ns1__ObjectV::id), "xsd:int"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_tag2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "ns1:tag", &(a->ns1__ObjectV::tag)))
				{	soap_flag_tag2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_filePath1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:filePath", &(a->ns1__FileHeader::filePath), "xsd:string"))
				{	soap_flag_filePath1--;
					continue;
				}
			if (soap_flag_fileType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:fileType", &(a->ns1__FileHeader::fileType), "xsd:int"))
				{	soap_flag_fileType1--;
					continue;
				}
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:fileName", &(a->ns1__FileHeader::fileName), "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			if (soap_flag_fileNameServer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:fileNameServer", &(a->ns1__FileHeader::fileNameServer), "xsd:string"))
				{	soap_flag_fileNameServer1--;
					continue;
				}
			if (soap_flag_hostId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:hostId", &(a->ns1__FileHeader::hostId), "xsd:int"))
				{	soap_flag_hostId1--;
					continue;
				}
			if (soap_flag_ownerId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:ownerId", &(a->ns1__FileHeader::ownerId), "xsd:int"))
				{	soap_flag_ownerId1--;
					continue;
				}
			if (soap_flag_matter1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:matter", &(a->ns1__FileHeader::matter), "xsd:base64Binary"))
				{	soap_flag_matter1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:description", &(a->ns1__FileHeader::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap_flag_occurDateValue1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns1:occurDateValue", &(a->ns1__FileHeader::occurDateValue), "xsd:dateTime"))
				{	soap_flag_occurDateValue1--;
					continue;
				}
			if (soap_flag_serialNo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:serialNo", &(a->ns1__FileHeader::serialNo), "xsd:int"))
				{	soap_flag_serialNo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__FileHeader *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__FileHeader, 0, sizeof(ns1__FileHeader), 0, soap_copy_ns1__FileHeader);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id2 > 0 || soap_flag_fileType1 > 0 || soap_flag_hostId1 > 0 || soap_flag_ownerId1 > 0 || soap_flag_occurDateValue1 > 0 || soap_flag_serialNo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__FileHeader::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__FileHeader);
	if (this->soap_out(soap, tag?tag:"ns1:FileHeader", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__FileHeader::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__FileHeader(soap, this, tag, type);
}

SOAP_FMAC3 ns1__FileHeader * SOAP_FMAC4 soap_get_ns1__FileHeader(struct soap *soap, ns1__FileHeader *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__FileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__FileHeader * SOAP_FMAC2 soap_instantiate_ns1__FileHeader(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__FileHeader(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__FileHeader, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__FileHeader);
		if (size)
			*size = sizeof(ns1__FileHeader);
		((ns1__FileHeader*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__FileHeader, n);
		if (size)
			*size = n * sizeof(ns1__FileHeader);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__FileHeader*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__FileHeader*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__FileHeader(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__FileHeader %p -> %p\n", q, p));
	*(ns1__FileHeader*)p = *(ns1__FileHeader*)q;
}

void ns1__DownLoadItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ObjectV::soap_default(soap);
	soap_default_string(soap, &this->ns1__DownLoadItem::title);
	soap_default_time(soap, &this->ns1__DownLoadItem::updateDate);
	soap_default_string(soap, &this->ns1__DownLoadItem::notes);
	soap_default_int(soap, &this->ns1__DownLoadItem::serialno);
	soap_default_string(soap, &this->ns1__DownLoadItem::occurDateValue);
	soap_default_string(soap, &this->ns1__DownLoadItem::fileName);
	soap_default_int(soap, &this->ns1__DownLoadItem::productId);
}

void ns1__DownLoadItem::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__DownLoadItem::title);
	soap_serialize_string(soap, &this->ns1__DownLoadItem::notes);
	soap_embedded(soap, &this->ns1__DownLoadItem::serialno, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->ns1__DownLoadItem::occurDateValue);
	soap_serialize_string(soap, &this->ns1__DownLoadItem::fileName);
	soap_embedded(soap, &this->ns1__DownLoadItem::productId, SOAP_TYPE_int);
	this->ns1__ObjectV::soap_serialize(soap);
#endif
}

int ns1__DownLoadItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__DownLoadItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DownLoadItem(struct soap *soap, const char *tag, int id, const ns1__DownLoadItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__DownLoadItem), "ns1:DownLoadItem"))
		return soap->error;
	if (soap_out_int(soap, "ns1:id", -1, &(a->ns1__ObjectV::id), ""))
		return soap->error;
	soap_outliteral(soap, "ns1:tag", &(a->ns1__ObjectV::tag), NULL);
	/* transient soap skipped */
	if (soap_out_string(soap, "ns1:title", -1, &(a->ns1__DownLoadItem::title), ""))
		return soap->error;
	if (soap_out_time(soap, "ns1:updateDate", -1, &(a->ns1__DownLoadItem::updateDate), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:notes", -1, &(a->ns1__DownLoadItem::notes), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:serialno", -1, &(a->ns1__DownLoadItem::serialno), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:occurDateValue", -1, &(a->ns1__DownLoadItem::occurDateValue), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:fileName", -1, &(a->ns1__DownLoadItem::fileName), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:productId", -1, &(a->ns1__DownLoadItem::productId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__DownLoadItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__DownLoadItem(soap, tag, this, type);
}

SOAP_FMAC3 ns1__DownLoadItem * SOAP_FMAC4 soap_in_ns1__DownLoadItem(struct soap *soap, const char *tag, ns1__DownLoadItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__DownLoadItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__DownLoadItem, sizeof(ns1__DownLoadItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__DownLoadItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__DownLoadItem *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_tag2 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_updateDate1 = 1;
	size_t soap_flag_notes1 = 1;
	size_t soap_flag_serialno1 = 1;
	size_t soap_flag_occurDateValue1 = 1;
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_productId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:id", &(a->ns1__ObjectV::id), "xsd:int"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_tag2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "ns1:tag", &(a->ns1__ObjectV::tag)))
				{	soap_flag_tag2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:title", &(a->ns1__DownLoadItem::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_updateDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns1:updateDate", &(a->ns1__DownLoadItem::updateDate), "xsd:dateTime"))
				{	soap_flag_updateDate1--;
					continue;
				}
			if (soap_flag_notes1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:notes", &(a->ns1__DownLoadItem::notes), "xsd:string"))
				{	soap_flag_notes1--;
					continue;
				}
			if (soap_flag_serialno1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:serialno", &(a->ns1__DownLoadItem::serialno), "xsd:int"))
				{	soap_flag_serialno1--;
					continue;
				}
			if (soap_flag_occurDateValue1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:occurDateValue", &(a->ns1__DownLoadItem::occurDateValue), "xsd:string"))
				{	soap_flag_occurDateValue1--;
					continue;
				}
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:fileName", &(a->ns1__DownLoadItem::fileName), "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:productId", &(a->ns1__DownLoadItem::productId), "xsd:int"))
				{	soap_flag_productId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__DownLoadItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__DownLoadItem, 0, sizeof(ns1__DownLoadItem), 0, soap_copy_ns1__DownLoadItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id2 > 0 || soap_flag_updateDate1 > 0 || soap_flag_serialno1 > 0 || soap_flag_productId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__DownLoadItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__DownLoadItem);
	if (this->soap_out(soap, tag?tag:"ns1:DownLoadItem", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__DownLoadItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__DownLoadItem(soap, this, tag, type);
}

SOAP_FMAC3 ns1__DownLoadItem * SOAP_FMAC4 soap_get_ns1__DownLoadItem(struct soap *soap, ns1__DownLoadItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__DownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__DownLoadItem * SOAP_FMAC2 soap_instantiate_ns1__DownLoadItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__DownLoadItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__DownLoadItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__DownLoadItem);
		if (size)
			*size = sizeof(ns1__DownLoadItem);
		((ns1__DownLoadItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__DownLoadItem, n);
		if (size)
			*size = n * sizeof(ns1__DownLoadItem);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__DownLoadItem*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__DownLoadItem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DownLoadItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__DownLoadItem %p -> %p\n", q, p));
	*(ns1__DownLoadItem*)p = *(ns1__DownLoadItem*)q;
}

void ns1__ArrayOfDownLoadItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfDownLoadItem::__sizeDownLoadItem = 0;
	this->ns1__ArrayOfDownLoadItem::DownLoadItem = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfDownLoadItem::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfDownLoadItem::DownLoadItem)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfDownLoadItem::__sizeDownLoadItem; i++)
		{
			soap_serialize_PointerTons1__DownLoadItem(soap, this->ns1__ArrayOfDownLoadItem::DownLoadItem + i);
		}
	}
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfDownLoadItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfDownLoadItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfDownLoadItem(struct soap *soap, const char *tag, int id, const ns1__ArrayOfDownLoadItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfDownLoadItem), type))
		return soap->error;
	if (a->ns1__ArrayOfDownLoadItem::DownLoadItem)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfDownLoadItem::__sizeDownLoadItem; i++)
			if (soap_out_PointerTons1__DownLoadItem(soap, "ns1:DownLoadItem", -1, a->ns1__ArrayOfDownLoadItem::DownLoadItem + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfDownLoadItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfDownLoadItem(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfDownLoadItem * SOAP_FMAC4 soap_in_ns1__ArrayOfDownLoadItem(struct soap *soap, const char *tag, ns1__ArrayOfDownLoadItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfDownLoadItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfDownLoadItem, sizeof(ns1__ArrayOfDownLoadItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfDownLoadItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfDownLoadItem *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_DownLoadItem1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:DownLoadItem", 1, NULL))
			{	if (a->ns1__ArrayOfDownLoadItem::DownLoadItem == NULL)
				{	if (soap_blist_DownLoadItem1 == NULL)
						soap_blist_DownLoadItem1 = soap_new_block(soap);
					a->ns1__ArrayOfDownLoadItem::DownLoadItem = (ns1__DownLoadItem **)soap_push_block(soap, soap_blist_DownLoadItem1, sizeof(ns1__DownLoadItem *));
					if (a->ns1__ArrayOfDownLoadItem::DownLoadItem == NULL)
						return NULL;
					*a->ns1__ArrayOfDownLoadItem::DownLoadItem = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__DownLoadItem(soap, "ns1:DownLoadItem", a->ns1__ArrayOfDownLoadItem::DownLoadItem, "ns1:DownLoadItem"))
				{	a->ns1__ArrayOfDownLoadItem::__sizeDownLoadItem++;
					a->ns1__ArrayOfDownLoadItem::DownLoadItem = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfDownLoadItem::DownLoadItem)
			soap_pop_block(soap, soap_blist_DownLoadItem1);
		if (a->ns1__ArrayOfDownLoadItem::__sizeDownLoadItem)
			a->ns1__ArrayOfDownLoadItem::DownLoadItem = (ns1__DownLoadItem **)soap_save_block(soap, soap_blist_DownLoadItem1, NULL, 1);
		else
		{	a->ns1__ArrayOfDownLoadItem::DownLoadItem = NULL;
			if (soap_blist_DownLoadItem1)
				soap_end_block(soap, soap_blist_DownLoadItem1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfDownLoadItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfDownLoadItem, 0, sizeof(ns1__ArrayOfDownLoadItem), 0, soap_copy_ns1__ArrayOfDownLoadItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfDownLoadItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfDownLoadItem);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfDownLoadItem", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfDownLoadItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfDownLoadItem(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfDownLoadItem * SOAP_FMAC4 soap_get_ns1__ArrayOfDownLoadItem(struct soap *soap, ns1__ArrayOfDownLoadItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfDownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfDownLoadItem * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfDownLoadItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfDownLoadItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfDownLoadItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfDownLoadItem);
		if (size)
			*size = sizeof(ns1__ArrayOfDownLoadItem);
		((ns1__ArrayOfDownLoadItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfDownLoadItem, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfDownLoadItem);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfDownLoadItem*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfDownLoadItem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfDownLoadItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfDownLoadItem %p -> %p\n", q, p));
	*(ns1__ArrayOfDownLoadItem*)p = *(ns1__ArrayOfDownLoadItem*)q;
}

void ns1__ObjectV::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ObjectV::id);
	this->ns1__ObjectV::tag = NULL;
	/* transient soap skipped */
}

void ns1__ObjectV::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__ObjectV::id, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int ns1__ObjectV::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ObjectV(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ObjectV(struct soap *soap, const char *tag, int id, const ns1__ObjectV *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ObjectV), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:id", -1, &(a->ns1__ObjectV::id), ""))
		return soap->error;
	soap_outliteral(soap, "ns1:tag", &(a->ns1__ObjectV::tag), NULL);
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ObjectV::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ObjectV(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ObjectV * SOAP_FMAC4 soap_in_ns1__ObjectV(struct soap *soap, const char *tag, ns1__ObjectV *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ObjectV *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ObjectV, sizeof(ns1__ObjectV), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ObjectV)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ObjectV *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_tag1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:id", &(a->ns1__ObjectV::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_tag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "ns1:tag", &(a->ns1__ObjectV::tag)))
				{	soap_flag_tag1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ObjectV *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ObjectV, 0, sizeof(ns1__ObjectV), 0, soap_copy_ns1__ObjectV);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ObjectV::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ObjectV);
	if (this->soap_out(soap, tag?tag:"ns1:ObjectV", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ObjectV::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ObjectV(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ObjectV * SOAP_FMAC4 soap_get_ns1__ObjectV(struct soap *soap, ns1__ObjectV *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ObjectV(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ObjectV * SOAP_FMAC2 soap_instantiate_ns1__ObjectV(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ObjectV(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ObjectV, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "ns1:DogAccessHistory"))
	{	cp->type = SOAP_TYPE_ns1__DogAccessHistory;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns1__DogAccessHistory);
			if (size)
				*size = sizeof(ns1__DogAccessHistory);
			((ns1__DogAccessHistory*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__DogAccessHistory, n);
			if (size)
				*size = n * sizeof(ns1__DogAccessHistory);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns1__DogAccessHistory*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns1__DogAccessHistory*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns1:DownLoadItem"))
	{	cp->type = SOAP_TYPE_ns1__DownLoadItem;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns1__DownLoadItem);
			if (size)
				*size = sizeof(ns1__DownLoadItem);
			((ns1__DownLoadItem*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__DownLoadItem, n);
			if (size)
				*size = n * sizeof(ns1__DownLoadItem);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns1__DownLoadItem*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns1__DownLoadItem*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns1:FileHeader"))
	{	cp->type = SOAP_TYPE_ns1__FileHeader;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns1__FileHeader);
			if (size)
				*size = sizeof(ns1__FileHeader);
			((ns1__FileHeader*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__FileHeader, n);
			if (size)
				*size = n * sizeof(ns1__FileHeader);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns1__FileHeader*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns1__FileHeader*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ObjectV);
		if (size)
			*size = sizeof(ns1__ObjectV);
		((ns1__ObjectV*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ObjectV, n);
		if (size)
			*size = n * sizeof(ns1__ObjectV);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ObjectV*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ObjectV*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ObjectV(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ObjectV %p -> %p\n", q, p));
	*(ns1__ObjectV*)p = *(ns1__ObjectV*)q;
}

void ns1__DogAccessHistory::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ObjectV::soap_default(soap);
	soap_default_string(soap, &this->ns1__DogAccessHistory::dogserial);
	soap_default_int(soap, &this->ns1__DogAccessHistory::endUserId);
	soap_default_int(soap, &this->ns1__DogAccessHistory::productId);
	soap_default_int(soap, &this->ns1__DogAccessHistory::cycleSerial);
	soap_default_int(soap, &this->ns1__DogAccessHistory::accessType);
	soap_default_int(soap, &this->ns1__DogAccessHistory::accessOccurDate);
}

void ns1__DogAccessHistory::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__DogAccessHistory::dogserial);
	soap_embedded(soap, &this->ns1__DogAccessHistory::endUserId, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__DogAccessHistory::productId, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__DogAccessHistory::cycleSerial, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__DogAccessHistory::accessType, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__DogAccessHistory::accessOccurDate, SOAP_TYPE_int);
	this->ns1__ObjectV::soap_serialize(soap);
#endif
}

int ns1__DogAccessHistory::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__DogAccessHistory(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DogAccessHistory(struct soap *soap, const char *tag, int id, const ns1__DogAccessHistory *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__DogAccessHistory), "ns1:DogAccessHistory"))
		return soap->error;
	if (soap_out_int(soap, "ns1:id", -1, &(a->ns1__ObjectV::id), ""))
		return soap->error;
	soap_outliteral(soap, "ns1:tag", &(a->ns1__ObjectV::tag), NULL);
	/* transient soap skipped */
	if (soap_out_string(soap, "ns1:dogserial", -1, &(a->ns1__DogAccessHistory::dogserial), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:endUserId", -1, &(a->ns1__DogAccessHistory::endUserId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:productId", -1, &(a->ns1__DogAccessHistory::productId), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:cycleSerial", -1, &(a->ns1__DogAccessHistory::cycleSerial), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:accessType", -1, &(a->ns1__DogAccessHistory::accessType), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:accessOccurDate", -1, &(a->ns1__DogAccessHistory::accessOccurDate), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__DogAccessHistory::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__DogAccessHistory(soap, tag, this, type);
}

SOAP_FMAC3 ns1__DogAccessHistory * SOAP_FMAC4 soap_in_ns1__DogAccessHistory(struct soap *soap, const char *tag, ns1__DogAccessHistory *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__DogAccessHistory *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__DogAccessHistory, sizeof(ns1__DogAccessHistory), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__DogAccessHistory)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__DogAccessHistory *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_tag2 = 1;
	size_t soap_flag_dogserial1 = 1;
	size_t soap_flag_endUserId1 = 1;
	size_t soap_flag_productId1 = 1;
	size_t soap_flag_cycleSerial1 = 1;
	size_t soap_flag_accessType1 = 1;
	size_t soap_flag_accessOccurDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:id", &(a->ns1__ObjectV::id), "xsd:int"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_tag2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "ns1:tag", &(a->ns1__ObjectV::tag)))
				{	soap_flag_tag2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_dogserial1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:dogserial", &(a->ns1__DogAccessHistory::dogserial), "xsd:string"))
				{	soap_flag_dogserial1--;
					continue;
				}
			if (soap_flag_endUserId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:endUserId", &(a->ns1__DogAccessHistory::endUserId), "xsd:int"))
				{	soap_flag_endUserId1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:productId", &(a->ns1__DogAccessHistory::productId), "xsd:int"))
				{	soap_flag_productId1--;
					continue;
				}
			if (soap_flag_cycleSerial1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:cycleSerial", &(a->ns1__DogAccessHistory::cycleSerial), "xsd:int"))
				{	soap_flag_cycleSerial1--;
					continue;
				}
			if (soap_flag_accessType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:accessType", &(a->ns1__DogAccessHistory::accessType), "xsd:int"))
				{	soap_flag_accessType1--;
					continue;
				}
			if (soap_flag_accessOccurDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:accessOccurDate", &(a->ns1__DogAccessHistory::accessOccurDate), "xsd:int"))
				{	soap_flag_accessOccurDate1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__DogAccessHistory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__DogAccessHistory, 0, sizeof(ns1__DogAccessHistory), 0, soap_copy_ns1__DogAccessHistory);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id2 > 0 || soap_flag_endUserId1 > 0 || soap_flag_productId1 > 0 || soap_flag_cycleSerial1 > 0 || soap_flag_accessType1 > 0 || soap_flag_accessOccurDate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__DogAccessHistory::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__DogAccessHistory);
	if (this->soap_out(soap, tag?tag:"ns1:DogAccessHistory", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__DogAccessHistory::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__DogAccessHistory(soap, this, tag, type);
}

SOAP_FMAC3 ns1__DogAccessHistory * SOAP_FMAC4 soap_get_ns1__DogAccessHistory(struct soap *soap, ns1__DogAccessHistory *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__DogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__DogAccessHistory * SOAP_FMAC2 soap_instantiate_ns1__DogAccessHistory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__DogAccessHistory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__DogAccessHistory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__DogAccessHistory);
		if (size)
			*size = sizeof(ns1__DogAccessHistory);
		((ns1__DogAccessHistory*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__DogAccessHistory, n);
		if (size)
			*size = n * sizeof(ns1__DogAccessHistory);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__DogAccessHistory*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__DogAccessHistory*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DogAccessHistory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__DogAccessHistory %p -> %p\n", q, p));
	*(ns1__DogAccessHistory*)p = *(ns1__DogAccessHistory*)q;
}

void ns1__VersionRevision::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns1__VersionRevision::Id);
	soap_default_unsignedInt(soap, &this->ns1__VersionRevision::productId);
	soap_default_xsd__byte(soap, &this->ns1__VersionRevision::revisionType);
	soap_default_xsd__unsignedByte(soap, &this->ns1__VersionRevision::important);
	soap_default_bool(soap, &this->ns1__VersionRevision::readed);
	soap_default_string(soap, &this->ns1__VersionRevision::title);
	soap_default_string(soap, &this->ns1__VersionRevision::contents);
	/* transient soap skipped */
}

void ns1__VersionRevision::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__VersionRevision::title);
	soap_serialize_string(soap, &this->ns1__VersionRevision::contents);
	/* transient soap skipped */
#endif
}

int ns1__VersionRevision::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__VersionRevision(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VersionRevision(struct soap *soap, const char *tag, int id, const ns1__VersionRevision *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__VersionRevision), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:Id", -1, &(a->ns1__VersionRevision::Id), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:productId", -1, &(a->ns1__VersionRevision::productId), ""))
		return soap->error;
	if (soap_out_xsd__byte(soap, "ns1:revisionType", -1, &(a->ns1__VersionRevision::revisionType), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:important", -1, &(a->ns1__VersionRevision::important), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:readed", -1, &(a->ns1__VersionRevision::readed), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:title", -1, &(a->ns1__VersionRevision::title), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:contents", -1, &(a->ns1__VersionRevision::contents), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__VersionRevision::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__VersionRevision(soap, tag, this, type);
}

SOAP_FMAC3 ns1__VersionRevision * SOAP_FMAC4 soap_in_ns1__VersionRevision(struct soap *soap, const char *tag, ns1__VersionRevision *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__VersionRevision *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__VersionRevision, sizeof(ns1__VersionRevision), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__VersionRevision)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__VersionRevision *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_productId1 = 1;
	size_t soap_flag_revisionType1 = 1;
	size_t soap_flag_important1 = 1;
	size_t soap_flag_readed1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_contents1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:Id", &(a->ns1__VersionRevision::Id), "xsd:unsignedInt"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:productId", &(a->ns1__VersionRevision::productId), "xsd:unsignedInt"))
				{	soap_flag_productId1--;
					continue;
				}
			if (soap_flag_revisionType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__byte(soap, "ns1:revisionType", &(a->ns1__VersionRevision::revisionType), "xsd:byte"))
				{	soap_flag_revisionType1--;
					continue;
				}
			if (soap_flag_important1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:important", &(a->ns1__VersionRevision::important), "xsd:unsignedByte"))
				{	soap_flag_important1--;
					continue;
				}
			if (soap_flag_readed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:readed", &(a->ns1__VersionRevision::readed), "xsd:boolean"))
				{	soap_flag_readed1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:title", &(a->ns1__VersionRevision::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_contents1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:contents", &(a->ns1__VersionRevision::contents), "xsd:string"))
				{	soap_flag_contents1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__VersionRevision *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__VersionRevision, 0, sizeof(ns1__VersionRevision), 0, soap_copy_ns1__VersionRevision);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Id1 > 0 || soap_flag_productId1 > 0 || soap_flag_revisionType1 > 0 || soap_flag_important1 > 0 || soap_flag_readed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__VersionRevision::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__VersionRevision);
	if (this->soap_out(soap, tag?tag:"ns1:VersionRevision", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__VersionRevision::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__VersionRevision(soap, this, tag, type);
}

SOAP_FMAC3 ns1__VersionRevision * SOAP_FMAC4 soap_get_ns1__VersionRevision(struct soap *soap, ns1__VersionRevision *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__VersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__VersionRevision * SOAP_FMAC2 soap_instantiate_ns1__VersionRevision(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__VersionRevision(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__VersionRevision, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__VersionRevision);
		if (size)
			*size = sizeof(ns1__VersionRevision);
		((ns1__VersionRevision*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__VersionRevision, n);
		if (size)
			*size = n * sizeof(ns1__VersionRevision);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__VersionRevision*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__VersionRevision*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__VersionRevision(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__VersionRevision %p -> %p\n", q, p));
	*(ns1__VersionRevision*)p = *(ns1__VersionRevision*)q;
}

void ns1__ArrayOfVersionRevision::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfVersionRevision::__sizeVersionRevision = 0;
	this->ns1__ArrayOfVersionRevision::VersionRevision = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfVersionRevision::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfVersionRevision::VersionRevision)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfVersionRevision::__sizeVersionRevision; i++)
		{
			soap_serialize_PointerTons1__VersionRevision(soap, this->ns1__ArrayOfVersionRevision::VersionRevision + i);
		}
	}
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfVersionRevision::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfVersionRevision(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfVersionRevision(struct soap *soap, const char *tag, int id, const ns1__ArrayOfVersionRevision *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfVersionRevision), type))
		return soap->error;
	if (a->ns1__ArrayOfVersionRevision::VersionRevision)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfVersionRevision::__sizeVersionRevision; i++)
			if (soap_out_PointerTons1__VersionRevision(soap, "ns1:VersionRevision", -1, a->ns1__ArrayOfVersionRevision::VersionRevision + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfVersionRevision::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfVersionRevision(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfVersionRevision * SOAP_FMAC4 soap_in_ns1__ArrayOfVersionRevision(struct soap *soap, const char *tag, ns1__ArrayOfVersionRevision *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfVersionRevision *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfVersionRevision, sizeof(ns1__ArrayOfVersionRevision), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfVersionRevision)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfVersionRevision *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_VersionRevision1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:VersionRevision", 1, NULL))
			{	if (a->ns1__ArrayOfVersionRevision::VersionRevision == NULL)
				{	if (soap_blist_VersionRevision1 == NULL)
						soap_blist_VersionRevision1 = soap_new_block(soap);
					a->ns1__ArrayOfVersionRevision::VersionRevision = (ns1__VersionRevision **)soap_push_block(soap, soap_blist_VersionRevision1, sizeof(ns1__VersionRevision *));
					if (a->ns1__ArrayOfVersionRevision::VersionRevision == NULL)
						return NULL;
					*a->ns1__ArrayOfVersionRevision::VersionRevision = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__VersionRevision(soap, "ns1:VersionRevision", a->ns1__ArrayOfVersionRevision::VersionRevision, "ns1:VersionRevision"))
				{	a->ns1__ArrayOfVersionRevision::__sizeVersionRevision++;
					a->ns1__ArrayOfVersionRevision::VersionRevision = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfVersionRevision::VersionRevision)
			soap_pop_block(soap, soap_blist_VersionRevision1);
		if (a->ns1__ArrayOfVersionRevision::__sizeVersionRevision)
			a->ns1__ArrayOfVersionRevision::VersionRevision = (ns1__VersionRevision **)soap_save_block(soap, soap_blist_VersionRevision1, NULL, 1);
		else
		{	a->ns1__ArrayOfVersionRevision::VersionRevision = NULL;
			if (soap_blist_VersionRevision1)
				soap_end_block(soap, soap_blist_VersionRevision1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfVersionRevision *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfVersionRevision, 0, sizeof(ns1__ArrayOfVersionRevision), 0, soap_copy_ns1__ArrayOfVersionRevision);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfVersionRevision::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfVersionRevision);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfVersionRevision", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfVersionRevision::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfVersionRevision(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfVersionRevision * SOAP_FMAC4 soap_get_ns1__ArrayOfVersionRevision(struct soap *soap, ns1__ArrayOfVersionRevision *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfVersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfVersionRevision * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfVersionRevision(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfVersionRevision(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfVersionRevision, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfVersionRevision);
		if (size)
			*size = sizeof(ns1__ArrayOfVersionRevision);
		((ns1__ArrayOfVersionRevision*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfVersionRevision, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfVersionRevision);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfVersionRevision*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfVersionRevision*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfVersionRevision(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfVersionRevision %p -> %p\n", q, p));
	*(ns1__ArrayOfVersionRevision*)p = *(ns1__ArrayOfVersionRevision*)q;
}

void ns1__ArrayOfInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfInt::__sizeint_ = 0;
	this->ns1__ArrayOfInt::int_ = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfInt::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfInt::__sizeint_; i++)
		{
			soap_embedded(soap, this->ns1__ArrayOfInt::int_ + i, SOAP_TYPE_int);
		}
	}
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfInt(struct soap *soap, const char *tag, int id, const ns1__ArrayOfInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfInt), type))
		return soap->error;
	if (a->ns1__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfInt::__sizeint_; i++)
			if (soap_out_int(soap, "ns1:int", -1, a->ns1__ArrayOfInt::int_ + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfInt(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_in_ns1__ArrayOfInt(struct soap *soap, const char *tag, ns1__ArrayOfInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfInt, sizeof(ns1__ArrayOfInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfInt *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_int_1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:int", 1, NULL))
			{	if (a->ns1__ArrayOfInt::int_ == NULL)
				{	if (soap_blist_int_1 == NULL)
						soap_blist_int_1 = soap_new_block(soap);
					a->ns1__ArrayOfInt::int_ = (int *)soap_push_block(soap, soap_blist_int_1, sizeof(int));
					if (a->ns1__ArrayOfInt::int_ == NULL)
						return NULL;
					soap_default_int(soap, a->ns1__ArrayOfInt::int_);
				}
				soap_revert(soap);
				if (soap_in_int(soap, "ns1:int", a->ns1__ArrayOfInt::int_, "xsd:int"))
				{	a->ns1__ArrayOfInt::__sizeint_++;
					a->ns1__ArrayOfInt::int_ = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfInt::int_)
			soap_pop_block(soap, soap_blist_int_1);
		if (a->ns1__ArrayOfInt::__sizeint_)
			a->ns1__ArrayOfInt::int_ = (int *)soap_save_block(soap, soap_blist_int_1, NULL, 1);
		else
		{	a->ns1__ArrayOfInt::int_ = NULL;
			if (soap_blist_int_1)
				soap_end_block(soap, soap_blist_int_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfInt, 0, sizeof(ns1__ArrayOfInt), 0, soap_copy_ns1__ArrayOfInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfInt);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfInt(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_get_ns1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfInt * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfInt);
		if (size)
			*size = sizeof(ns1__ArrayOfInt);
		((ns1__ArrayOfInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfInt, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfInt);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfInt %p -> %p\n", q, p));
	*(ns1__ArrayOfInt*)p = *(ns1__ArrayOfInt*)q;
}

void ns1__ProductVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ProductVersion::id);
	soap_default_unsignedInt(soap, &this->ns1__ProductVersion::productId);
	soap_default_unsignedInt(soap, &this->ns1__ProductVersion::version);
	soap_default_time(soap, &this->ns1__ProductVersion::releaseDate);
	/* transient soap skipped */
}

void ns1__ProductVersion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__ProductVersion::id, SOAP_TYPE_int);
	/* transient soap skipped */
#endif
}

int ns1__ProductVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ProductVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProductVersion(struct soap *soap, const char *tag, int id, const ns1__ProductVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ProductVersion), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:id", -1, &(a->ns1__ProductVersion::id), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:productId", -1, &(a->ns1__ProductVersion::productId), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:version", -1, &(a->ns1__ProductVersion::version), ""))
		return soap->error;
	if (soap_out_time(soap, "ns1:releaseDate", -1, &(a->ns1__ProductVersion::releaseDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ProductVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ProductVersion(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ProductVersion * SOAP_FMAC4 soap_in_ns1__ProductVersion(struct soap *soap, const char *tag, ns1__ProductVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ProductVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ProductVersion, sizeof(ns1__ProductVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ProductVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ProductVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_productId1 = 1;
	size_t soap_flag_version1 = 1;
	size_t soap_flag_releaseDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:id", &(a->ns1__ProductVersion::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_productId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:productId", &(a->ns1__ProductVersion::productId), "xsd:unsignedInt"))
				{	soap_flag_productId1--;
					continue;
				}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:version", &(a->ns1__ProductVersion::version), "xsd:unsignedInt"))
				{	soap_flag_version1--;
					continue;
				}
			if (soap_flag_releaseDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns1:releaseDate", &(a->ns1__ProductVersion::releaseDate), "xsd:dateTime"))
				{	soap_flag_releaseDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ProductVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ProductVersion, 0, sizeof(ns1__ProductVersion), 0, soap_copy_ns1__ProductVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_productId1 > 0 || soap_flag_version1 > 0 || soap_flag_releaseDate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ProductVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ProductVersion);
	if (this->soap_out(soap, tag?tag:"ns1:ProductVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ProductVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ProductVersion(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ProductVersion * SOAP_FMAC4 soap_get_ns1__ProductVersion(struct soap *soap, ns1__ProductVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ProductVersion * SOAP_FMAC2 soap_instantiate_ns1__ProductVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ProductVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ProductVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ProductVersion);
		if (size)
			*size = sizeof(ns1__ProductVersion);
		((ns1__ProductVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ProductVersion, n);
		if (size)
			*size = n * sizeof(ns1__ProductVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ProductVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ProductVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ProductVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ProductVersion %p -> %p\n", q, p));
	*(ns1__ProductVersion*)p = *(ns1__ProductVersion*)q;
}

void ns1__ArrayOfProductVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfProductVersion::__sizeProductVersion = 0;
	this->ns1__ArrayOfProductVersion::ProductVersion = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfProductVersion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfProductVersion::ProductVersion)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfProductVersion::__sizeProductVersion; i++)
		{
			soap_serialize_PointerTons1__ProductVersion(soap, this->ns1__ArrayOfProductVersion::ProductVersion + i);
		}
	}
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfProductVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfProductVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfProductVersion(struct soap *soap, const char *tag, int id, const ns1__ArrayOfProductVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfProductVersion), type))
		return soap->error;
	if (a->ns1__ArrayOfProductVersion::ProductVersion)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfProductVersion::__sizeProductVersion; i++)
			if (soap_out_PointerTons1__ProductVersion(soap, "ns1:ProductVersion", -1, a->ns1__ArrayOfProductVersion::ProductVersion + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfProductVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfProductVersion(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfProductVersion * SOAP_FMAC4 soap_in_ns1__ArrayOfProductVersion(struct soap *soap, const char *tag, ns1__ArrayOfProductVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfProductVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfProductVersion, sizeof(ns1__ArrayOfProductVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfProductVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfProductVersion *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_ProductVersion1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:ProductVersion", 1, NULL))
			{	if (a->ns1__ArrayOfProductVersion::ProductVersion == NULL)
				{	if (soap_blist_ProductVersion1 == NULL)
						soap_blist_ProductVersion1 = soap_new_block(soap);
					a->ns1__ArrayOfProductVersion::ProductVersion = (ns1__ProductVersion **)soap_push_block(soap, soap_blist_ProductVersion1, sizeof(ns1__ProductVersion *));
					if (a->ns1__ArrayOfProductVersion::ProductVersion == NULL)
						return NULL;
					*a->ns1__ArrayOfProductVersion::ProductVersion = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__ProductVersion(soap, "ns1:ProductVersion", a->ns1__ArrayOfProductVersion::ProductVersion, "ns1:ProductVersion"))
				{	a->ns1__ArrayOfProductVersion::__sizeProductVersion++;
					a->ns1__ArrayOfProductVersion::ProductVersion = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfProductVersion::ProductVersion)
			soap_pop_block(soap, soap_blist_ProductVersion1);
		if (a->ns1__ArrayOfProductVersion::__sizeProductVersion)
			a->ns1__ArrayOfProductVersion::ProductVersion = (ns1__ProductVersion **)soap_save_block(soap, soap_blist_ProductVersion1, NULL, 1);
		else
		{	a->ns1__ArrayOfProductVersion::ProductVersion = NULL;
			if (soap_blist_ProductVersion1)
				soap_end_block(soap, soap_blist_ProductVersion1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfProductVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfProductVersion, 0, sizeof(ns1__ArrayOfProductVersion), 0, soap_copy_ns1__ArrayOfProductVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfProductVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfProductVersion);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfProductVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfProductVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfProductVersion(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfProductVersion * SOAP_FMAC4 soap_get_ns1__ArrayOfProductVersion(struct soap *soap, ns1__ArrayOfProductVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfProductVersion * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfProductVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfProductVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfProductVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfProductVersion);
		if (size)
			*size = sizeof(ns1__ArrayOfProductVersion);
		((ns1__ArrayOfProductVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfProductVersion, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfProductVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfProductVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfProductVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfProductVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfProductVersion %p -> %p\n", q, p));
	*(ns1__ArrayOfProductVersion*)p = *(ns1__ArrayOfProductVersion*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveOrUpdateObjects_(struct soap *soap, struct __ns1__SaveOrUpdateObjects_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SaveOrUpdateObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveOrUpdateObjects_(struct soap *soap, const struct __ns1__SaveOrUpdateObjects_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SaveOrUpdateObjects(soap, &a->ns1__SaveOrUpdateObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveOrUpdateObjects_(struct soap *soap, const char *tag, int id, const struct __ns1__SaveOrUpdateObjects_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SaveOrUpdateObjects(soap, "ns1:SaveOrUpdateObjects", -1, &a->ns1__SaveOrUpdateObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveOrUpdateObjects_ * SOAP_FMAC4 soap_in___ns1__SaveOrUpdateObjects_(struct soap *soap, const char *tag, struct __ns1__SaveOrUpdateObjects_ *a, const char *type)
{
	size_t soap_flag_ns1__SaveOrUpdateObjects = 1;
	short soap_flag;
	a = (struct __ns1__SaveOrUpdateObjects_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SaveOrUpdateObjects_, sizeof(struct __ns1__SaveOrUpdateObjects_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SaveOrUpdateObjects_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SaveOrUpdateObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SaveOrUpdateObjects(soap, "ns1:SaveOrUpdateObjects", &a->ns1__SaveOrUpdateObjects, ""))
				{	soap_flag_ns1__SaveOrUpdateObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveOrUpdateObjects_(struct soap *soap, const struct __ns1__SaveOrUpdateObjects_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SaveOrUpdateObjects_(soap, tag?tag:"-ns1:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveOrUpdateObjects_ * SOAP_FMAC4 soap_get___ns1__SaveOrUpdateObjects_(struct soap *soap, struct __ns1__SaveOrUpdateObjects_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SaveOrUpdateObjects_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SaveOrUpdateObjects_ * SOAP_FMAC2 soap_instantiate___ns1__SaveOrUpdateObjects_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SaveOrUpdateObjects_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SaveOrUpdateObjects_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SaveOrUpdateObjects_);
		if (size)
			*size = sizeof(struct __ns1__SaveOrUpdateObjects_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__SaveOrUpdateObjects_, n);
		if (size)
			*size = n * sizeof(struct __ns1__SaveOrUpdateObjects_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SaveOrUpdateObjects_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SaveOrUpdateObjects_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SaveOrUpdateObjects_ %p -> %p\n", q, p));
	*(struct __ns1__SaveOrUpdateObjects_*)p = *(struct __ns1__SaveOrUpdateObjects_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownloadObjects_(struct soap *soap, struct __ns1__DownloadObjects_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownloadObjects_(struct soap *soap, const struct __ns1__DownloadObjects_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadObjects(soap, &a->ns1__DownloadObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownloadObjects_(struct soap *soap, const char *tag, int id, const struct __ns1__DownloadObjects_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DownloadObjects(soap, "ns1:DownloadObjects", -1, &a->ns1__DownloadObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadObjects_ * SOAP_FMAC4 soap_in___ns1__DownloadObjects_(struct soap *soap, const char *tag, struct __ns1__DownloadObjects_ *a, const char *type)
{
	size_t soap_flag_ns1__DownloadObjects = 1;
	short soap_flag;
	a = (struct __ns1__DownloadObjects_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DownloadObjects_, sizeof(struct __ns1__DownloadObjects_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DownloadObjects_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadObjects(soap, "ns1:DownloadObjects", &a->ns1__DownloadObjects, ""))
				{	soap_flag_ns1__DownloadObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownloadObjects_(struct soap *soap, const struct __ns1__DownloadObjects_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DownloadObjects_(soap, tag?tag:"-ns1:DownloadObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadObjects_ * SOAP_FMAC4 soap_get___ns1__DownloadObjects_(struct soap *soap, struct __ns1__DownloadObjects_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DownloadObjects_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DownloadObjects_ * SOAP_FMAC2 soap_instantiate___ns1__DownloadObjects_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DownloadObjects_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DownloadObjects_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DownloadObjects_);
		if (size)
			*size = sizeof(struct __ns1__DownloadObjects_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DownloadObjects_, n);
		if (size)
			*size = n * sizeof(struct __ns1__DownloadObjects_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DownloadObjects_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DownloadObjects_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DownloadObjects_ %p -> %p\n", q, p));
	*(struct __ns1__DownloadObjects_*)p = *(struct __ns1__DownloadObjects_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryObjects_(struct soap *soap, struct __ns1__QueryObjects_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__QueryObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryObjects_(struct soap *soap, const struct __ns1__QueryObjects_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__QueryObjects(soap, &a->ns1__QueryObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryObjects_(struct soap *soap, const char *tag, int id, const struct __ns1__QueryObjects_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__QueryObjects(soap, "ns1:QueryObjects", -1, &a->ns1__QueryObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryObjects_ * SOAP_FMAC4 soap_in___ns1__QueryObjects_(struct soap *soap, const char *tag, struct __ns1__QueryObjects_ *a, const char *type)
{
	size_t soap_flag_ns1__QueryObjects = 1;
	short soap_flag;
	a = (struct __ns1__QueryObjects_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__QueryObjects_, sizeof(struct __ns1__QueryObjects_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__QueryObjects_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__QueryObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__QueryObjects(soap, "ns1:QueryObjects", &a->ns1__QueryObjects, ""))
				{	soap_flag_ns1__QueryObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryObjects_(struct soap *soap, const struct __ns1__QueryObjects_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__QueryObjects_(soap, tag?tag:"-ns1:QueryObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryObjects_ * SOAP_FMAC4 soap_get___ns1__QueryObjects_(struct soap *soap, struct __ns1__QueryObjects_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__QueryObjects_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__QueryObjects_ * SOAP_FMAC2 soap_instantiate___ns1__QueryObjects_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__QueryObjects_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__QueryObjects_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__QueryObjects_);
		if (size)
			*size = sizeof(struct __ns1__QueryObjects_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__QueryObjects_, n);
		if (size)
			*size = n * sizeof(struct __ns1__QueryObjects_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__QueryObjects_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__QueryObjects_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__QueryObjects_ %p -> %p\n", q, p));
	*(struct __ns1__QueryObjects_*)p = *(struct __ns1__QueryObjects_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFileHeader_(struct soap *soap, struct __ns1__GetFileHeader_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetFileHeader = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFileHeader_(struct soap *soap, const struct __ns1__GetFileHeader_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetFileHeader(soap, &a->ns1__GetFileHeader);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFileHeader_(struct soap *soap, const char *tag, int id, const struct __ns1__GetFileHeader_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetFileHeader(soap, "ns1:GetFileHeader", -1, &a->ns1__GetFileHeader, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetFileHeader_ * SOAP_FMAC4 soap_in___ns1__GetFileHeader_(struct soap *soap, const char *tag, struct __ns1__GetFileHeader_ *a, const char *type)
{
	size_t soap_flag_ns1__GetFileHeader = 1;
	short soap_flag;
	a = (struct __ns1__GetFileHeader_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetFileHeader_, sizeof(struct __ns1__GetFileHeader_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetFileHeader_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetFileHeader && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetFileHeader(soap, "ns1:GetFileHeader", &a->ns1__GetFileHeader, ""))
				{	soap_flag_ns1__GetFileHeader--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFileHeader_(struct soap *soap, const struct __ns1__GetFileHeader_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetFileHeader_(soap, tag?tag:"-ns1:GetFileHeader", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetFileHeader_ * SOAP_FMAC4 soap_get___ns1__GetFileHeader_(struct soap *soap, struct __ns1__GetFileHeader_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetFileHeader_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetFileHeader_ * SOAP_FMAC2 soap_instantiate___ns1__GetFileHeader_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetFileHeader_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetFileHeader_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetFileHeader_);
		if (size)
			*size = sizeof(struct __ns1__GetFileHeader_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetFileHeader_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetFileHeader_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetFileHeader_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetFileHeader_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetFileHeader_ %p -> %p\n", q, p));
	*(struct __ns1__GetFileHeader_*)p = *(struct __ns1__GetFileHeader_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryDownLoadItemArrByProductId_(struct soap *soap, struct __ns1__QueryDownLoadItemArrByProductId_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__QueryDownLoadItemArrByProductId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryDownLoadItemArrByProductId_(struct soap *soap, const struct __ns1__QueryDownLoadItemArrByProductId_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, &a->ns1__QueryDownLoadItemArrByProductId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryDownLoadItemArrByProductId_(struct soap *soap, const char *tag, int id, const struct __ns1__QueryDownLoadItemArrByProductId_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, "ns1:QueryDownLoadItemArrByProductId", -1, &a->ns1__QueryDownLoadItemArrByProductId, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryDownLoadItemArrByProductId_ * SOAP_FMAC4 soap_in___ns1__QueryDownLoadItemArrByProductId_(struct soap *soap, const char *tag, struct __ns1__QueryDownLoadItemArrByProductId_ *a, const char *type)
{
	size_t soap_flag_ns1__QueryDownLoadItemArrByProductId = 1;
	short soap_flag;
	a = (struct __ns1__QueryDownLoadItemArrByProductId_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId_, sizeof(struct __ns1__QueryDownLoadItemArrByProductId_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__QueryDownLoadItemArrByProductId_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__QueryDownLoadItemArrByProductId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, "ns1:QueryDownLoadItemArrByProductId", &a->ns1__QueryDownLoadItemArrByProductId, ""))
				{	soap_flag_ns1__QueryDownLoadItemArrByProductId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryDownLoadItemArrByProductId_(struct soap *soap, const struct __ns1__QueryDownLoadItemArrByProductId_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__QueryDownLoadItemArrByProductId_(soap, tag?tag:"-ns1:QueryDownLoadItemArrByProductId", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryDownLoadItemArrByProductId_ * SOAP_FMAC4 soap_get___ns1__QueryDownLoadItemArrByProductId_(struct soap *soap, struct __ns1__QueryDownLoadItemArrByProductId_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__QueryDownLoadItemArrByProductId_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__QueryDownLoadItemArrByProductId_ * SOAP_FMAC2 soap_instantiate___ns1__QueryDownLoadItemArrByProductId_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__QueryDownLoadItemArrByProductId_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__QueryDownLoadItemArrByProductId_);
		if (size)
			*size = sizeof(struct __ns1__QueryDownLoadItemArrByProductId_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__QueryDownLoadItemArrByProductId_, n);
		if (size)
			*size = n * sizeof(struct __ns1__QueryDownLoadItemArrByProductId_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__QueryDownLoadItemArrByProductId_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__QueryDownLoadItemArrByProductId_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__QueryDownLoadItemArrByProductId_ %p -> %p\n", q, p));
	*(struct __ns1__QueryDownLoadItemArrByProductId_*)p = *(struct __ns1__QueryDownLoadItemArrByProductId_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetDogAccessHistory_(struct soap *soap, struct __ns1__GetDogAccessHistory_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetDogAccessHistory = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetDogAccessHistory_(struct soap *soap, const struct __ns1__GetDogAccessHistory_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetDogAccessHistory(soap, &a->ns1__GetDogAccessHistory);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetDogAccessHistory_(struct soap *soap, const char *tag, int id, const struct __ns1__GetDogAccessHistory_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetDogAccessHistory(soap, "ns1:GetDogAccessHistory", -1, &a->ns1__GetDogAccessHistory, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetDogAccessHistory_ * SOAP_FMAC4 soap_in___ns1__GetDogAccessHistory_(struct soap *soap, const char *tag, struct __ns1__GetDogAccessHistory_ *a, const char *type)
{
	size_t soap_flag_ns1__GetDogAccessHistory = 1;
	short soap_flag;
	a = (struct __ns1__GetDogAccessHistory_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetDogAccessHistory_, sizeof(struct __ns1__GetDogAccessHistory_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetDogAccessHistory_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetDogAccessHistory && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetDogAccessHistory(soap, "ns1:GetDogAccessHistory", &a->ns1__GetDogAccessHistory, ""))
				{	soap_flag_ns1__GetDogAccessHistory--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetDogAccessHistory_(struct soap *soap, const struct __ns1__GetDogAccessHistory_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetDogAccessHistory_(soap, tag?tag:"-ns1:GetDogAccessHistory", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetDogAccessHistory_ * SOAP_FMAC4 soap_get___ns1__GetDogAccessHistory_(struct soap *soap, struct __ns1__GetDogAccessHistory_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetDogAccessHistory_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetDogAccessHistory_ * SOAP_FMAC2 soap_instantiate___ns1__GetDogAccessHistory_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetDogAccessHistory_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetDogAccessHistory_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetDogAccessHistory_);
		if (size)
			*size = sizeof(struct __ns1__GetDogAccessHistory_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetDogAccessHistory_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetDogAccessHistory_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetDogAccessHistory_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetDogAccessHistory_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetDogAccessHistory_ %p -> %p\n", q, p));
	*(struct __ns1__GetDogAccessHistory_*)p = *(struct __ns1__GetDogAccessHistory_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVersionReleaseNotes_(struct soap *soap, struct __ns1__GetVersionReleaseNotes_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetVersionReleaseNotes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVersionReleaseNotes_(struct soap *soap, const struct __ns1__GetVersionReleaseNotes_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetVersionReleaseNotes(soap, &a->ns1__GetVersionReleaseNotes);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVersionReleaseNotes_(struct soap *soap, const char *tag, int id, const struct __ns1__GetVersionReleaseNotes_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetVersionReleaseNotes(soap, "ns1:GetVersionReleaseNotes", -1, &a->ns1__GetVersionReleaseNotes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVersionReleaseNotes_ * SOAP_FMAC4 soap_in___ns1__GetVersionReleaseNotes_(struct soap *soap, const char *tag, struct __ns1__GetVersionReleaseNotes_ *a, const char *type)
{
	size_t soap_flag_ns1__GetVersionReleaseNotes = 1;
	short soap_flag;
	a = (struct __ns1__GetVersionReleaseNotes_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetVersionReleaseNotes_, sizeof(struct __ns1__GetVersionReleaseNotes_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetVersionReleaseNotes_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetVersionReleaseNotes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetVersionReleaseNotes(soap, "ns1:GetVersionReleaseNotes", &a->ns1__GetVersionReleaseNotes, ""))
				{	soap_flag_ns1__GetVersionReleaseNotes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVersionReleaseNotes_(struct soap *soap, const struct __ns1__GetVersionReleaseNotes_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetVersionReleaseNotes_(soap, tag?tag:"-ns1:GetVersionReleaseNotes", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVersionReleaseNotes_ * SOAP_FMAC4 soap_get___ns1__GetVersionReleaseNotes_(struct soap *soap, struct __ns1__GetVersionReleaseNotes_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetVersionReleaseNotes_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetVersionReleaseNotes_ * SOAP_FMAC2 soap_instantiate___ns1__GetVersionReleaseNotes_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetVersionReleaseNotes_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetVersionReleaseNotes_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetVersionReleaseNotes_);
		if (size)
			*size = sizeof(struct __ns1__GetVersionReleaseNotes_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetVersionReleaseNotes_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetVersionReleaseNotes_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetVersionReleaseNotes_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVersionReleaseNotes_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetVersionReleaseNotes_ %p -> %p\n", q, p));
	*(struct __ns1__GetVersionReleaseNotes_*)p = *(struct __ns1__GetVersionReleaseNotes_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CompareVersion_(struct soap *soap, struct __ns1__CompareVersion_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CompareVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CompareVersion_(struct soap *soap, const struct __ns1__CompareVersion_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CompareVersion(soap, &a->ns1__CompareVersion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CompareVersion_(struct soap *soap, const char *tag, int id, const struct __ns1__CompareVersion_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__CompareVersion(soap, "ns1:CompareVersion", -1, &a->ns1__CompareVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CompareVersion_ * SOAP_FMAC4 soap_in___ns1__CompareVersion_(struct soap *soap, const char *tag, struct __ns1__CompareVersion_ *a, const char *type)
{
	size_t soap_flag_ns1__CompareVersion = 1;
	short soap_flag;
	a = (struct __ns1__CompareVersion_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CompareVersion_, sizeof(struct __ns1__CompareVersion_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CompareVersion_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CompareVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CompareVersion(soap, "ns1:CompareVersion", &a->ns1__CompareVersion, ""))
				{	soap_flag_ns1__CompareVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CompareVersion_(struct soap *soap, const struct __ns1__CompareVersion_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CompareVersion_(soap, tag?tag:"-ns1:CompareVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CompareVersion_ * SOAP_FMAC4 soap_get___ns1__CompareVersion_(struct soap *soap, struct __ns1__CompareVersion_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CompareVersion_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CompareVersion_ * SOAP_FMAC2 soap_instantiate___ns1__CompareVersion_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CompareVersion_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CompareVersion_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CompareVersion_);
		if (size)
			*size = sizeof(struct __ns1__CompareVersion_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CompareVersion_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CompareVersion_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CompareVersion_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CompareVersion_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CompareVersion_ %p -> %p\n", q, p));
	*(struct __ns1__CompareVersion_*)p = *(struct __ns1__CompareVersion_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetRevisionReadFlag_(struct soap *soap, struct __ns1__SetRevisionReadFlag_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetRevisionReadFlag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetRevisionReadFlag_(struct soap *soap, const struct __ns1__SetRevisionReadFlag_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetRevisionReadFlag(soap, &a->ns1__SetRevisionReadFlag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetRevisionReadFlag_(struct soap *soap, const char *tag, int id, const struct __ns1__SetRevisionReadFlag_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetRevisionReadFlag(soap, "ns1:SetRevisionReadFlag", -1, &a->ns1__SetRevisionReadFlag, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRevisionReadFlag_ * SOAP_FMAC4 soap_in___ns1__SetRevisionReadFlag_(struct soap *soap, const char *tag, struct __ns1__SetRevisionReadFlag_ *a, const char *type)
{
	size_t soap_flag_ns1__SetRevisionReadFlag = 1;
	short soap_flag;
	a = (struct __ns1__SetRevisionReadFlag_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetRevisionReadFlag_, sizeof(struct __ns1__SetRevisionReadFlag_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetRevisionReadFlag_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetRevisionReadFlag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetRevisionReadFlag(soap, "ns1:SetRevisionReadFlag", &a->ns1__SetRevisionReadFlag, ""))
				{	soap_flag_ns1__SetRevisionReadFlag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetRevisionReadFlag_(struct soap *soap, const struct __ns1__SetRevisionReadFlag_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetRevisionReadFlag_(soap, tag?tag:"-ns1:SetRevisionReadFlag", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRevisionReadFlag_ * SOAP_FMAC4 soap_get___ns1__SetRevisionReadFlag_(struct soap *soap, struct __ns1__SetRevisionReadFlag_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetRevisionReadFlag_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetRevisionReadFlag_ * SOAP_FMAC2 soap_instantiate___ns1__SetRevisionReadFlag_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetRevisionReadFlag_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetRevisionReadFlag_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRevisionReadFlag_);
		if (size)
			*size = sizeof(struct __ns1__SetRevisionReadFlag_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__SetRevisionReadFlag_, n);
		if (size)
			*size = n * sizeof(struct __ns1__SetRevisionReadFlag_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SetRevisionReadFlag_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetRevisionReadFlag_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetRevisionReadFlag_ %p -> %p\n", q, p));
	*(struct __ns1__SetRevisionReadFlag_*)p = *(struct __ns1__SetRevisionReadFlag_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUpdateVerByCurVer_(struct soap *soap, struct __ns1__GetUpdateVerByCurVer_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetUpdateVerByCurVer = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUpdateVerByCurVer_(struct soap *soap, const struct __ns1__GetUpdateVerByCurVer_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetUpdateVerByCurVer(soap, &a->ns1__GetUpdateVerByCurVer);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUpdateVerByCurVer_(struct soap *soap, const char *tag, int id, const struct __ns1__GetUpdateVerByCurVer_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetUpdateVerByCurVer(soap, "ns1:GetUpdateVerByCurVer", -1, &a->ns1__GetUpdateVerByCurVer, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetUpdateVerByCurVer_ * SOAP_FMAC4 soap_in___ns1__GetUpdateVerByCurVer_(struct soap *soap, const char *tag, struct __ns1__GetUpdateVerByCurVer_ *a, const char *type)
{
	size_t soap_flag_ns1__GetUpdateVerByCurVer = 1;
	short soap_flag;
	a = (struct __ns1__GetUpdateVerByCurVer_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetUpdateVerByCurVer_, sizeof(struct __ns1__GetUpdateVerByCurVer_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetUpdateVerByCurVer_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetUpdateVerByCurVer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetUpdateVerByCurVer(soap, "ns1:GetUpdateVerByCurVer", &a->ns1__GetUpdateVerByCurVer, ""))
				{	soap_flag_ns1__GetUpdateVerByCurVer--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUpdateVerByCurVer_(struct soap *soap, const struct __ns1__GetUpdateVerByCurVer_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetUpdateVerByCurVer_(soap, tag?tag:"-ns1:GetUpdateVerByCurVer", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetUpdateVerByCurVer_ * SOAP_FMAC4 soap_get___ns1__GetUpdateVerByCurVer_(struct soap *soap, struct __ns1__GetUpdateVerByCurVer_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetUpdateVerByCurVer_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetUpdateVerByCurVer_ * SOAP_FMAC2 soap_instantiate___ns1__GetUpdateVerByCurVer_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetUpdateVerByCurVer_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetUpdateVerByCurVer_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetUpdateVerByCurVer_);
		if (size)
			*size = sizeof(struct __ns1__GetUpdateVerByCurVer_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetUpdateVerByCurVer_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetUpdateVerByCurVer_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetUpdateVerByCurVer_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetUpdateVerByCurVer_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetUpdateVerByCurVer_ %p -> %p\n", q, p));
	*(struct __ns1__GetUpdateVerByCurVer_*)p = *(struct __ns1__GetUpdateVerByCurVer_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginByByteArr_(struct soap *soap, struct __ns1__LoginByByteArr_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LoginByByteArr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginByByteArr_(struct soap *soap, const struct __ns1__LoginByByteArr_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LoginByByteArr(soap, &a->ns1__LoginByByteArr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginByByteArr_(struct soap *soap, const char *tag, int id, const struct __ns1__LoginByByteArr_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LoginByByteArr(soap, "ns1:LoginByByteArr", -1, &a->ns1__LoginByByteArr, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__LoginByByteArr_ * SOAP_FMAC4 soap_in___ns1__LoginByByteArr_(struct soap *soap, const char *tag, struct __ns1__LoginByByteArr_ *a, const char *type)
{
	size_t soap_flag_ns1__LoginByByteArr = 1;
	short soap_flag;
	a = (struct __ns1__LoginByByteArr_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__LoginByByteArr_, sizeof(struct __ns1__LoginByByteArr_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__LoginByByteArr_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LoginByByteArr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LoginByByteArr(soap, "ns1:LoginByByteArr", &a->ns1__LoginByByteArr, ""))
				{	soap_flag_ns1__LoginByByteArr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginByByteArr_(struct soap *soap, const struct __ns1__LoginByByteArr_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__LoginByByteArr_(soap, tag?tag:"-ns1:LoginByByteArr", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__LoginByByteArr_ * SOAP_FMAC4 soap_get___ns1__LoginByByteArr_(struct soap *soap, struct __ns1__LoginByByteArr_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__LoginByByteArr_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__LoginByByteArr_ * SOAP_FMAC2 soap_instantiate___ns1__LoginByByteArr_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__LoginByByteArr_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__LoginByByteArr_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__LoginByByteArr_);
		if (size)
			*size = sizeof(struct __ns1__LoginByByteArr_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__LoginByByteArr_, n);
		if (size)
			*size = n * sizeof(struct __ns1__LoginByByteArr_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__LoginByByteArr_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__LoginByByteArr_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__LoginByByteArr_ %p -> %p\n", q, p));
	*(struct __ns1__LoginByByteArr_*)p = *(struct __ns1__LoginByByteArr_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login_(struct soap *soap, struct __ns1__Login_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login_(struct soap *soap, const struct __ns1__Login_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Login(soap, &a->ns1__Login);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login_(struct soap *soap, const char *tag, int id, const struct __ns1__Login_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Login(soap, "ns1:Login", -1, &a->ns1__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login_ * SOAP_FMAC4 soap_in___ns1__Login_(struct soap *soap, const char *tag, struct __ns1__Login_ *a, const char *type)
{
	size_t soap_flag_ns1__Login = 1;
	short soap_flag;
	a = (struct __ns1__Login_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Login_, sizeof(struct __ns1__Login_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Login_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Login(soap, "ns1:Login", &a->ns1__Login, ""))
				{	soap_flag_ns1__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login_(struct soap *soap, const struct __ns1__Login_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Login_(soap, tag?tag:"-ns1:Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login_ * SOAP_FMAC4 soap_get___ns1__Login_(struct soap *soap, struct __ns1__Login_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Login_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Login_ * SOAP_FMAC2 soap_instantiate___ns1__Login_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Login_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Login_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Login_);
		if (size)
			*size = sizeof(struct __ns1__Login_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Login_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Login_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Login_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Login_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Login_ %p -> %p\n", q, p));
	*(struct __ns1__Login_*)p = *(struct __ns1__Login_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveOrUpdateObjects(struct soap *soap, struct __ns1__SaveOrUpdateObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SaveOrUpdateObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveOrUpdateObjects(struct soap *soap, const struct __ns1__SaveOrUpdateObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SaveOrUpdateObjects(soap, &a->ns1__SaveOrUpdateObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, const struct __ns1__SaveOrUpdateObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SaveOrUpdateObjects(soap, "ns1:SaveOrUpdateObjects", -1, &a->ns1__SaveOrUpdateObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveOrUpdateObjects * SOAP_FMAC4 soap_in___ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, struct __ns1__SaveOrUpdateObjects *a, const char *type)
{
	size_t soap_flag_ns1__SaveOrUpdateObjects = 1;
	short soap_flag;
	a = (struct __ns1__SaveOrUpdateObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SaveOrUpdateObjects, sizeof(struct __ns1__SaveOrUpdateObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SaveOrUpdateObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SaveOrUpdateObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SaveOrUpdateObjects(soap, "ns1:SaveOrUpdateObjects", &a->ns1__SaveOrUpdateObjects, ""))
				{	soap_flag_ns1__SaveOrUpdateObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveOrUpdateObjects(struct soap *soap, const struct __ns1__SaveOrUpdateObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SaveOrUpdateObjects(soap, tag?tag:"-ns1:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveOrUpdateObjects * SOAP_FMAC4 soap_get___ns1__SaveOrUpdateObjects(struct soap *soap, struct __ns1__SaveOrUpdateObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SaveOrUpdateObjects * SOAP_FMAC2 soap_instantiate___ns1__SaveOrUpdateObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SaveOrUpdateObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SaveOrUpdateObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SaveOrUpdateObjects);
		if (size)
			*size = sizeof(struct __ns1__SaveOrUpdateObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__SaveOrUpdateObjects, n);
		if (size)
			*size = n * sizeof(struct __ns1__SaveOrUpdateObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SaveOrUpdateObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SaveOrUpdateObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SaveOrUpdateObjects %p -> %p\n", q, p));
	*(struct __ns1__SaveOrUpdateObjects*)p = *(struct __ns1__SaveOrUpdateObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownloadObjects(struct soap *soap, struct __ns1__DownloadObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownloadObjects(struct soap *soap, const struct __ns1__DownloadObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadObjects(soap, &a->ns1__DownloadObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownloadObjects(struct soap *soap, const char *tag, int id, const struct __ns1__DownloadObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DownloadObjects(soap, "ns1:DownloadObjects", -1, &a->ns1__DownloadObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadObjects * SOAP_FMAC4 soap_in___ns1__DownloadObjects(struct soap *soap, const char *tag, struct __ns1__DownloadObjects *a, const char *type)
{
	size_t soap_flag_ns1__DownloadObjects = 1;
	short soap_flag;
	a = (struct __ns1__DownloadObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DownloadObjects, sizeof(struct __ns1__DownloadObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DownloadObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadObjects(soap, "ns1:DownloadObjects", &a->ns1__DownloadObjects, ""))
				{	soap_flag_ns1__DownloadObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownloadObjects(struct soap *soap, const struct __ns1__DownloadObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DownloadObjects(soap, tag?tag:"-ns1:DownloadObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DownloadObjects * SOAP_FMAC4 soap_get___ns1__DownloadObjects(struct soap *soap, struct __ns1__DownloadObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DownloadObjects * SOAP_FMAC2 soap_instantiate___ns1__DownloadObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DownloadObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DownloadObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DownloadObjects);
		if (size)
			*size = sizeof(struct __ns1__DownloadObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__DownloadObjects, n);
		if (size)
			*size = n * sizeof(struct __ns1__DownloadObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__DownloadObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DownloadObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DownloadObjects %p -> %p\n", q, p));
	*(struct __ns1__DownloadObjects*)p = *(struct __ns1__DownloadObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryObjects(struct soap *soap, struct __ns1__QueryObjects *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__QueryObjects = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryObjects(struct soap *soap, const struct __ns1__QueryObjects *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__QueryObjects(soap, &a->ns1__QueryObjects);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryObjects(struct soap *soap, const char *tag, int id, const struct __ns1__QueryObjects *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__QueryObjects(soap, "ns1:QueryObjects", -1, &a->ns1__QueryObjects, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryObjects * SOAP_FMAC4 soap_in___ns1__QueryObjects(struct soap *soap, const char *tag, struct __ns1__QueryObjects *a, const char *type)
{
	size_t soap_flag_ns1__QueryObjects = 1;
	short soap_flag;
	a = (struct __ns1__QueryObjects *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__QueryObjects, sizeof(struct __ns1__QueryObjects), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__QueryObjects(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__QueryObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__QueryObjects(soap, "ns1:QueryObjects", &a->ns1__QueryObjects, ""))
				{	soap_flag_ns1__QueryObjects--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryObjects(struct soap *soap, const struct __ns1__QueryObjects *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__QueryObjects(soap, tag?tag:"-ns1:QueryObjects", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryObjects * SOAP_FMAC4 soap_get___ns1__QueryObjects(struct soap *soap, struct __ns1__QueryObjects *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__QueryObjects * SOAP_FMAC2 soap_instantiate___ns1__QueryObjects(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__QueryObjects(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__QueryObjects, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__QueryObjects);
		if (size)
			*size = sizeof(struct __ns1__QueryObjects);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__QueryObjects, n);
		if (size)
			*size = n * sizeof(struct __ns1__QueryObjects);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__QueryObjects*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__QueryObjects(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__QueryObjects %p -> %p\n", q, p));
	*(struct __ns1__QueryObjects*)p = *(struct __ns1__QueryObjects*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFileHeader(struct soap *soap, struct __ns1__GetFileHeader *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetFileHeader = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFileHeader(struct soap *soap, const struct __ns1__GetFileHeader *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetFileHeader(soap, &a->ns1__GetFileHeader);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFileHeader(struct soap *soap, const char *tag, int id, const struct __ns1__GetFileHeader *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetFileHeader(soap, "ns1:GetFileHeader", -1, &a->ns1__GetFileHeader, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetFileHeader * SOAP_FMAC4 soap_in___ns1__GetFileHeader(struct soap *soap, const char *tag, struct __ns1__GetFileHeader *a, const char *type)
{
	size_t soap_flag_ns1__GetFileHeader = 1;
	short soap_flag;
	a = (struct __ns1__GetFileHeader *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetFileHeader, sizeof(struct __ns1__GetFileHeader), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetFileHeader(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetFileHeader && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetFileHeader(soap, "ns1:GetFileHeader", &a->ns1__GetFileHeader, ""))
				{	soap_flag_ns1__GetFileHeader--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFileHeader(struct soap *soap, const struct __ns1__GetFileHeader *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetFileHeader(soap, tag?tag:"-ns1:GetFileHeader", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetFileHeader * SOAP_FMAC4 soap_get___ns1__GetFileHeader(struct soap *soap, struct __ns1__GetFileHeader *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetFileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetFileHeader * SOAP_FMAC2 soap_instantiate___ns1__GetFileHeader(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetFileHeader(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetFileHeader, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetFileHeader);
		if (size)
			*size = sizeof(struct __ns1__GetFileHeader);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetFileHeader, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetFileHeader);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetFileHeader*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetFileHeader(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetFileHeader %p -> %p\n", q, p));
	*(struct __ns1__GetFileHeader*)p = *(struct __ns1__GetFileHeader*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryDownLoadItemArrByProductId(struct soap *soap, struct __ns1__QueryDownLoadItemArrByProductId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__QueryDownLoadItemArrByProductId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryDownLoadItemArrByProductId(struct soap *soap, const struct __ns1__QueryDownLoadItemArrByProductId *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, &a->ns1__QueryDownLoadItemArrByProductId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, int id, const struct __ns1__QueryDownLoadItemArrByProductId *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, "ns1:QueryDownLoadItemArrByProductId", -1, &a->ns1__QueryDownLoadItemArrByProductId, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_in___ns1__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, struct __ns1__QueryDownLoadItemArrByProductId *a, const char *type)
{
	size_t soap_flag_ns1__QueryDownLoadItemArrByProductId = 1;
	short soap_flag;
	a = (struct __ns1__QueryDownLoadItemArrByProductId *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId, sizeof(struct __ns1__QueryDownLoadItemArrByProductId), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__QueryDownLoadItemArrByProductId(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__QueryDownLoadItemArrByProductId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, "ns1:QueryDownLoadItemArrByProductId", &a->ns1__QueryDownLoadItemArrByProductId, ""))
				{	soap_flag_ns1__QueryDownLoadItemArrByProductId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryDownLoadItemArrByProductId(struct soap *soap, const struct __ns1__QueryDownLoadItemArrByProductId *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__QueryDownLoadItemArrByProductId(soap, tag?tag:"-ns1:QueryDownLoadItemArrByProductId", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__QueryDownLoadItemArrByProductId * SOAP_FMAC4 soap_get___ns1__QueryDownLoadItemArrByProductId(struct soap *soap, struct __ns1__QueryDownLoadItemArrByProductId *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__QueryDownLoadItemArrByProductId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__QueryDownLoadItemArrByProductId * SOAP_FMAC2 soap_instantiate___ns1__QueryDownLoadItemArrByProductId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__QueryDownLoadItemArrByProductId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__QueryDownLoadItemArrByProductId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__QueryDownLoadItemArrByProductId);
		if (size)
			*size = sizeof(struct __ns1__QueryDownLoadItemArrByProductId);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__QueryDownLoadItemArrByProductId, n);
		if (size)
			*size = n * sizeof(struct __ns1__QueryDownLoadItemArrByProductId);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__QueryDownLoadItemArrByProductId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__QueryDownLoadItemArrByProductId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__QueryDownLoadItemArrByProductId %p -> %p\n", q, p));
	*(struct __ns1__QueryDownLoadItemArrByProductId*)p = *(struct __ns1__QueryDownLoadItemArrByProductId*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetDogAccessHistory(struct soap *soap, struct __ns1__GetDogAccessHistory *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetDogAccessHistory = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetDogAccessHistory(struct soap *soap, const struct __ns1__GetDogAccessHistory *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetDogAccessHistory(soap, &a->ns1__GetDogAccessHistory);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetDogAccessHistory(struct soap *soap, const char *tag, int id, const struct __ns1__GetDogAccessHistory *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetDogAccessHistory(soap, "ns1:GetDogAccessHistory", -1, &a->ns1__GetDogAccessHistory, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetDogAccessHistory * SOAP_FMAC4 soap_in___ns1__GetDogAccessHistory(struct soap *soap, const char *tag, struct __ns1__GetDogAccessHistory *a, const char *type)
{
	size_t soap_flag_ns1__GetDogAccessHistory = 1;
	short soap_flag;
	a = (struct __ns1__GetDogAccessHistory *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetDogAccessHistory, sizeof(struct __ns1__GetDogAccessHistory), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetDogAccessHistory(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetDogAccessHistory && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetDogAccessHistory(soap, "ns1:GetDogAccessHistory", &a->ns1__GetDogAccessHistory, ""))
				{	soap_flag_ns1__GetDogAccessHistory--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetDogAccessHistory(struct soap *soap, const struct __ns1__GetDogAccessHistory *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetDogAccessHistory(soap, tag?tag:"-ns1:GetDogAccessHistory", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetDogAccessHistory * SOAP_FMAC4 soap_get___ns1__GetDogAccessHistory(struct soap *soap, struct __ns1__GetDogAccessHistory *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetDogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetDogAccessHistory * SOAP_FMAC2 soap_instantiate___ns1__GetDogAccessHistory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetDogAccessHistory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetDogAccessHistory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetDogAccessHistory);
		if (size)
			*size = sizeof(struct __ns1__GetDogAccessHistory);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetDogAccessHistory, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetDogAccessHistory);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetDogAccessHistory*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetDogAccessHistory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetDogAccessHistory %p -> %p\n", q, p));
	*(struct __ns1__GetDogAccessHistory*)p = *(struct __ns1__GetDogAccessHistory*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVersionReleaseNotes(struct soap *soap, struct __ns1__GetVersionReleaseNotes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetVersionReleaseNotes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVersionReleaseNotes(struct soap *soap, const struct __ns1__GetVersionReleaseNotes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetVersionReleaseNotes(soap, &a->ns1__GetVersionReleaseNotes);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVersionReleaseNotes(struct soap *soap, const char *tag, int id, const struct __ns1__GetVersionReleaseNotes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetVersionReleaseNotes(soap, "ns1:GetVersionReleaseNotes", -1, &a->ns1__GetVersionReleaseNotes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVersionReleaseNotes * SOAP_FMAC4 soap_in___ns1__GetVersionReleaseNotes(struct soap *soap, const char *tag, struct __ns1__GetVersionReleaseNotes *a, const char *type)
{
	size_t soap_flag_ns1__GetVersionReleaseNotes = 1;
	short soap_flag;
	a = (struct __ns1__GetVersionReleaseNotes *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetVersionReleaseNotes, sizeof(struct __ns1__GetVersionReleaseNotes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetVersionReleaseNotes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetVersionReleaseNotes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetVersionReleaseNotes(soap, "ns1:GetVersionReleaseNotes", &a->ns1__GetVersionReleaseNotes, ""))
				{	soap_flag_ns1__GetVersionReleaseNotes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVersionReleaseNotes(struct soap *soap, const struct __ns1__GetVersionReleaseNotes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetVersionReleaseNotes(soap, tag?tag:"-ns1:GetVersionReleaseNotes", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVersionReleaseNotes * SOAP_FMAC4 soap_get___ns1__GetVersionReleaseNotes(struct soap *soap, struct __ns1__GetVersionReleaseNotes *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetVersionReleaseNotes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetVersionReleaseNotes * SOAP_FMAC2 soap_instantiate___ns1__GetVersionReleaseNotes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetVersionReleaseNotes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetVersionReleaseNotes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetVersionReleaseNotes);
		if (size)
			*size = sizeof(struct __ns1__GetVersionReleaseNotes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetVersionReleaseNotes, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetVersionReleaseNotes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetVersionReleaseNotes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVersionReleaseNotes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetVersionReleaseNotes %p -> %p\n", q, p));
	*(struct __ns1__GetVersionReleaseNotes*)p = *(struct __ns1__GetVersionReleaseNotes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CompareVersion(struct soap *soap, struct __ns1__CompareVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CompareVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CompareVersion(struct soap *soap, const struct __ns1__CompareVersion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CompareVersion(soap, &a->ns1__CompareVersion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CompareVersion(struct soap *soap, const char *tag, int id, const struct __ns1__CompareVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__CompareVersion(soap, "ns1:CompareVersion", -1, &a->ns1__CompareVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CompareVersion * SOAP_FMAC4 soap_in___ns1__CompareVersion(struct soap *soap, const char *tag, struct __ns1__CompareVersion *a, const char *type)
{
	size_t soap_flag_ns1__CompareVersion = 1;
	short soap_flag;
	a = (struct __ns1__CompareVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CompareVersion, sizeof(struct __ns1__CompareVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CompareVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CompareVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CompareVersion(soap, "ns1:CompareVersion", &a->ns1__CompareVersion, ""))
				{	soap_flag_ns1__CompareVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CompareVersion(struct soap *soap, const struct __ns1__CompareVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CompareVersion(soap, tag?tag:"-ns1:CompareVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CompareVersion * SOAP_FMAC4 soap_get___ns1__CompareVersion(struct soap *soap, struct __ns1__CompareVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CompareVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CompareVersion * SOAP_FMAC2 soap_instantiate___ns1__CompareVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CompareVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CompareVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CompareVersion);
		if (size)
			*size = sizeof(struct __ns1__CompareVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CompareVersion, n);
		if (size)
			*size = n * sizeof(struct __ns1__CompareVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CompareVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CompareVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CompareVersion %p -> %p\n", q, p));
	*(struct __ns1__CompareVersion*)p = *(struct __ns1__CompareVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetRevisionReadFlag(struct soap *soap, struct __ns1__SetRevisionReadFlag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetRevisionReadFlag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetRevisionReadFlag(struct soap *soap, const struct __ns1__SetRevisionReadFlag *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetRevisionReadFlag(soap, &a->ns1__SetRevisionReadFlag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetRevisionReadFlag(struct soap *soap, const char *tag, int id, const struct __ns1__SetRevisionReadFlag *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetRevisionReadFlag(soap, "ns1:SetRevisionReadFlag", -1, &a->ns1__SetRevisionReadFlag, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRevisionReadFlag * SOAP_FMAC4 soap_in___ns1__SetRevisionReadFlag(struct soap *soap, const char *tag, struct __ns1__SetRevisionReadFlag *a, const char *type)
{
	size_t soap_flag_ns1__SetRevisionReadFlag = 1;
	short soap_flag;
	a = (struct __ns1__SetRevisionReadFlag *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetRevisionReadFlag, sizeof(struct __ns1__SetRevisionReadFlag), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetRevisionReadFlag(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetRevisionReadFlag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetRevisionReadFlag(soap, "ns1:SetRevisionReadFlag", &a->ns1__SetRevisionReadFlag, ""))
				{	soap_flag_ns1__SetRevisionReadFlag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetRevisionReadFlag(struct soap *soap, const struct __ns1__SetRevisionReadFlag *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetRevisionReadFlag(soap, tag?tag:"-ns1:SetRevisionReadFlag", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRevisionReadFlag * SOAP_FMAC4 soap_get___ns1__SetRevisionReadFlag(struct soap *soap, struct __ns1__SetRevisionReadFlag *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetRevisionReadFlag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetRevisionReadFlag * SOAP_FMAC2 soap_instantiate___ns1__SetRevisionReadFlag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetRevisionReadFlag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetRevisionReadFlag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRevisionReadFlag);
		if (size)
			*size = sizeof(struct __ns1__SetRevisionReadFlag);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__SetRevisionReadFlag, n);
		if (size)
			*size = n * sizeof(struct __ns1__SetRevisionReadFlag);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SetRevisionReadFlag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetRevisionReadFlag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetRevisionReadFlag %p -> %p\n", q, p));
	*(struct __ns1__SetRevisionReadFlag*)p = *(struct __ns1__SetRevisionReadFlag*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUpdateVerByCurVer(struct soap *soap, struct __ns1__GetUpdateVerByCurVer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetUpdateVerByCurVer = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUpdateVerByCurVer(struct soap *soap, const struct __ns1__GetUpdateVerByCurVer *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetUpdateVerByCurVer(soap, &a->ns1__GetUpdateVerByCurVer);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUpdateVerByCurVer(struct soap *soap, const char *tag, int id, const struct __ns1__GetUpdateVerByCurVer *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetUpdateVerByCurVer(soap, "ns1:GetUpdateVerByCurVer", -1, &a->ns1__GetUpdateVerByCurVer, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetUpdateVerByCurVer * SOAP_FMAC4 soap_in___ns1__GetUpdateVerByCurVer(struct soap *soap, const char *tag, struct __ns1__GetUpdateVerByCurVer *a, const char *type)
{
	size_t soap_flag_ns1__GetUpdateVerByCurVer = 1;
	short soap_flag;
	a = (struct __ns1__GetUpdateVerByCurVer *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetUpdateVerByCurVer, sizeof(struct __ns1__GetUpdateVerByCurVer), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetUpdateVerByCurVer(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetUpdateVerByCurVer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetUpdateVerByCurVer(soap, "ns1:GetUpdateVerByCurVer", &a->ns1__GetUpdateVerByCurVer, ""))
				{	soap_flag_ns1__GetUpdateVerByCurVer--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUpdateVerByCurVer(struct soap *soap, const struct __ns1__GetUpdateVerByCurVer *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetUpdateVerByCurVer(soap, tag?tag:"-ns1:GetUpdateVerByCurVer", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetUpdateVerByCurVer * SOAP_FMAC4 soap_get___ns1__GetUpdateVerByCurVer(struct soap *soap, struct __ns1__GetUpdateVerByCurVer *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetUpdateVerByCurVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetUpdateVerByCurVer * SOAP_FMAC2 soap_instantiate___ns1__GetUpdateVerByCurVer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetUpdateVerByCurVer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetUpdateVerByCurVer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetUpdateVerByCurVer);
		if (size)
			*size = sizeof(struct __ns1__GetUpdateVerByCurVer);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetUpdateVerByCurVer, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetUpdateVerByCurVer);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetUpdateVerByCurVer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetUpdateVerByCurVer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetUpdateVerByCurVer %p -> %p\n", q, p));
	*(struct __ns1__GetUpdateVerByCurVer*)p = *(struct __ns1__GetUpdateVerByCurVer*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginByByteArr(struct soap *soap, struct __ns1__LoginByByteArr *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LoginByByteArr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginByByteArr(struct soap *soap, const struct __ns1__LoginByByteArr *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LoginByByteArr(soap, &a->ns1__LoginByByteArr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginByByteArr(struct soap *soap, const char *tag, int id, const struct __ns1__LoginByByteArr *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LoginByByteArr(soap, "ns1:LoginByByteArr", -1, &a->ns1__LoginByByteArr, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__LoginByByteArr * SOAP_FMAC4 soap_in___ns1__LoginByByteArr(struct soap *soap, const char *tag, struct __ns1__LoginByByteArr *a, const char *type)
{
	size_t soap_flag_ns1__LoginByByteArr = 1;
	short soap_flag;
	a = (struct __ns1__LoginByByteArr *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__LoginByByteArr, sizeof(struct __ns1__LoginByByteArr), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__LoginByByteArr(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LoginByByteArr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LoginByByteArr(soap, "ns1:LoginByByteArr", &a->ns1__LoginByByteArr, ""))
				{	soap_flag_ns1__LoginByByteArr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginByByteArr(struct soap *soap, const struct __ns1__LoginByByteArr *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__LoginByByteArr(soap, tag?tag:"-ns1:LoginByByteArr", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__LoginByByteArr * SOAP_FMAC4 soap_get___ns1__LoginByByteArr(struct soap *soap, struct __ns1__LoginByByteArr *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__LoginByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__LoginByByteArr * SOAP_FMAC2 soap_instantiate___ns1__LoginByByteArr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__LoginByByteArr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__LoginByByteArr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__LoginByByteArr);
		if (size)
			*size = sizeof(struct __ns1__LoginByByteArr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__LoginByByteArr, n);
		if (size)
			*size = n * sizeof(struct __ns1__LoginByByteArr);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__LoginByByteArr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__LoginByByteArr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__LoginByByteArr %p -> %p\n", q, p));
	*(struct __ns1__LoginByByteArr*)p = *(struct __ns1__LoginByByteArr*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login(struct soap *soap, struct __ns1__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login(struct soap *soap, const struct __ns1__Login *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Login(soap, &a->ns1__Login);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login(struct soap *soap, const char *tag, int id, const struct __ns1__Login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Login(soap, "ns1:Login", -1, &a->ns1__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_in___ns1__Login(struct soap *soap, const char *tag, struct __ns1__Login *a, const char *type)
{
	size_t soap_flag_ns1__Login = 1;
	short soap_flag;
	a = (struct __ns1__Login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Login, sizeof(struct __ns1__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Login(soap, "ns1:Login", &a->ns1__Login, ""))
				{	soap_flag_ns1__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login(struct soap *soap, const struct __ns1__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Login(soap, tag?tag:"-ns1:Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_get___ns1__Login(struct soap *soap, struct __ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Login * SOAP_FMAC2 soap_instantiate___ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Login);
		if (size)
			*size = sizeof(struct __ns1__Login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Login, n);
		if (size)
			*size = n * sizeof(struct __ns1__Login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Login %p -> %p\n", q, p));
	*(struct __ns1__Login*)p = *(struct __ns1__Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, _ns1__SaveOrUpdateObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SaveOrUpdateObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, int id, _ns1__SaveOrUpdateObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SaveOrUpdateObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjects ** SOAP_FMAC4 soap_in_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, const char *tag, _ns1__SaveOrUpdateObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SaveOrUpdateObjects **)soap_malloc(soap, sizeof(_ns1__SaveOrUpdateObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SaveOrUpdateObjects *)soap_instantiate__ns1__SaveOrUpdateObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SaveOrUpdateObjects ** p = (_ns1__SaveOrUpdateObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SaveOrUpdateObjects, sizeof(_ns1__SaveOrUpdateObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, _ns1__SaveOrUpdateObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SaveOrUpdateObjects);
	if (soap_out_PointerTo_ns1__SaveOrUpdateObjects(soap, tag?tag:"ns1:SaveOrUpdateObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SaveOrUpdateObjects ** SOAP_FMAC4 soap_get_PointerTo_ns1__SaveOrUpdateObjects(struct soap *soap, _ns1__SaveOrUpdateObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SaveOrUpdateObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DownloadObjects(struct soap *soap, _ns1__DownloadObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DownloadObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DownloadObjects(struct soap *soap, const char *tag, int id, _ns1__DownloadObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DownloadObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DownloadObjects ** SOAP_FMAC4 soap_in_PointerTo_ns1__DownloadObjects(struct soap *soap, const char *tag, _ns1__DownloadObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DownloadObjects **)soap_malloc(soap, sizeof(_ns1__DownloadObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DownloadObjects *)soap_instantiate__ns1__DownloadObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DownloadObjects ** p = (_ns1__DownloadObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DownloadObjects, sizeof(_ns1__DownloadObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DownloadObjects(struct soap *soap, _ns1__DownloadObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DownloadObjects);
	if (soap_out_PointerTo_ns1__DownloadObjects(soap, tag?tag:"ns1:DownloadObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DownloadObjects ** SOAP_FMAC4 soap_get_PointerTo_ns1__DownloadObjects(struct soap *soap, _ns1__DownloadObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DownloadObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QueryObjects(struct soap *soap, _ns1__QueryObjects *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__QueryObjects))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QueryObjects(struct soap *soap, const char *tag, int id, _ns1__QueryObjects *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__QueryObjects);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__QueryObjects ** SOAP_FMAC4 soap_in_PointerTo_ns1__QueryObjects(struct soap *soap, const char *tag, _ns1__QueryObjects **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__QueryObjects **)soap_malloc(soap, sizeof(_ns1__QueryObjects *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__QueryObjects *)soap_instantiate__ns1__QueryObjects(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__QueryObjects ** p = (_ns1__QueryObjects **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__QueryObjects, sizeof(_ns1__QueryObjects), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QueryObjects(struct soap *soap, _ns1__QueryObjects *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__QueryObjects);
	if (soap_out_PointerTo_ns1__QueryObjects(soap, tag?tag:"ns1:QueryObjects", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__QueryObjects ** SOAP_FMAC4 soap_get_PointerTo_ns1__QueryObjects(struct soap *soap, _ns1__QueryObjects **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__QueryObjects(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetFileHeader(struct soap *soap, _ns1__GetFileHeader *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetFileHeader))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetFileHeader(struct soap *soap, const char *tag, int id, _ns1__GetFileHeader *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetFileHeader);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetFileHeader ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetFileHeader(struct soap *soap, const char *tag, _ns1__GetFileHeader **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetFileHeader **)soap_malloc(soap, sizeof(_ns1__GetFileHeader *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetFileHeader *)soap_instantiate__ns1__GetFileHeader(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetFileHeader ** p = (_ns1__GetFileHeader **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetFileHeader, sizeof(_ns1__GetFileHeader), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetFileHeader(struct soap *soap, _ns1__GetFileHeader *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetFileHeader);
	if (soap_out_PointerTo_ns1__GetFileHeader(soap, tag?tag:"ns1:GetFileHeader", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetFileHeader ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetFileHeader(struct soap *soap, _ns1__GetFileHeader **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetFileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QueryDownLoadItemArrByProductId(struct soap *soap, _ns1__QueryDownLoadItemArrByProductId *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, int id, _ns1__QueryDownLoadItemArrByProductId *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__QueryDownLoadItemArrByProductId ** SOAP_FMAC4 soap_in_PointerTo_ns1__QueryDownLoadItemArrByProductId(struct soap *soap, const char *tag, _ns1__QueryDownLoadItemArrByProductId **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__QueryDownLoadItemArrByProductId **)soap_malloc(soap, sizeof(_ns1__QueryDownLoadItemArrByProductId *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__QueryDownLoadItemArrByProductId *)soap_instantiate__ns1__QueryDownLoadItemArrByProductId(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__QueryDownLoadItemArrByProductId ** p = (_ns1__QueryDownLoadItemArrByProductId **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__QueryDownLoadItemArrByProductId, sizeof(_ns1__QueryDownLoadItemArrByProductId), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QueryDownLoadItemArrByProductId(struct soap *soap, _ns1__QueryDownLoadItemArrByProductId *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__QueryDownLoadItemArrByProductId);
	if (soap_out_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, tag?tag:"ns1:QueryDownLoadItemArrByProductId", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__QueryDownLoadItemArrByProductId ** SOAP_FMAC4 soap_get_PointerTo_ns1__QueryDownLoadItemArrByProductId(struct soap *soap, _ns1__QueryDownLoadItemArrByProductId **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__QueryDownLoadItemArrByProductId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetDogAccessHistory(struct soap *soap, _ns1__GetDogAccessHistory *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetDogAccessHistory))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetDogAccessHistory(struct soap *soap, const char *tag, int id, _ns1__GetDogAccessHistory *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetDogAccessHistory);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetDogAccessHistory ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetDogAccessHistory(struct soap *soap, const char *tag, _ns1__GetDogAccessHistory **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetDogAccessHistory **)soap_malloc(soap, sizeof(_ns1__GetDogAccessHistory *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetDogAccessHistory *)soap_instantiate__ns1__GetDogAccessHistory(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetDogAccessHistory ** p = (_ns1__GetDogAccessHistory **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetDogAccessHistory, sizeof(_ns1__GetDogAccessHistory), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetDogAccessHistory(struct soap *soap, _ns1__GetDogAccessHistory *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetDogAccessHistory);
	if (soap_out_PointerTo_ns1__GetDogAccessHistory(soap, tag?tag:"ns1:GetDogAccessHistory", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetDogAccessHistory ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetDogAccessHistory(struct soap *soap, _ns1__GetDogAccessHistory **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetDogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVersionReleaseNotes(struct soap *soap, _ns1__GetVersionReleaseNotes *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetVersionReleaseNotes))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVersionReleaseNotes(struct soap *soap, const char *tag, int id, _ns1__GetVersionReleaseNotes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetVersionReleaseNotes);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetVersionReleaseNotes ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVersionReleaseNotes(struct soap *soap, const char *tag, _ns1__GetVersionReleaseNotes **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetVersionReleaseNotes **)soap_malloc(soap, sizeof(_ns1__GetVersionReleaseNotes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetVersionReleaseNotes *)soap_instantiate__ns1__GetVersionReleaseNotes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetVersionReleaseNotes ** p = (_ns1__GetVersionReleaseNotes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetVersionReleaseNotes, sizeof(_ns1__GetVersionReleaseNotes), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVersionReleaseNotes(struct soap *soap, _ns1__GetVersionReleaseNotes *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetVersionReleaseNotes);
	if (soap_out_PointerTo_ns1__GetVersionReleaseNotes(soap, tag?tag:"ns1:GetVersionReleaseNotes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetVersionReleaseNotes ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVersionReleaseNotes(struct soap *soap, _ns1__GetVersionReleaseNotes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetVersionReleaseNotes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CompareVersion(struct soap *soap, _ns1__CompareVersion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CompareVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CompareVersion(struct soap *soap, const char *tag, int id, _ns1__CompareVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CompareVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CompareVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__CompareVersion(struct soap *soap, const char *tag, _ns1__CompareVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CompareVersion **)soap_malloc(soap, sizeof(_ns1__CompareVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CompareVersion *)soap_instantiate__ns1__CompareVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CompareVersion ** p = (_ns1__CompareVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CompareVersion, sizeof(_ns1__CompareVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CompareVersion(struct soap *soap, _ns1__CompareVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CompareVersion);
	if (soap_out_PointerTo_ns1__CompareVersion(soap, tag?tag:"ns1:CompareVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CompareVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__CompareVersion(struct soap *soap, _ns1__CompareVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CompareVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRevisionReadFlag(struct soap *soap, _ns1__SetRevisionReadFlag *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRevisionReadFlag))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRevisionReadFlag(struct soap *soap, const char *tag, int id, _ns1__SetRevisionReadFlag *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRevisionReadFlag);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRevisionReadFlag ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRevisionReadFlag(struct soap *soap, const char *tag, _ns1__SetRevisionReadFlag **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRevisionReadFlag **)soap_malloc(soap, sizeof(_ns1__SetRevisionReadFlag *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRevisionReadFlag *)soap_instantiate__ns1__SetRevisionReadFlag(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRevisionReadFlag ** p = (_ns1__SetRevisionReadFlag **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRevisionReadFlag, sizeof(_ns1__SetRevisionReadFlag), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRevisionReadFlag(struct soap *soap, _ns1__SetRevisionReadFlag *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRevisionReadFlag);
	if (soap_out_PointerTo_ns1__SetRevisionReadFlag(soap, tag?tag:"ns1:SetRevisionReadFlag", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRevisionReadFlag ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRevisionReadFlag(struct soap *soap, _ns1__SetRevisionReadFlag **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRevisionReadFlag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetUpdateVerByCurVer(struct soap *soap, _ns1__GetUpdateVerByCurVer *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetUpdateVerByCurVer))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetUpdateVerByCurVer(struct soap *soap, const char *tag, int id, _ns1__GetUpdateVerByCurVer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetUpdateVerByCurVer);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetUpdateVerByCurVer ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetUpdateVerByCurVer(struct soap *soap, const char *tag, _ns1__GetUpdateVerByCurVer **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetUpdateVerByCurVer **)soap_malloc(soap, sizeof(_ns1__GetUpdateVerByCurVer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetUpdateVerByCurVer *)soap_instantiate__ns1__GetUpdateVerByCurVer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetUpdateVerByCurVer ** p = (_ns1__GetUpdateVerByCurVer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetUpdateVerByCurVer, sizeof(_ns1__GetUpdateVerByCurVer), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetUpdateVerByCurVer(struct soap *soap, _ns1__GetUpdateVerByCurVer *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetUpdateVerByCurVer);
	if (soap_out_PointerTo_ns1__GetUpdateVerByCurVer(soap, tag?tag:"ns1:GetUpdateVerByCurVer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetUpdateVerByCurVer ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetUpdateVerByCurVer(struct soap *soap, _ns1__GetUpdateVerByCurVer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetUpdateVerByCurVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LoginByByteArr(struct soap *soap, _ns1__LoginByByteArr *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LoginByByteArr))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LoginByByteArr(struct soap *soap, const char *tag, int id, _ns1__LoginByByteArr *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LoginByByteArr);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LoginByByteArr ** SOAP_FMAC4 soap_in_PointerTo_ns1__LoginByByteArr(struct soap *soap, const char *tag, _ns1__LoginByByteArr **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LoginByByteArr **)soap_malloc(soap, sizeof(_ns1__LoginByByteArr *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LoginByByteArr *)soap_instantiate__ns1__LoginByByteArr(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LoginByByteArr ** p = (_ns1__LoginByByteArr **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LoginByByteArr, sizeof(_ns1__LoginByByteArr), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LoginByByteArr(struct soap *soap, _ns1__LoginByByteArr *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LoginByByteArr);
	if (soap_out_PointerTo_ns1__LoginByByteArr(soap, tag?tag:"ns1:LoginByByteArr", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LoginByByteArr ** SOAP_FMAC4 soap_get_PointerTo_ns1__LoginByByteArr(struct soap *soap, _ns1__LoginByByteArr **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LoginByByteArr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Login))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Login(struct soap *soap, const char *tag, int id, _ns1__Login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_in_PointerTo_ns1__Login(struct soap *soap, const char *tag, _ns1__Login **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Login **)soap_malloc(soap, sizeof(_ns1__Login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Login *)soap_instantiate__ns1__Login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Login ** p = (_ns1__Login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Login);
	if (soap_out_PointerTo_ns1__Login(soap, tag?tag:"ns1:Login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_get_PointerTo_ns1__Login(struct soap *soap, _ns1__Login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FileHeader(struct soap *soap, ns1__FileHeader *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__FileHeader))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FileHeader(struct soap *soap, const char *tag, int id, ns1__FileHeader *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__FileHeader);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__FileHeader ** SOAP_FMAC4 soap_in_PointerTons1__FileHeader(struct soap *soap, const char *tag, ns1__FileHeader **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__FileHeader **)soap_malloc(soap, sizeof(ns1__FileHeader *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__FileHeader *)soap_instantiate_ns1__FileHeader(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__FileHeader ** p = (ns1__FileHeader **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__FileHeader, sizeof(ns1__FileHeader), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FileHeader(struct soap *soap, ns1__FileHeader *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__FileHeader);
	if (soap_out_PointerTons1__FileHeader(soap, tag?tag:"ns1:FileHeader", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__FileHeader ** SOAP_FMAC4 soap_get_PointerTons1__FileHeader(struct soap *soap, ns1__FileHeader **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__FileHeader(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfDownLoadItem(struct soap *soap, ns1__ArrayOfDownLoadItem *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfDownLoadItem))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfDownLoadItem(struct soap *soap, const char *tag, int id, ns1__ArrayOfDownLoadItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfDownLoadItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfDownLoadItem ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfDownLoadItem(struct soap *soap, const char *tag, ns1__ArrayOfDownLoadItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfDownLoadItem **)soap_malloc(soap, sizeof(ns1__ArrayOfDownLoadItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfDownLoadItem *)soap_instantiate_ns1__ArrayOfDownLoadItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfDownLoadItem ** p = (ns1__ArrayOfDownLoadItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfDownLoadItem, sizeof(ns1__ArrayOfDownLoadItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfDownLoadItem(struct soap *soap, ns1__ArrayOfDownLoadItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfDownLoadItem);
	if (soap_out_PointerTons1__ArrayOfDownLoadItem(soap, tag?tag:"ns1:ArrayOfDownLoadItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfDownLoadItem ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfDownLoadItem(struct soap *soap, ns1__ArrayOfDownLoadItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfDownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DogAccessHistory(struct soap *soap, ns1__DogAccessHistory *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__DogAccessHistory))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DogAccessHistory(struct soap *soap, const char *tag, int id, ns1__DogAccessHistory *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__DogAccessHistory);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__DogAccessHistory ** SOAP_FMAC4 soap_in_PointerTons1__DogAccessHistory(struct soap *soap, const char *tag, ns1__DogAccessHistory **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__DogAccessHistory **)soap_malloc(soap, sizeof(ns1__DogAccessHistory *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__DogAccessHistory *)soap_instantiate_ns1__DogAccessHistory(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__DogAccessHistory ** p = (ns1__DogAccessHistory **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__DogAccessHistory, sizeof(ns1__DogAccessHistory), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DogAccessHistory(struct soap *soap, ns1__DogAccessHistory *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__DogAccessHistory);
	if (soap_out_PointerTons1__DogAccessHistory(soap, tag?tag:"ns1:DogAccessHistory", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__DogAccessHistory ** SOAP_FMAC4 soap_get_PointerTons1__DogAccessHistory(struct soap *soap, ns1__DogAccessHistory **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__DogAccessHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfVersionRevision(struct soap *soap, ns1__ArrayOfVersionRevision *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfVersionRevision))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfVersionRevision(struct soap *soap, const char *tag, int id, ns1__ArrayOfVersionRevision *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfVersionRevision);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfVersionRevision ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfVersionRevision(struct soap *soap, const char *tag, ns1__ArrayOfVersionRevision **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfVersionRevision **)soap_malloc(soap, sizeof(ns1__ArrayOfVersionRevision *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfVersionRevision *)soap_instantiate_ns1__ArrayOfVersionRevision(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfVersionRevision ** p = (ns1__ArrayOfVersionRevision **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfVersionRevision, sizeof(ns1__ArrayOfVersionRevision), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfVersionRevision(struct soap *soap, ns1__ArrayOfVersionRevision *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfVersionRevision);
	if (soap_out_PointerTons1__ArrayOfVersionRevision(soap, tag?tag:"ns1:ArrayOfVersionRevision", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfVersionRevision ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfVersionRevision(struct soap *soap, ns1__ArrayOfVersionRevision **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfVersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfInt))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfInt(struct soap *soap, const char *tag, int id, ns1__ArrayOfInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfInt ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfInt(struct soap *soap, const char *tag, ns1__ArrayOfInt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfInt **)soap_malloc(soap, sizeof(ns1__ArrayOfInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfInt *)soap_instantiate_ns1__ArrayOfInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfInt ** p = (ns1__ArrayOfInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfInt, sizeof(ns1__ArrayOfInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfInt);
	if (soap_out_PointerTons1__ArrayOfInt(soap, tag?tag:"ns1:ArrayOfInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfInt ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfProductVersion(struct soap *soap, ns1__ArrayOfProductVersion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfProductVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfProductVersion(struct soap *soap, const char *tag, int id, ns1__ArrayOfProductVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfProductVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfProductVersion ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfProductVersion(struct soap *soap, const char *tag, ns1__ArrayOfProductVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfProductVersion **)soap_malloc(soap, sizeof(ns1__ArrayOfProductVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfProductVersion *)soap_instantiate_ns1__ArrayOfProductVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfProductVersion ** p = (ns1__ArrayOfProductVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfProductVersion, sizeof(ns1__ArrayOfProductVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfProductVersion(struct soap *soap, ns1__ArrayOfProductVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfProductVersion);
	if (soap_out_PointerTons1__ArrayOfProductVersion(soap, tag?tag:"ns1:ArrayOfProductVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfProductVersion ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfProductVersion(struct soap *soap, ns1__ArrayOfProductVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)(void*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"xsd:base64Binary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__DownLoadItem(struct soap *soap, ns1__DownLoadItem **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__DownLoadItem))
		soap_serialize_PointerTons1__DownLoadItem(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__DownLoadItem(struct soap *soap, const char *tag, int id, ns1__DownLoadItem **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__DownLoadItem);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__DownLoadItem(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__DownLoadItem *** SOAP_FMAC4 soap_in_PointerToPointerTons1__DownLoadItem(struct soap *soap, const char *tag, ns1__DownLoadItem ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__DownLoadItem ***)soap_malloc(soap, sizeof(ns1__DownLoadItem **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__DownLoadItem(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__DownLoadItem ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__DownLoadItem, sizeof(ns1__DownLoadItem *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__DownLoadItem(struct soap *soap, ns1__DownLoadItem **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__DownLoadItem);
	if (soap_out_PointerToPointerTons1__DownLoadItem(soap, tag?tag:"ns1:DownLoadItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__DownLoadItem *** SOAP_FMAC4 soap_get_PointerToPointerTons1__DownLoadItem(struct soap *soap, ns1__DownLoadItem ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__DownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DownLoadItem(struct soap *soap, ns1__DownLoadItem *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__DownLoadItem))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DownLoadItem(struct soap *soap, const char *tag, int id, ns1__DownLoadItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__DownLoadItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__DownLoadItem ** SOAP_FMAC4 soap_in_PointerTons1__DownLoadItem(struct soap *soap, const char *tag, ns1__DownLoadItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__DownLoadItem **)soap_malloc(soap, sizeof(ns1__DownLoadItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__DownLoadItem *)soap_instantiate_ns1__DownLoadItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__DownLoadItem ** p = (ns1__DownLoadItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__DownLoadItem, sizeof(ns1__DownLoadItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DownLoadItem(struct soap *soap, ns1__DownLoadItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__DownLoadItem);
	if (soap_out_PointerTons1__DownLoadItem(soap, tag?tag:"ns1:DownLoadItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__DownLoadItem ** SOAP_FMAC4 soap_get_PointerTons1__DownLoadItem(struct soap *soap, ns1__DownLoadItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__DownLoadItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__VersionRevision(struct soap *soap, ns1__VersionRevision **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__VersionRevision))
		soap_serialize_PointerTons1__VersionRevision(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__VersionRevision(struct soap *soap, const char *tag, int id, ns1__VersionRevision **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__VersionRevision);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__VersionRevision(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__VersionRevision *** SOAP_FMAC4 soap_in_PointerToPointerTons1__VersionRevision(struct soap *soap, const char *tag, ns1__VersionRevision ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__VersionRevision ***)soap_malloc(soap, sizeof(ns1__VersionRevision **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__VersionRevision(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__VersionRevision ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__VersionRevision, sizeof(ns1__VersionRevision *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__VersionRevision(struct soap *soap, ns1__VersionRevision **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__VersionRevision);
	if (soap_out_PointerToPointerTons1__VersionRevision(soap, tag?tag:"ns1:VersionRevision", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__VersionRevision *** SOAP_FMAC4 soap_get_PointerToPointerTons1__VersionRevision(struct soap *soap, ns1__VersionRevision ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__VersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VersionRevision(struct soap *soap, ns1__VersionRevision *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__VersionRevision))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VersionRevision(struct soap *soap, const char *tag, int id, ns1__VersionRevision *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__VersionRevision);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__VersionRevision ** SOAP_FMAC4 soap_in_PointerTons1__VersionRevision(struct soap *soap, const char *tag, ns1__VersionRevision **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__VersionRevision **)soap_malloc(soap, sizeof(ns1__VersionRevision *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__VersionRevision *)soap_instantiate_ns1__VersionRevision(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__VersionRevision ** p = (ns1__VersionRevision **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__VersionRevision, sizeof(ns1__VersionRevision), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VersionRevision(struct soap *soap, ns1__VersionRevision *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__VersionRevision);
	if (soap_out_PointerTons1__VersionRevision(soap, tag?tag:"ns1:VersionRevision", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__VersionRevision ** SOAP_FMAC4 soap_get_PointerTons1__VersionRevision(struct soap *soap, ns1__VersionRevision **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__VersionRevision(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ProductVersion(struct soap *soap, ns1__ProductVersion **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__ProductVersion))
		soap_serialize_PointerTons1__ProductVersion(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ProductVersion(struct soap *soap, const char *tag, int id, ns1__ProductVersion **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__ProductVersion);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__ProductVersion(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__ProductVersion *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ProductVersion(struct soap *soap, const char *tag, ns1__ProductVersion ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ProductVersion ***)soap_malloc(soap, sizeof(ns1__ProductVersion **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__ProductVersion(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__ProductVersion ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__ProductVersion, sizeof(ns1__ProductVersion *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ProductVersion(struct soap *soap, ns1__ProductVersion **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__ProductVersion);
	if (soap_out_PointerToPointerTons1__ProductVersion(soap, tag?tag:"ns1:ProductVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ProductVersion *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ProductVersion(struct soap *soap, ns1__ProductVersion ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__ProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ProductVersion(struct soap *soap, ns1__ProductVersion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ProductVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ProductVersion(struct soap *soap, const char *tag, int id, ns1__ProductVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ProductVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ProductVersion ** SOAP_FMAC4 soap_in_PointerTons1__ProductVersion(struct soap *soap, const char *tag, ns1__ProductVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ProductVersion **)soap_malloc(soap, sizeof(ns1__ProductVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ProductVersion *)soap_instantiate_ns1__ProductVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ProductVersion ** p = (ns1__ProductVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ProductVersion, sizeof(ns1__ProductVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ProductVersion(struct soap *soap, ns1__ProductVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ProductVersion);
	if (soap_out_PointerTons1__ProductVersion(soap, tag?tag:"ns1:ProductVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ProductVersion ** SOAP_FMAC4 soap_get_PointerTons1__ProductVersion(struct soap *soap, ns1__ProductVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ProductVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
